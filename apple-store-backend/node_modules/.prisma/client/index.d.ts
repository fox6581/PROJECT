
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model images
 * 
 */
export type images = $Result.DefaultSelection<Prisma.$imagesPayload>
/**
 * Model product_types
 * 
 */
export type product_types = $Result.DefaultSelection<Prisma.$product_typesPayload>
/**
 * Model products_x_characteristics
 * 
 */
export type products_x_characteristics = $Result.DefaultSelection<Prisma.$products_x_characteristicsPayload>
/**
 * Model characteristics
 * 
 */
export type characteristics = $Result.DefaultSelection<Prisma.$characteristicsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categories.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categories.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.imagesDelegate<ExtArgs>;

  /**
   * `prisma.product_types`: Exposes CRUD operations for the **product_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_types
    * const product_types = await prisma.product_types.findMany()
    * ```
    */
  get product_types(): Prisma.product_typesDelegate<ExtArgs>;

  /**
   * `prisma.products_x_characteristics`: Exposes CRUD operations for the **products_x_characteristics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products_x_characteristics
    * const products_x_characteristics = await prisma.products_x_characteristics.findMany()
    * ```
    */
  get products_x_characteristics(): Prisma.products_x_characteristicsDelegate<ExtArgs>;

  /**
   * `prisma.characteristics`: Exposes CRUD operations for the **characteristics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characteristics
    * const characteristics = await prisma.characteristics.findMany()
    * ```
    */
  get characteristics(): Prisma.characteristicsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    categories: 'categories',
    products: 'products',
    images: 'images',
    product_types: 'product_types',
    products_x_characteristics: 'products_x_characteristics',
    characteristics: 'characteristics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'categories' | 'products' | 'images' | 'product_types' | 'products_x_characteristics' | 'characteristics'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      images: {
        payload: Prisma.$imagesPayload<ExtArgs>
        fields: Prisma.imagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          findFirst: {
            args: Prisma.imagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          findMany: {
            args: Prisma.imagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>[]
          }
          create: {
            args: Prisma.imagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          createMany: {
            args: Prisma.imagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.imagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          update: {
            args: Prisma.imagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          deleteMany: {
            args: Prisma.imagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.imagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.imagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagesPayload>
          }
          aggregate: {
            args: Prisma.ImagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImages>
          }
          groupBy: {
            args: Prisma.imagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagesCountArgs<ExtArgs>,
            result: $Utils.Optional<ImagesCountAggregateOutputType> | number
          }
        }
      }
      product_types: {
        payload: Prisma.$product_typesPayload<ExtArgs>
        fields: Prisma.product_typesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_typesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_typesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          findFirst: {
            args: Prisma.product_typesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_typesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          findMany: {
            args: Prisma.product_typesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>[]
          }
          create: {
            args: Prisma.product_typesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          createMany: {
            args: Prisma.product_typesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_typesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          update: {
            args: Prisma.product_typesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          deleteMany: {
            args: Prisma.product_typesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_typesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_typesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          aggregate: {
            args: Prisma.Product_typesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_types>
          }
          groupBy: {
            args: Prisma.product_typesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_typesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_typesCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_typesCountAggregateOutputType> | number
          }
        }
      }
      products_x_characteristics: {
        payload: Prisma.$products_x_characteristicsPayload<ExtArgs>
        fields: Prisma.products_x_characteristicsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.products_x_characteristicsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.products_x_characteristicsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          findFirst: {
            args: Prisma.products_x_characteristicsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.products_x_characteristicsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          findMany: {
            args: Prisma.products_x_characteristicsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>[]
          }
          create: {
            args: Prisma.products_x_characteristicsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          createMany: {
            args: Prisma.products_x_characteristicsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.products_x_characteristicsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          update: {
            args: Prisma.products_x_characteristicsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          deleteMany: {
            args: Prisma.products_x_characteristicsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.products_x_characteristicsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.products_x_characteristicsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$products_x_characteristicsPayload>
          }
          aggregate: {
            args: Prisma.Products_x_characteristicsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts_x_characteristics>
          }
          groupBy: {
            args: Prisma.products_x_characteristicsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Products_x_characteristicsGroupByOutputType>[]
          }
          count: {
            args: Prisma.products_x_characteristicsCountArgs<ExtArgs>,
            result: $Utils.Optional<Products_x_characteristicsCountAggregateOutputType> | number
          }
        }
      }
      characteristics: {
        payload: Prisma.$characteristicsPayload<ExtArgs>
        fields: Prisma.characteristicsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.characteristicsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.characteristicsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          findFirst: {
            args: Prisma.characteristicsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.characteristicsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          findMany: {
            args: Prisma.characteristicsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>[]
          }
          create: {
            args: Prisma.characteristicsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          createMany: {
            args: Prisma.characteristicsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.characteristicsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          update: {
            args: Prisma.characteristicsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          deleteMany: {
            args: Prisma.characteristicsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.characteristicsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.characteristicsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$characteristicsPayload>
          }
          aggregate: {
            args: Prisma.CharacteristicsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacteristics>
          }
          groupBy: {
            args: Prisma.characteristicsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CharacteristicsGroupByOutputType>[]
          }
          count: {
            args: Prisma.characteristicsCountArgs<ExtArgs>,
            result: $Utils.Optional<CharacteristicsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    products: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CategoriesCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    images: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ProductsCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagesWhereInput
  }


  /**
   * Count Type Product_typesCountOutputType
   */

  export type Product_typesCountOutputType = {
    products: number
    products_x_characteristics: number
  }

  export type Product_typesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Product_typesCountOutputTypeCountProductsArgs
    products_x_characteristics?: boolean | Product_typesCountOutputTypeCountProducts_x_characteristicsArgs
  }

  // Custom InputTypes
  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_typesCountOutputType
     */
    select?: Product_typesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountProducts_x_characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: products_x_characteristicsWhereInput
  }


  /**
   * Count Type CharacteristicsCountOutputType
   */

  export type CharacteristicsCountOutputType = {
    products_x_characteristics: number
  }

  export type CharacteristicsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products_x_characteristics?: boolean | CharacteristicsCountOutputTypeCountProducts_x_characteristicsArgs
  }

  // Custom InputTypes
  /**
   * CharacteristicsCountOutputType without action
   */
  export type CharacteristicsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacteristicsCountOutputType
     */
    select?: CharacteristicsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacteristicsCountOutputType without action
   */
  export type CharacteristicsCountOutputTypeCountProducts_x_characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: products_x_characteristicsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends categories$productsArgs<ExtArgs> = {}>(args?: Subset<T, categories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly id: FieldRef<"categories", 'Int'>
    readonly name: FieldRef<"categories", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }

  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
  }

  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }

  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }

  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }

  /**
   * categories.products
   */
  export type categories$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    price: number | null
    discount_price: number | null
    guarantee: number | null
    rating: number | null
    count_review: number | null
    category_id: number | null
    product_type_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    price: number | null
    discount_price: number | null
    guarantee: number | null
    rating: number | null
    count_review: number | null
    category_id: number | null
    product_type_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    createdAt: string | null
    price: number | null
    discount_price: number | null
    guarantee: number | null
    rating: number | null
    count_review: number | null
    is_available: boolean | null
    store_address: string | null
    color: string | null
    brand: string | null
    country: string | null
    category_id: number | null
    product_type_id: number | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    createdAt: string | null
    price: number | null
    discount_price: number | null
    guarantee: number | null
    rating: number | null
    count_review: number | null
    is_available: boolean | null
    store_address: string | null
    color: string | null
    brand: string | null
    country: string | null
    category_id: number | null
    product_type_id: number | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    createdAt: number
    price: number
    discount_price: number
    guarantee: number
    rating: number
    count_review: number
    is_available: number
    store_address: number
    color: number
    brand: number
    country: number
    category_id: number
    product_type_id: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    price?: true
    discount_price?: true
    guarantee?: true
    rating?: true
    count_review?: true
    category_id?: true
    product_type_id?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    price?: true
    discount_price?: true
    guarantee?: true
    rating?: true
    count_review?: true
    category_id?: true
    product_type_id?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    createdAt?: true
    price?: true
    discount_price?: true
    guarantee?: true
    rating?: true
    count_review?: true
    is_available?: true
    store_address?: true
    color?: true
    brand?: true
    country?: true
    category_id?: true
    product_type_id?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    price?: true
    discount_price?: true
    guarantee?: true
    rating?: true
    count_review?: true
    is_available?: true
    store_address?: true
    color?: true
    brand?: true
    country?: true
    category_id?: true
    product_type_id?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    createdAt?: true
    price?: true
    discount_price?: true
    guarantee?: true
    rating?: true
    count_review?: true
    is_available?: true
    store_address?: true
    color?: true
    brand?: true
    country?: true
    category_id?: true
    product_type_id?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    createdAt: string
    price: number
    discount_price: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address: string | null
    color: string
    brand: string
    country: string
    category_id: number
    product_type_id: number
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    price?: boolean
    discount_price?: boolean
    guarantee?: boolean
    rating?: boolean
    count_review?: boolean
    is_available?: boolean
    store_address?: boolean
    color?: boolean
    brand?: boolean
    country?: boolean
    category_id?: boolean
    product_type_id?: boolean
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    images?: boolean | products$imagesArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    price?: boolean
    discount_price?: boolean
    guarantee?: boolean
    rating?: boolean
    count_review?: boolean
    is_available?: boolean
    store_address?: boolean
    color?: boolean
    brand?: boolean
    country?: boolean
    category_id?: boolean
    product_type_id?: boolean
  }


  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    images?: boolean | products$imagesArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      category: Prisma.$categoriesPayload<ExtArgs>
      images: Prisma.$imagesPayload<ExtArgs>[]
      product_types: Prisma.$product_typesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: string
      price: number
      discount_price: number | null
      guarantee: number
      rating: number
      count_review: number
      is_available: boolean
      store_address: string | null
      color: string
      brand: string
      country: string
      category_id: number
      product_type_id: number
    }, ExtArgs["result"]["products"]>
    composites: {}
  }


  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    images<T extends products$imagesArgs<ExtArgs> = {}>(args?: Subset<T, products$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    product_types<T extends product_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_typesDefaultArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'Int'>
    readonly createdAt: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Int'>
    readonly discount_price: FieldRef<"products", 'Int'>
    readonly guarantee: FieldRef<"products", 'Int'>
    readonly rating: FieldRef<"products", 'Float'>
    readonly count_review: FieldRef<"products", 'Int'>
    readonly is_available: FieldRef<"products", 'Boolean'>
    readonly store_address: FieldRef<"products", 'String'>
    readonly color: FieldRef<"products", 'String'>
    readonly brand: FieldRef<"products", 'String'>
    readonly country: FieldRef<"products", 'String'>
    readonly category_id: FieldRef<"products", 'Int'>
    readonly product_type_id: FieldRef<"products", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }

  /**
   * products.images
   */
  export type products$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    where?: imagesWhereInput
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    cursor?: imagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model images
   */

  export type AggregateImages = {
    _count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesAvgAggregateOutputType = {
    id: number | null
    products_id: number | null
  }

  export type ImagesSumAggregateOutputType = {
    id: number | null
    products_id: number | null
  }

  export type ImagesMinAggregateOutputType = {
    id: number | null
    products_id: number | null
    image_link: string | null
  }

  export type ImagesMaxAggregateOutputType = {
    id: number | null
    products_id: number | null
    image_link: string | null
  }

  export type ImagesCountAggregateOutputType = {
    id: number
    products_id: number
    image_link: number
    _all: number
  }


  export type ImagesAvgAggregateInputType = {
    id?: true
    products_id?: true
  }

  export type ImagesSumAggregateInputType = {
    id?: true
    products_id?: true
  }

  export type ImagesMinAggregateInputType = {
    id?: true
    products_id?: true
    image_link?: true
  }

  export type ImagesMaxAggregateInputType = {
    id?: true
    products_id?: true
    image_link?: true
  }

  export type ImagesCountAggregateInputType = {
    id?: true
    products_id?: true
    image_link?: true
    _all?: true
  }

  export type ImagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which images to aggregate.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }




  export type imagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagesWhereInput
    orderBy?: imagesOrderByWithAggregationInput | imagesOrderByWithAggregationInput[]
    by: ImagesScalarFieldEnum[] | ImagesScalarFieldEnum
    having?: imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagesCountAggregateInputType | true
    _avg?: ImagesAvgAggregateInputType
    _sum?: ImagesSumAggregateInputType
    _min?: ImagesMinAggregateInputType
    _max?: ImagesMaxAggregateInputType
  }

  export type ImagesGroupByOutputType = {
    id: number
    products_id: number
    image_link: string
    _count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  type GetImagesGroupByPayload<T extends imagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagesGroupByOutputType[P]>
            : GetScalarType<T[P], ImagesGroupByOutputType[P]>
        }
      >
    >


  export type imagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    products_id?: boolean
    image_link?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["images"]>

  export type imagesSelectScalar = {
    id?: boolean
    products_id?: boolean
    image_link?: boolean
  }


  export type imagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }


  export type $imagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "images"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      products_id: number
      image_link: string
    }, ExtArgs["result"]["images"]>
    composites: {}
  }


  type imagesGetPayload<S extends boolean | null | undefined | imagesDefaultArgs> = $Result.GetResult<Prisma.$imagesPayload, S>

  type imagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<imagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImagesCountAggregateInputType | true
    }

  export interface imagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['images'], meta: { name: 'images' } }
    /**
     * Find zero or one Images that matches the filter.
     * @param {imagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, imagesFindUniqueArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Images that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imagesFindUniqueOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindFirstArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Images that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagesWithIdOnly = await prisma.images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends imagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Images.
     * @param {imagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends imagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, imagesCreateArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {imagesCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const images = await prisma.images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Images.
     * @param {imagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends imagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, imagesDeleteArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Images.
     * @param {imagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpdateArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {imagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {imagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends imagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, imagesUpsertArgs<ExtArgs>>
    ): Prisma__imagesClient<$Result.GetResult<Prisma.$imagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imagesCountArgs>(
      args?: Subset<T, imagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): Prisma.PrismaPromise<GetImagesAggregateType<T>>

    /**
     * Group by Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagesGroupByArgs['orderBy'] }
        : { orderBy?: imagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the images model
   */
  readonly fields: imagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the images model
   */ 
  interface imagesFieldRefs {
    readonly id: FieldRef<"images", 'Int'>
    readonly products_id: FieldRef<"images", 'Int'>
    readonly image_link: FieldRef<"images", 'String'>
  }
    

  // Custom InputTypes
  /**
   * images findUnique
   */
  export type imagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }

  /**
   * images findUniqueOrThrow
   */
  export type imagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }

  /**
   * images findFirst
   */
  export type imagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }

  /**
   * images findFirstOrThrow
   */
  export type imagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }

  /**
   * images findMany
   */
  export type imagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imagesOrderByWithRelationInput | imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }

  /**
   * images create
   */
  export type imagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * The data needed to create a images.
     */
    data: XOR<imagesCreateInput, imagesUncheckedCreateInput>
  }

  /**
   * images createMany
   */
  export type imagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many images.
     */
    data: imagesCreateManyInput | imagesCreateManyInput[]
  }

  /**
   * images update
   */
  export type imagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * The data needed to update a images.
     */
    data: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
    /**
     * Choose, which images to update.
     */
    where: imagesWhereUniqueInput
  }

  /**
   * images updateMany
   */
  export type imagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update images.
     */
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyInput>
    /**
     * Filter which images to update
     */
    where?: imagesWhereInput
  }

  /**
   * images upsert
   */
  export type imagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * The filter to search for the images to update in case it exists.
     */
    where: imagesWhereUniqueInput
    /**
     * In case the images found by the `where` argument doesn't exist, create a new images with this data.
     */
    create: XOR<imagesCreateInput, imagesUncheckedCreateInput>
    /**
     * In case the images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
  }

  /**
   * images delete
   */
  export type imagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
    /**
     * Filter which images to delete.
     */
    where: imagesWhereUniqueInput
  }

  /**
   * images deleteMany
   */
  export type imagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which images to delete
     */
    where?: imagesWhereInput
  }

  /**
   * images without action
   */
  export type imagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagesInclude<ExtArgs> | null
  }


  /**
   * Model product_types
   */

  export type AggregateProduct_types = {
    _count: Product_typesCountAggregateOutputType | null
    _avg: Product_typesAvgAggregateOutputType | null
    _sum: Product_typesSumAggregateOutputType | null
    _min: Product_typesMinAggregateOutputType | null
    _max: Product_typesMaxAggregateOutputType | null
  }

  export type Product_typesAvgAggregateOutputType = {
    id: number | null
  }

  export type Product_typesSumAggregateOutputType = {
    id: number | null
  }

  export type Product_typesMinAggregateOutputType = {
    id: number | null
    product_name: string | null
  }

  export type Product_typesMaxAggregateOutputType = {
    id: number | null
    product_name: string | null
  }

  export type Product_typesCountAggregateOutputType = {
    id: number
    product_name: number
    _all: number
  }


  export type Product_typesAvgAggregateInputType = {
    id?: true
  }

  export type Product_typesSumAggregateInputType = {
    id?: true
  }

  export type Product_typesMinAggregateInputType = {
    id?: true
    product_name?: true
  }

  export type Product_typesMaxAggregateInputType = {
    id?: true
    product_name?: true
  }

  export type Product_typesCountAggregateInputType = {
    id?: true
    product_name?: true
    _all?: true
  }

  export type Product_typesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_types to aggregate.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_types
    **/
    _count?: true | Product_typesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_typesMaxAggregateInputType
  }

  export type GetProduct_typesAggregateType<T extends Product_typesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_types]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_types[P]>
      : GetScalarType<T[P], AggregateProduct_types[P]>
  }




  export type product_typesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_typesWhereInput
    orderBy?: product_typesOrderByWithAggregationInput | product_typesOrderByWithAggregationInput[]
    by: Product_typesScalarFieldEnum[] | Product_typesScalarFieldEnum
    having?: product_typesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_typesCountAggregateInputType | true
    _avg?: Product_typesAvgAggregateInputType
    _sum?: Product_typesSumAggregateInputType
    _min?: Product_typesMinAggregateInputType
    _max?: Product_typesMaxAggregateInputType
  }

  export type Product_typesGroupByOutputType = {
    id: number
    product_name: string
    _count: Product_typesCountAggregateOutputType | null
    _avg: Product_typesAvgAggregateOutputType | null
    _sum: Product_typesSumAggregateOutputType | null
    _min: Product_typesMinAggregateOutputType | null
    _max: Product_typesMaxAggregateOutputType | null
  }

  type GetProduct_typesGroupByPayload<T extends product_typesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_typesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_typesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_typesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_typesGroupByOutputType[P]>
        }
      >
    >


  export type product_typesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    products?: boolean | product_types$productsArgs<ExtArgs>
    products_x_characteristics?: boolean | product_types$products_x_characteristicsArgs<ExtArgs>
    _count?: boolean | Product_typesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_types"]>

  export type product_typesSelectScalar = {
    id?: boolean
    product_name?: boolean
  }


  export type product_typesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | product_types$productsArgs<ExtArgs>
    products_x_characteristics?: boolean | product_types$products_x_characteristicsArgs<ExtArgs>
    _count?: boolean | Product_typesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $product_typesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_types"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
      products_x_characteristics: Prisma.$products_x_characteristicsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_name: string
    }, ExtArgs["result"]["product_types"]>
    composites: {}
  }


  type product_typesGetPayload<S extends boolean | null | undefined | product_typesDefaultArgs> = $Result.GetResult<Prisma.$product_typesPayload, S>

  type product_typesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_typesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_typesCountAggregateInputType | true
    }

  export interface product_typesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_types'], meta: { name: 'product_types' } }
    /**
     * Find zero or one Product_types that matches the filter.
     * @param {product_typesFindUniqueArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_typesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesFindUniqueArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_types that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {product_typesFindUniqueOrThrowArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_typesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindFirstArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_typesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindFirstArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_types that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindFirstOrThrowArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_typesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_types
     * const product_types = await prisma.product_types.findMany()
     * 
     * // Get first 10 Product_types
     * const product_types = await prisma.product_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_typesWithIdOnly = await prisma.product_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_typesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_types.
     * @param {product_typesCreateArgs} args - Arguments to create a Product_types.
     * @example
     * // Create one Product_types
     * const Product_types = await prisma.product_types.create({
     *   data: {
     *     // ... data to create a Product_types
     *   }
     * })
     * 
    **/
    create<T extends product_typesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesCreateArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_types.
     *     @param {product_typesCreateManyArgs} args - Arguments to create many Product_types.
     *     @example
     *     // Create many Product_types
     *     const product_types = await prisma.product_types.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_typesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_types.
     * @param {product_typesDeleteArgs} args - Arguments to delete one Product_types.
     * @example
     * // Delete one Product_types
     * const Product_types = await prisma.product_types.delete({
     *   where: {
     *     // ... filter to delete one Product_types
     *   }
     * })
     * 
    **/
    delete<T extends product_typesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesDeleteArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_types.
     * @param {product_typesUpdateArgs} args - Arguments to update one Product_types.
     * @example
     * // Update one Product_types
     * const product_types = await prisma.product_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_typesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpdateArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_types.
     * @param {product_typesDeleteManyArgs} args - Arguments to filter Product_types to delete.
     * @example
     * // Delete a few Product_types
     * const { count } = await prisma.product_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_typesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_types
     * const product_types = await prisma.product_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_typesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_types.
     * @param {product_typesUpsertArgs} args - Arguments to update or create a Product_types.
     * @example
     * // Update or create a Product_types
     * const product_types = await prisma.product_types.upsert({
     *   create: {
     *     // ... data to create a Product_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_types we want to update
     *   }
     * })
    **/
    upsert<T extends product_typesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpsertArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesCountArgs} args - Arguments to filter Product_types to count.
     * @example
     * // Count the number of Product_types
     * const count = await prisma.product_types.count({
     *   where: {
     *     // ... the filter for the Product_types we want to count
     *   }
     * })
    **/
    count<T extends product_typesCountArgs>(
      args?: Subset<T, product_typesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_typesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_typesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_typesAggregateArgs>(args: Subset<T, Product_typesAggregateArgs>): Prisma.PrismaPromise<GetProduct_typesAggregateType<T>>

    /**
     * Group by Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_typesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_typesGroupByArgs['orderBy'] }
        : { orderBy?: product_typesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_typesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_typesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_types model
   */
  readonly fields: product_typesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_typesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends product_types$productsArgs<ExtArgs> = {}>(args?: Subset<T, product_types$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    products_x_characteristics<T extends product_types$products_x_characteristicsArgs<ExtArgs> = {}>(args?: Subset<T, product_types$products_x_characteristicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_types model
   */ 
  interface product_typesFieldRefs {
    readonly id: FieldRef<"product_types", 'Int'>
    readonly product_name: FieldRef<"product_types", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product_types findUnique
   */
  export type product_typesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types findUniqueOrThrow
   */
  export type product_typesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types findFirst
   */
  export type product_typesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_types.
     */
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types findFirstOrThrow
   */
  export type product_typesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_types.
     */
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types findMany
   */
  export type product_typesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types create
   */
  export type product_typesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_types.
     */
    data: XOR<product_typesCreateInput, product_typesUncheckedCreateInput>
  }

  /**
   * product_types createMany
   */
  export type product_typesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_types.
     */
    data: product_typesCreateManyInput | product_typesCreateManyInput[]
  }

  /**
   * product_types update
   */
  export type product_typesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_types.
     */
    data: XOR<product_typesUpdateInput, product_typesUncheckedUpdateInput>
    /**
     * Choose, which product_types to update.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types updateMany
   */
  export type product_typesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_types.
     */
    data: XOR<product_typesUpdateManyMutationInput, product_typesUncheckedUpdateManyInput>
    /**
     * Filter which product_types to update
     */
    where?: product_typesWhereInput
  }

  /**
   * product_types upsert
   */
  export type product_typesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_types to update in case it exists.
     */
    where: product_typesWhereUniqueInput
    /**
     * In case the product_types found by the `where` argument doesn't exist, create a new product_types with this data.
     */
    create: XOR<product_typesCreateInput, product_typesUncheckedCreateInput>
    /**
     * In case the product_types was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_typesUpdateInput, product_typesUncheckedUpdateInput>
  }

  /**
   * product_types delete
   */
  export type product_typesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter which product_types to delete.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types deleteMany
   */
  export type product_typesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_types to delete
     */
    where?: product_typesWhereInput
  }

  /**
   * product_types.products
   */
  export type product_types$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * product_types.products_x_characteristics
   */
  export type product_types$products_x_characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    where?: products_x_characteristicsWhereInput
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    cursor?: products_x_characteristicsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Products_x_characteristicsScalarFieldEnum | Products_x_characteristicsScalarFieldEnum[]
  }

  /**
   * product_types without action
   */
  export type product_typesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
  }


  /**
   * Model products_x_characteristics
   */

  export type AggregateProducts_x_characteristics = {
    _count: Products_x_characteristicsCountAggregateOutputType | null
    _avg: Products_x_characteristicsAvgAggregateOutputType | null
    _sum: Products_x_characteristicsSumAggregateOutputType | null
    _min: Products_x_characteristicsMinAggregateOutputType | null
    _max: Products_x_characteristicsMaxAggregateOutputType | null
  }

  export type Products_x_characteristicsAvgAggregateOutputType = {
    id: number | null
    characteristics_id: number | null
    product_types_id: number | null
  }

  export type Products_x_characteristicsSumAggregateOutputType = {
    id: number | null
    characteristics_id: number | null
    product_types_id: number | null
  }

  export type Products_x_characteristicsMinAggregateOutputType = {
    id: number | null
    characteristics_id: number | null
    product_types_id: number | null
    value: string | null
  }

  export type Products_x_characteristicsMaxAggregateOutputType = {
    id: number | null
    characteristics_id: number | null
    product_types_id: number | null
    value: string | null
  }

  export type Products_x_characteristicsCountAggregateOutputType = {
    id: number
    characteristics_id: number
    product_types_id: number
    value: number
    _all: number
  }


  export type Products_x_characteristicsAvgAggregateInputType = {
    id?: true
    characteristics_id?: true
    product_types_id?: true
  }

  export type Products_x_characteristicsSumAggregateInputType = {
    id?: true
    characteristics_id?: true
    product_types_id?: true
  }

  export type Products_x_characteristicsMinAggregateInputType = {
    id?: true
    characteristics_id?: true
    product_types_id?: true
    value?: true
  }

  export type Products_x_characteristicsMaxAggregateInputType = {
    id?: true
    characteristics_id?: true
    product_types_id?: true
    value?: true
  }

  export type Products_x_characteristicsCountAggregateInputType = {
    id?: true
    characteristics_id?: true
    product_types_id?: true
    value?: true
    _all?: true
  }

  export type Products_x_characteristicsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products_x_characteristics to aggregate.
     */
    where?: products_x_characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_x_characteristics to fetch.
     */
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: products_x_characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_x_characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_x_characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products_x_characteristics
    **/
    _count?: true | Products_x_characteristicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Products_x_characteristicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Products_x_characteristicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Products_x_characteristicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Products_x_characteristicsMaxAggregateInputType
  }

  export type GetProducts_x_characteristicsAggregateType<T extends Products_x_characteristicsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts_x_characteristics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts_x_characteristics[P]>
      : GetScalarType<T[P], AggregateProducts_x_characteristics[P]>
  }




  export type products_x_characteristicsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: products_x_characteristicsWhereInput
    orderBy?: products_x_characteristicsOrderByWithAggregationInput | products_x_characteristicsOrderByWithAggregationInput[]
    by: Products_x_characteristicsScalarFieldEnum[] | Products_x_characteristicsScalarFieldEnum
    having?: products_x_characteristicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Products_x_characteristicsCountAggregateInputType | true
    _avg?: Products_x_characteristicsAvgAggregateInputType
    _sum?: Products_x_characteristicsSumAggregateInputType
    _min?: Products_x_characteristicsMinAggregateInputType
    _max?: Products_x_characteristicsMaxAggregateInputType
  }

  export type Products_x_characteristicsGroupByOutputType = {
    id: number
    characteristics_id: number
    product_types_id: number
    value: string
    _count: Products_x_characteristicsCountAggregateOutputType | null
    _avg: Products_x_characteristicsAvgAggregateOutputType | null
    _sum: Products_x_characteristicsSumAggregateOutputType | null
    _min: Products_x_characteristicsMinAggregateOutputType | null
    _max: Products_x_characteristicsMaxAggregateOutputType | null
  }

  type GetProducts_x_characteristicsGroupByPayload<T extends products_x_characteristicsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Products_x_characteristicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Products_x_characteristicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Products_x_characteristicsGroupByOutputType[P]>
            : GetScalarType<T[P], Products_x_characteristicsGroupByOutputType[P]>
        }
      >
    >


  export type products_x_characteristicsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characteristics_id?: boolean
    product_types_id?: boolean
    value?: boolean
    characteristics?: boolean | characteristicsDefaultArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products_x_characteristics"]>

  export type products_x_characteristicsSelectScalar = {
    id?: boolean
    characteristics_id?: boolean
    product_types_id?: boolean
    value?: boolean
  }


  export type products_x_characteristicsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characteristics?: boolean | characteristicsDefaultArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }


  export type $products_x_characteristicsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products_x_characteristics"
    objects: {
      characteristics: Prisma.$characteristicsPayload<ExtArgs>
      product_types: Prisma.$product_typesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      characteristics_id: number
      product_types_id: number
      value: string
    }, ExtArgs["result"]["products_x_characteristics"]>
    composites: {}
  }


  type products_x_characteristicsGetPayload<S extends boolean | null | undefined | products_x_characteristicsDefaultArgs> = $Result.GetResult<Prisma.$products_x_characteristicsPayload, S>

  type products_x_characteristicsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<products_x_characteristicsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Products_x_characteristicsCountAggregateInputType | true
    }

  export interface products_x_characteristicsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products_x_characteristics'], meta: { name: 'products_x_characteristics' } }
    /**
     * Find zero or one Products_x_characteristics that matches the filter.
     * @param {products_x_characteristicsFindUniqueArgs} args - Arguments to find a Products_x_characteristics
     * @example
     * // Get one Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends products_x_characteristicsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsFindUniqueArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products_x_characteristics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {products_x_characteristicsFindUniqueOrThrowArgs} args - Arguments to find a Products_x_characteristics
     * @example
     * // Get one Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends products_x_characteristicsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products_x_characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsFindFirstArgs} args - Arguments to find a Products_x_characteristics
     * @example
     * // Get one Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends products_x_characteristicsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsFindFirstArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products_x_characteristics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsFindFirstOrThrowArgs} args - Arguments to find a Products_x_characteristics
     * @example
     * // Get one Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends products_x_characteristicsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products_x_characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findMany()
     * 
     * // Get first 10 Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const products_x_characteristicsWithIdOnly = await prisma.products_x_characteristics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends products_x_characteristicsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products_x_characteristics.
     * @param {products_x_characteristicsCreateArgs} args - Arguments to create a Products_x_characteristics.
     * @example
     * // Create one Products_x_characteristics
     * const Products_x_characteristics = await prisma.products_x_characteristics.create({
     *   data: {
     *     // ... data to create a Products_x_characteristics
     *   }
     * })
     * 
    **/
    create<T extends products_x_characteristicsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsCreateArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products_x_characteristics.
     *     @param {products_x_characteristicsCreateManyArgs} args - Arguments to create many Products_x_characteristics.
     *     @example
     *     // Create many Products_x_characteristics
     *     const products_x_characteristics = await prisma.products_x_characteristics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends products_x_characteristicsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products_x_characteristics.
     * @param {products_x_characteristicsDeleteArgs} args - Arguments to delete one Products_x_characteristics.
     * @example
     * // Delete one Products_x_characteristics
     * const Products_x_characteristics = await prisma.products_x_characteristics.delete({
     *   where: {
     *     // ... filter to delete one Products_x_characteristics
     *   }
     * })
     * 
    **/
    delete<T extends products_x_characteristicsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsDeleteArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products_x_characteristics.
     * @param {products_x_characteristicsUpdateArgs} args - Arguments to update one Products_x_characteristics.
     * @example
     * // Update one Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends products_x_characteristicsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsUpdateArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products_x_characteristics.
     * @param {products_x_characteristicsDeleteManyArgs} args - Arguments to filter Products_x_characteristics to delete.
     * @example
     * // Delete a few Products_x_characteristics
     * const { count } = await prisma.products_x_characteristics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends products_x_characteristicsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, products_x_characteristicsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products_x_characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends products_x_characteristicsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products_x_characteristics.
     * @param {products_x_characteristicsUpsertArgs} args - Arguments to update or create a Products_x_characteristics.
     * @example
     * // Update or create a Products_x_characteristics
     * const products_x_characteristics = await prisma.products_x_characteristics.upsert({
     *   create: {
     *     // ... data to create a Products_x_characteristics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products_x_characteristics we want to update
     *   }
     * })
    **/
    upsert<T extends products_x_characteristicsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, products_x_characteristicsUpsertArgs<ExtArgs>>
    ): Prisma__products_x_characteristicsClient<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products_x_characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsCountArgs} args - Arguments to filter Products_x_characteristics to count.
     * @example
     * // Count the number of Products_x_characteristics
     * const count = await prisma.products_x_characteristics.count({
     *   where: {
     *     // ... the filter for the Products_x_characteristics we want to count
     *   }
     * })
    **/
    count<T extends products_x_characteristicsCountArgs>(
      args?: Subset<T, products_x_characteristicsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Products_x_characteristicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products_x_characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_x_characteristicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Products_x_characteristicsAggregateArgs>(args: Subset<T, Products_x_characteristicsAggregateArgs>): Prisma.PrismaPromise<GetProducts_x_characteristicsAggregateType<T>>

    /**
     * Group by Products_x_characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_x_characteristicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends products_x_characteristicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: products_x_characteristicsGroupByArgs['orderBy'] }
        : { orderBy?: products_x_characteristicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, products_x_characteristicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProducts_x_characteristicsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products_x_characteristics model
   */
  readonly fields: products_x_characteristicsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products_x_characteristics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__products_x_characteristicsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    characteristics<T extends characteristicsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, characteristicsDefaultArgs<ExtArgs>>): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product_types<T extends product_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_typesDefaultArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the products_x_characteristics model
   */ 
  interface products_x_characteristicsFieldRefs {
    readonly id: FieldRef<"products_x_characteristics", 'Int'>
    readonly characteristics_id: FieldRef<"products_x_characteristics", 'Int'>
    readonly product_types_id: FieldRef<"products_x_characteristics", 'Int'>
    readonly value: FieldRef<"products_x_characteristics", 'String'>
  }
    

  // Custom InputTypes
  /**
   * products_x_characteristics findUnique
   */
  export type products_x_characteristicsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which products_x_characteristics to fetch.
     */
    where: products_x_characteristicsWhereUniqueInput
  }

  /**
   * products_x_characteristics findUniqueOrThrow
   */
  export type products_x_characteristicsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which products_x_characteristics to fetch.
     */
    where: products_x_characteristicsWhereUniqueInput
  }

  /**
   * products_x_characteristics findFirst
   */
  export type products_x_characteristicsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which products_x_characteristics to fetch.
     */
    where?: products_x_characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_x_characteristics to fetch.
     */
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products_x_characteristics.
     */
    cursor?: products_x_characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_x_characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_x_characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products_x_characteristics.
     */
    distinct?: Products_x_characteristicsScalarFieldEnum | Products_x_characteristicsScalarFieldEnum[]
  }

  /**
   * products_x_characteristics findFirstOrThrow
   */
  export type products_x_characteristicsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which products_x_characteristics to fetch.
     */
    where?: products_x_characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_x_characteristics to fetch.
     */
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products_x_characteristics.
     */
    cursor?: products_x_characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_x_characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_x_characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products_x_characteristics.
     */
    distinct?: Products_x_characteristicsScalarFieldEnum | Products_x_characteristicsScalarFieldEnum[]
  }

  /**
   * products_x_characteristics findMany
   */
  export type products_x_characteristicsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which products_x_characteristics to fetch.
     */
    where?: products_x_characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_x_characteristics to fetch.
     */
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products_x_characteristics.
     */
    cursor?: products_x_characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_x_characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_x_characteristics.
     */
    skip?: number
    distinct?: Products_x_characteristicsScalarFieldEnum | Products_x_characteristicsScalarFieldEnum[]
  }

  /**
   * products_x_characteristics create
   */
  export type products_x_characteristicsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * The data needed to create a products_x_characteristics.
     */
    data: XOR<products_x_characteristicsCreateInput, products_x_characteristicsUncheckedCreateInput>
  }

  /**
   * products_x_characteristics createMany
   */
  export type products_x_characteristicsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products_x_characteristics.
     */
    data: products_x_characteristicsCreateManyInput | products_x_characteristicsCreateManyInput[]
  }

  /**
   * products_x_characteristics update
   */
  export type products_x_characteristicsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * The data needed to update a products_x_characteristics.
     */
    data: XOR<products_x_characteristicsUpdateInput, products_x_characteristicsUncheckedUpdateInput>
    /**
     * Choose, which products_x_characteristics to update.
     */
    where: products_x_characteristicsWhereUniqueInput
  }

  /**
   * products_x_characteristics updateMany
   */
  export type products_x_characteristicsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products_x_characteristics.
     */
    data: XOR<products_x_characteristicsUpdateManyMutationInput, products_x_characteristicsUncheckedUpdateManyInput>
    /**
     * Filter which products_x_characteristics to update
     */
    where?: products_x_characteristicsWhereInput
  }

  /**
   * products_x_characteristics upsert
   */
  export type products_x_characteristicsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * The filter to search for the products_x_characteristics to update in case it exists.
     */
    where: products_x_characteristicsWhereUniqueInput
    /**
     * In case the products_x_characteristics found by the `where` argument doesn't exist, create a new products_x_characteristics with this data.
     */
    create: XOR<products_x_characteristicsCreateInput, products_x_characteristicsUncheckedCreateInput>
    /**
     * In case the products_x_characteristics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<products_x_characteristicsUpdateInput, products_x_characteristicsUncheckedUpdateInput>
  }

  /**
   * products_x_characteristics delete
   */
  export type products_x_characteristicsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    /**
     * Filter which products_x_characteristics to delete.
     */
    where: products_x_characteristicsWhereUniqueInput
  }

  /**
   * products_x_characteristics deleteMany
   */
  export type products_x_characteristicsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products_x_characteristics to delete
     */
    where?: products_x_characteristicsWhereInput
  }

  /**
   * products_x_characteristics without action
   */
  export type products_x_characteristicsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
  }


  /**
   * Model characteristics
   */

  export type AggregateCharacteristics = {
    _count: CharacteristicsCountAggregateOutputType | null
    _avg: CharacteristicsAvgAggregateOutputType | null
    _sum: CharacteristicsSumAggregateOutputType | null
    _min: CharacteristicsMinAggregateOutputType | null
    _max: CharacteristicsMaxAggregateOutputType | null
  }

  export type CharacteristicsAvgAggregateOutputType = {
    id: number | null
  }

  export type CharacteristicsSumAggregateOutputType = {
    id: number | null
  }

  export type CharacteristicsMinAggregateOutputType = {
    id: number | null
    name: string | null
    unit_type: string | null
  }

  export type CharacteristicsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    unit_type: string | null
  }

  export type CharacteristicsCountAggregateOutputType = {
    id: number
    name: number
    unit_type: number
    _all: number
  }


  export type CharacteristicsAvgAggregateInputType = {
    id?: true
  }

  export type CharacteristicsSumAggregateInputType = {
    id?: true
  }

  export type CharacteristicsMinAggregateInputType = {
    id?: true
    name?: true
    unit_type?: true
  }

  export type CharacteristicsMaxAggregateInputType = {
    id?: true
    name?: true
    unit_type?: true
  }

  export type CharacteristicsCountAggregateInputType = {
    id?: true
    name?: true
    unit_type?: true
    _all?: true
  }

  export type CharacteristicsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which characteristics to aggregate.
     */
    where?: characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of characteristics to fetch.
     */
    orderBy?: characteristicsOrderByWithRelationInput | characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned characteristics
    **/
    _count?: true | CharacteristicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacteristicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacteristicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacteristicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacteristicsMaxAggregateInputType
  }

  export type GetCharacteristicsAggregateType<T extends CharacteristicsAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacteristics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacteristics[P]>
      : GetScalarType<T[P], AggregateCharacteristics[P]>
  }




  export type characteristicsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: characteristicsWhereInput
    orderBy?: characteristicsOrderByWithAggregationInput | characteristicsOrderByWithAggregationInput[]
    by: CharacteristicsScalarFieldEnum[] | CharacteristicsScalarFieldEnum
    having?: characteristicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacteristicsCountAggregateInputType | true
    _avg?: CharacteristicsAvgAggregateInputType
    _sum?: CharacteristicsSumAggregateInputType
    _min?: CharacteristicsMinAggregateInputType
    _max?: CharacteristicsMaxAggregateInputType
  }

  export type CharacteristicsGroupByOutputType = {
    id: number
    name: string
    unit_type: string
    _count: CharacteristicsCountAggregateOutputType | null
    _avg: CharacteristicsAvgAggregateOutputType | null
    _sum: CharacteristicsSumAggregateOutputType | null
    _min: CharacteristicsMinAggregateOutputType | null
    _max: CharacteristicsMaxAggregateOutputType | null
  }

  type GetCharacteristicsGroupByPayload<T extends characteristicsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacteristicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacteristicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacteristicsGroupByOutputType[P]>
            : GetScalarType<T[P], CharacteristicsGroupByOutputType[P]>
        }
      >
    >


  export type characteristicsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    unit_type?: boolean
    products_x_characteristics?: boolean | characteristics$products_x_characteristicsArgs<ExtArgs>
    _count?: boolean | CharacteristicsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characteristics"]>

  export type characteristicsSelectScalar = {
    id?: boolean
    name?: boolean
    unit_type?: boolean
  }


  export type characteristicsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products_x_characteristics?: boolean | characteristics$products_x_characteristicsArgs<ExtArgs>
    _count?: boolean | CharacteristicsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $characteristicsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "characteristics"
    objects: {
      products_x_characteristics: Prisma.$products_x_characteristicsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      unit_type: string
    }, ExtArgs["result"]["characteristics"]>
    composites: {}
  }


  type characteristicsGetPayload<S extends boolean | null | undefined | characteristicsDefaultArgs> = $Result.GetResult<Prisma.$characteristicsPayload, S>

  type characteristicsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<characteristicsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacteristicsCountAggregateInputType | true
    }

  export interface characteristicsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['characteristics'], meta: { name: 'characteristics' } }
    /**
     * Find zero or one Characteristics that matches the filter.
     * @param {characteristicsFindUniqueArgs} args - Arguments to find a Characteristics
     * @example
     * // Get one Characteristics
     * const characteristics = await prisma.characteristics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends characteristicsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsFindUniqueArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Characteristics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {characteristicsFindUniqueOrThrowArgs} args - Arguments to find a Characteristics
     * @example
     * // Get one Characteristics
     * const characteristics = await prisma.characteristics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends characteristicsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsFindFirstArgs} args - Arguments to find a Characteristics
     * @example
     * // Get one Characteristics
     * const characteristics = await prisma.characteristics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends characteristicsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsFindFirstArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Characteristics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsFindFirstOrThrowArgs} args - Arguments to find a Characteristics
     * @example
     * // Get one Characteristics
     * const characteristics = await prisma.characteristics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends characteristicsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characteristics
     * const characteristics = await prisma.characteristics.findMany()
     * 
     * // Get first 10 Characteristics
     * const characteristics = await prisma.characteristics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characteristicsWithIdOnly = await prisma.characteristics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends characteristicsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Characteristics.
     * @param {characteristicsCreateArgs} args - Arguments to create a Characteristics.
     * @example
     * // Create one Characteristics
     * const Characteristics = await prisma.characteristics.create({
     *   data: {
     *     // ... data to create a Characteristics
     *   }
     * })
     * 
    **/
    create<T extends characteristicsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsCreateArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Characteristics.
     *     @param {characteristicsCreateManyArgs} args - Arguments to create many Characteristics.
     *     @example
     *     // Create many Characteristics
     *     const characteristics = await prisma.characteristics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends characteristicsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Characteristics.
     * @param {characteristicsDeleteArgs} args - Arguments to delete one Characteristics.
     * @example
     * // Delete one Characteristics
     * const Characteristics = await prisma.characteristics.delete({
     *   where: {
     *     // ... filter to delete one Characteristics
     *   }
     * })
     * 
    **/
    delete<T extends characteristicsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsDeleteArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Characteristics.
     * @param {characteristicsUpdateArgs} args - Arguments to update one Characteristics.
     * @example
     * // Update one Characteristics
     * const characteristics = await prisma.characteristics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends characteristicsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsUpdateArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Characteristics.
     * @param {characteristicsDeleteManyArgs} args - Arguments to filter Characteristics to delete.
     * @example
     * // Delete a few Characteristics
     * const { count } = await prisma.characteristics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends characteristicsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, characteristicsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characteristics
     * const characteristics = await prisma.characteristics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends characteristicsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Characteristics.
     * @param {characteristicsUpsertArgs} args - Arguments to update or create a Characteristics.
     * @example
     * // Update or create a Characteristics
     * const characteristics = await prisma.characteristics.upsert({
     *   create: {
     *     // ... data to create a Characteristics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Characteristics we want to update
     *   }
     * })
    **/
    upsert<T extends characteristicsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, characteristicsUpsertArgs<ExtArgs>>
    ): Prisma__characteristicsClient<$Result.GetResult<Prisma.$characteristicsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsCountArgs} args - Arguments to filter Characteristics to count.
     * @example
     * // Count the number of Characteristics
     * const count = await prisma.characteristics.count({
     *   where: {
     *     // ... the filter for the Characteristics we want to count
     *   }
     * })
    **/
    count<T extends characteristicsCountArgs>(
      args?: Subset<T, characteristicsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacteristicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacteristicsAggregateArgs>(args: Subset<T, CharacteristicsAggregateArgs>): Prisma.PrismaPromise<GetCharacteristicsAggregateType<T>>

    /**
     * Group by Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {characteristicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends characteristicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: characteristicsGroupByArgs['orderBy'] }
        : { orderBy?: characteristicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, characteristicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacteristicsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the characteristics model
   */
  readonly fields: characteristicsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for characteristics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__characteristicsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products_x_characteristics<T extends characteristics$products_x_characteristicsArgs<ExtArgs> = {}>(args?: Subset<T, characteristics$products_x_characteristicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$products_x_characteristicsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the characteristics model
   */ 
  interface characteristicsFieldRefs {
    readonly id: FieldRef<"characteristics", 'Int'>
    readonly name: FieldRef<"characteristics", 'String'>
    readonly unit_type: FieldRef<"characteristics", 'String'>
  }
    

  // Custom InputTypes
  /**
   * characteristics findUnique
   */
  export type characteristicsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which characteristics to fetch.
     */
    where: characteristicsWhereUniqueInput
  }

  /**
   * characteristics findUniqueOrThrow
   */
  export type characteristicsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which characteristics to fetch.
     */
    where: characteristicsWhereUniqueInput
  }

  /**
   * characteristics findFirst
   */
  export type characteristicsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which characteristics to fetch.
     */
    where?: characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of characteristics to fetch.
     */
    orderBy?: characteristicsOrderByWithRelationInput | characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for characteristics.
     */
    cursor?: characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of characteristics.
     */
    distinct?: CharacteristicsScalarFieldEnum | CharacteristicsScalarFieldEnum[]
  }

  /**
   * characteristics findFirstOrThrow
   */
  export type characteristicsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which characteristics to fetch.
     */
    where?: characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of characteristics to fetch.
     */
    orderBy?: characteristicsOrderByWithRelationInput | characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for characteristics.
     */
    cursor?: characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of characteristics.
     */
    distinct?: CharacteristicsScalarFieldEnum | CharacteristicsScalarFieldEnum[]
  }

  /**
   * characteristics findMany
   */
  export type characteristicsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter, which characteristics to fetch.
     */
    where?: characteristicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of characteristics to fetch.
     */
    orderBy?: characteristicsOrderByWithRelationInput | characteristicsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing characteristics.
     */
    cursor?: characteristicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` characteristics.
     */
    skip?: number
    distinct?: CharacteristicsScalarFieldEnum | CharacteristicsScalarFieldEnum[]
  }

  /**
   * characteristics create
   */
  export type characteristicsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * The data needed to create a characteristics.
     */
    data: XOR<characteristicsCreateInput, characteristicsUncheckedCreateInput>
  }

  /**
   * characteristics createMany
   */
  export type characteristicsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many characteristics.
     */
    data: characteristicsCreateManyInput | characteristicsCreateManyInput[]
  }

  /**
   * characteristics update
   */
  export type characteristicsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * The data needed to update a characteristics.
     */
    data: XOR<characteristicsUpdateInput, characteristicsUncheckedUpdateInput>
    /**
     * Choose, which characteristics to update.
     */
    where: characteristicsWhereUniqueInput
  }

  /**
   * characteristics updateMany
   */
  export type characteristicsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update characteristics.
     */
    data: XOR<characteristicsUpdateManyMutationInput, characteristicsUncheckedUpdateManyInput>
    /**
     * Filter which characteristics to update
     */
    where?: characteristicsWhereInput
  }

  /**
   * characteristics upsert
   */
  export type characteristicsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * The filter to search for the characteristics to update in case it exists.
     */
    where: characteristicsWhereUniqueInput
    /**
     * In case the characteristics found by the `where` argument doesn't exist, create a new characteristics with this data.
     */
    create: XOR<characteristicsCreateInput, characteristicsUncheckedCreateInput>
    /**
     * In case the characteristics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<characteristicsUpdateInput, characteristicsUncheckedUpdateInput>
  }

  /**
   * characteristics delete
   */
  export type characteristicsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
    /**
     * Filter which characteristics to delete.
     */
    where: characteristicsWhereUniqueInput
  }

  /**
   * characteristics deleteMany
   */
  export type characteristicsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which characteristics to delete
     */
    where?: characteristicsWhereInput
  }

  /**
   * characteristics.products_x_characteristics
   */
  export type characteristics$products_x_characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products_x_characteristics
     */
    select?: products_x_characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: products_x_characteristicsInclude<ExtArgs> | null
    where?: products_x_characteristicsWhereInput
    orderBy?: products_x_characteristicsOrderByWithRelationInput | products_x_characteristicsOrderByWithRelationInput[]
    cursor?: products_x_characteristicsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Products_x_characteristicsScalarFieldEnum | Products_x_characteristicsScalarFieldEnum[]
  }

  /**
   * characteristics without action
   */
  export type characteristicsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the characteristics
     */
    select?: characteristicsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: characteristicsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    price: 'price',
    discount_price: 'discount_price',
    guarantee: 'guarantee',
    rating: 'rating',
    count_review: 'count_review',
    is_available: 'is_available',
    store_address: 'store_address',
    color: 'color',
    brand: 'brand',
    country: 'country',
    category_id: 'category_id',
    product_type_id: 'product_type_id'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    id: 'id',
    products_id: 'products_id',
    image_link: 'image_link'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const Product_typesScalarFieldEnum: {
    id: 'id',
    product_name: 'product_name'
  };

  export type Product_typesScalarFieldEnum = (typeof Product_typesScalarFieldEnum)[keyof typeof Product_typesScalarFieldEnum]


  export const Products_x_characteristicsScalarFieldEnum: {
    id: 'id',
    characteristics_id: 'characteristics_id',
    product_types_id: 'product_types_id',
    value: 'value'
  };

  export type Products_x_characteristicsScalarFieldEnum = (typeof Products_x_characteristicsScalarFieldEnum)[keyof typeof Products_x_characteristicsScalarFieldEnum]


  export const CharacteristicsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    unit_type: 'unit_type'
  };

  export type CharacteristicsScalarFieldEnum = (typeof CharacteristicsScalarFieldEnum)[keyof typeof CharacteristicsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    id?: IntFilter<"categories"> | number
    name?: StringFilter<"categories"> | string
    products?: ProductsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    name?: StringFilter<"categories"> | string
    products?: ProductsListRelationFilter
  }, "id">

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categories"> | number
    name?: StringWithAggregatesFilter<"categories"> | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: IntFilter<"products"> | number
    createdAt?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    discount_price?: IntNullableFilter<"products"> | number | null
    guarantee?: IntFilter<"products"> | number
    rating?: FloatFilter<"products"> | number
    count_review?: IntFilter<"products"> | number
    is_available?: BoolFilter<"products"> | boolean
    store_address?: StringNullableFilter<"products"> | string | null
    color?: StringFilter<"products"> | string
    brand?: StringFilter<"products"> | string
    country?: StringFilter<"products"> | string
    category_id?: IntFilter<"products"> | number
    product_type_id?: IntFilter<"products"> | number
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    images?: ImagesListRelationFilter
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    price?: SortOrder
    discount_price?: SortOrderInput | SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    is_available?: SortOrder
    store_address?: SortOrderInput | SortOrder
    color?: SortOrder
    brand?: SortOrder
    country?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
    category?: categoriesOrderByWithRelationInput
    images?: imagesOrderByRelationAggregateInput
    product_types?: product_typesOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    createdAt?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    discount_price?: IntNullableFilter<"products"> | number | null
    guarantee?: IntFilter<"products"> | number
    rating?: FloatFilter<"products"> | number
    count_review?: IntFilter<"products"> | number
    is_available?: BoolFilter<"products"> | boolean
    store_address?: StringNullableFilter<"products"> | string | null
    color?: StringFilter<"products"> | string
    brand?: StringFilter<"products"> | string
    country?: StringFilter<"products"> | string
    category_id?: IntFilter<"products"> | number
    product_type_id?: IntFilter<"products"> | number
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    images?: ImagesListRelationFilter
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    price?: SortOrder
    discount_price?: SortOrderInput | SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    is_available?: SortOrder
    store_address?: SortOrderInput | SortOrder
    color?: SortOrder
    brand?: SortOrder
    country?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products"> | number
    createdAt?: StringWithAggregatesFilter<"products"> | string
    price?: IntWithAggregatesFilter<"products"> | number
    discount_price?: IntNullableWithAggregatesFilter<"products"> | number | null
    guarantee?: IntWithAggregatesFilter<"products"> | number
    rating?: FloatWithAggregatesFilter<"products"> | number
    count_review?: IntWithAggregatesFilter<"products"> | number
    is_available?: BoolWithAggregatesFilter<"products"> | boolean
    store_address?: StringNullableWithAggregatesFilter<"products"> | string | null
    color?: StringWithAggregatesFilter<"products"> | string
    brand?: StringWithAggregatesFilter<"products"> | string
    country?: StringWithAggregatesFilter<"products"> | string
    category_id?: IntWithAggregatesFilter<"products"> | number
    product_type_id?: IntWithAggregatesFilter<"products"> | number
  }

  export type imagesWhereInput = {
    AND?: imagesWhereInput | imagesWhereInput[]
    OR?: imagesWhereInput[]
    NOT?: imagesWhereInput | imagesWhereInput[]
    id?: IntFilter<"images"> | number
    products_id?: IntFilter<"images"> | number
    image_link?: StringFilter<"images"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type imagesOrderByWithRelationInput = {
    id?: SortOrder
    products_id?: SortOrder
    image_link?: SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type imagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imagesWhereInput | imagesWhereInput[]
    OR?: imagesWhereInput[]
    NOT?: imagesWhereInput | imagesWhereInput[]
    products_id?: IntFilter<"images"> | number
    image_link?: StringFilter<"images"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type imagesOrderByWithAggregationInput = {
    id?: SortOrder
    products_id?: SortOrder
    image_link?: SortOrder
    _count?: imagesCountOrderByAggregateInput
    _avg?: imagesAvgOrderByAggregateInput
    _max?: imagesMaxOrderByAggregateInput
    _min?: imagesMinOrderByAggregateInput
    _sum?: imagesSumOrderByAggregateInput
  }

  export type imagesScalarWhereWithAggregatesInput = {
    AND?: imagesScalarWhereWithAggregatesInput | imagesScalarWhereWithAggregatesInput[]
    OR?: imagesScalarWhereWithAggregatesInput[]
    NOT?: imagesScalarWhereWithAggregatesInput | imagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"images"> | number
    products_id?: IntWithAggregatesFilter<"images"> | number
    image_link?: StringWithAggregatesFilter<"images"> | string
  }

  export type product_typesWhereInput = {
    AND?: product_typesWhereInput | product_typesWhereInput[]
    OR?: product_typesWhereInput[]
    NOT?: product_typesWhereInput | product_typesWhereInput[]
    id?: IntFilter<"product_types"> | number
    product_name?: StringFilter<"product_types"> | string
    products?: ProductsListRelationFilter
    products_x_characteristics?: Products_x_characteristicsListRelationFilter
  }

  export type product_typesOrderByWithRelationInput = {
    id?: SortOrder
    product_name?: SortOrder
    products?: productsOrderByRelationAggregateInput
    products_x_characteristics?: products_x_characteristicsOrderByRelationAggregateInput
  }

  export type product_typesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: product_typesWhereInput | product_typesWhereInput[]
    OR?: product_typesWhereInput[]
    NOT?: product_typesWhereInput | product_typesWhereInput[]
    product_name?: StringFilter<"product_types"> | string
    products?: ProductsListRelationFilter
    products_x_characteristics?: Products_x_characteristicsListRelationFilter
  }, "id">

  export type product_typesOrderByWithAggregationInput = {
    id?: SortOrder
    product_name?: SortOrder
    _count?: product_typesCountOrderByAggregateInput
    _avg?: product_typesAvgOrderByAggregateInput
    _max?: product_typesMaxOrderByAggregateInput
    _min?: product_typesMinOrderByAggregateInput
    _sum?: product_typesSumOrderByAggregateInput
  }

  export type product_typesScalarWhereWithAggregatesInput = {
    AND?: product_typesScalarWhereWithAggregatesInput | product_typesScalarWhereWithAggregatesInput[]
    OR?: product_typesScalarWhereWithAggregatesInput[]
    NOT?: product_typesScalarWhereWithAggregatesInput | product_typesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_types"> | number
    product_name?: StringWithAggregatesFilter<"product_types"> | string
  }

  export type products_x_characteristicsWhereInput = {
    AND?: products_x_characteristicsWhereInput | products_x_characteristicsWhereInput[]
    OR?: products_x_characteristicsWhereInput[]
    NOT?: products_x_characteristicsWhereInput | products_x_characteristicsWhereInput[]
    id?: IntFilter<"products_x_characteristics"> | number
    characteristics_id?: IntFilter<"products_x_characteristics"> | number
    product_types_id?: IntFilter<"products_x_characteristics"> | number
    value?: StringFilter<"products_x_characteristics"> | string
    characteristics?: XOR<CharacteristicsRelationFilter, characteristicsWhereInput>
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }

  export type products_x_characteristicsOrderByWithRelationInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
    value?: SortOrder
    characteristics?: characteristicsOrderByWithRelationInput
    product_types?: product_typesOrderByWithRelationInput
  }

  export type products_x_characteristicsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: products_x_characteristicsWhereInput | products_x_characteristicsWhereInput[]
    OR?: products_x_characteristicsWhereInput[]
    NOT?: products_x_characteristicsWhereInput | products_x_characteristicsWhereInput[]
    characteristics_id?: IntFilter<"products_x_characteristics"> | number
    product_types_id?: IntFilter<"products_x_characteristics"> | number
    value?: StringFilter<"products_x_characteristics"> | string
    characteristics?: XOR<CharacteristicsRelationFilter, characteristicsWhereInput>
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }, "id">

  export type products_x_characteristicsOrderByWithAggregationInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
    value?: SortOrder
    _count?: products_x_characteristicsCountOrderByAggregateInput
    _avg?: products_x_characteristicsAvgOrderByAggregateInput
    _max?: products_x_characteristicsMaxOrderByAggregateInput
    _min?: products_x_characteristicsMinOrderByAggregateInput
    _sum?: products_x_characteristicsSumOrderByAggregateInput
  }

  export type products_x_characteristicsScalarWhereWithAggregatesInput = {
    AND?: products_x_characteristicsScalarWhereWithAggregatesInput | products_x_characteristicsScalarWhereWithAggregatesInput[]
    OR?: products_x_characteristicsScalarWhereWithAggregatesInput[]
    NOT?: products_x_characteristicsScalarWhereWithAggregatesInput | products_x_characteristicsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products_x_characteristics"> | number
    characteristics_id?: IntWithAggregatesFilter<"products_x_characteristics"> | number
    product_types_id?: IntWithAggregatesFilter<"products_x_characteristics"> | number
    value?: StringWithAggregatesFilter<"products_x_characteristics"> | string
  }

  export type characteristicsWhereInput = {
    AND?: characteristicsWhereInput | characteristicsWhereInput[]
    OR?: characteristicsWhereInput[]
    NOT?: characteristicsWhereInput | characteristicsWhereInput[]
    id?: IntFilter<"characteristics"> | number
    name?: StringFilter<"characteristics"> | string
    unit_type?: StringFilter<"characteristics"> | string
    products_x_characteristics?: Products_x_characteristicsListRelationFilter
  }

  export type characteristicsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    unit_type?: SortOrder
    products_x_characteristics?: products_x_characteristicsOrderByRelationAggregateInput
  }

  export type characteristicsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: characteristicsWhereInput | characteristicsWhereInput[]
    OR?: characteristicsWhereInput[]
    NOT?: characteristicsWhereInput | characteristicsWhereInput[]
    name?: StringFilter<"characteristics"> | string
    unit_type?: StringFilter<"characteristics"> | string
    products_x_characteristics?: Products_x_characteristicsListRelationFilter
  }, "id">

  export type characteristicsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    unit_type?: SortOrder
    _count?: characteristicsCountOrderByAggregateInput
    _avg?: characteristicsAvgOrderByAggregateInput
    _max?: characteristicsMaxOrderByAggregateInput
    _min?: characteristicsMinOrderByAggregateInput
    _sum?: characteristicsSumOrderByAggregateInput
  }

  export type characteristicsScalarWhereWithAggregatesInput = {
    AND?: characteristicsScalarWhereWithAggregatesInput | characteristicsScalarWhereWithAggregatesInput[]
    OR?: characteristicsScalarWhereWithAggregatesInput[]
    NOT?: characteristicsScalarWhereWithAggregatesInput | characteristicsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"characteristics"> | number
    name?: StringWithAggregatesFilter<"characteristics"> | string
    unit_type?: StringWithAggregatesFilter<"characteristics"> | string
  }

  export type categoriesCreateInput = {
    name: string
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateInput = {
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category: categoriesCreateNestedOneWithoutProductsInput
    images?: imagesCreateNestedManyWithoutProductsInput
    product_types: product_typesCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category_id: number
    product_type_id: number
    images?: imagesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsUpdateInput = {
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    images?: imagesUpdateManyWithoutProductsNestedInput
    product_types?: product_typesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    images?: imagesUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category_id: number
    product_type_id: number
  }

  export type productsUpdateManyMutationInput = {
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type imagesCreateInput = {
    image_link: string
    products: productsCreateNestedOneWithoutImagesInput
  }

  export type imagesUncheckedCreateInput = {
    id?: number
    products_id: number
    image_link: string
  }

  export type imagesUpdateInput = {
    image_link?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateOneRequiredWithoutImagesNestedInput
  }

  export type imagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    products_id?: IntFieldUpdateOperationsInput | number
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type imagesCreateManyInput = {
    id?: number
    products_id: number
    image_link: string
  }

  export type imagesUpdateManyMutationInput = {
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    products_id?: IntFieldUpdateOperationsInput | number
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type product_typesCreateInput = {
    product_name: string
    products?: productsCreateNestedManyWithoutProduct_typesInput
    products_x_characteristics?: products_x_characteristicsCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateInput = {
    id?: number
    product_name: string
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
    products_x_characteristics?: products_x_characteristicsUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutProduct_typesNestedInput
    products_x_characteristics?: products_x_characteristicsUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
    products_x_characteristics?: products_x_characteristicsUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesCreateManyInput = {
    id?: number
    product_name: string
  }

  export type product_typesUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
  }

  export type product_typesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsCreateInput = {
    value: string
    characteristics: characteristicsCreateNestedOneWithoutProducts_x_characteristicsInput
    product_types: product_typesCreateNestedOneWithoutProducts_x_characteristicsInput
  }

  export type products_x_characteristicsUncheckedCreateInput = {
    id?: number
    characteristics_id: number
    product_types_id: number
    value: string
  }

  export type products_x_characteristicsUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    characteristics?: characteristicsUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput
    product_types?: product_typesUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput
  }

  export type products_x_characteristicsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    characteristics_id?: IntFieldUpdateOperationsInput | number
    product_types_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsCreateManyInput = {
    id?: number
    characteristics_id: number
    product_types_id: number
    value: string
  }

  export type products_x_characteristicsUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    characteristics_id?: IntFieldUpdateOperationsInput | number
    product_types_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type characteristicsCreateInput = {
    name: string
    unit_type: string
    products_x_characteristics?: products_x_characteristicsCreateNestedManyWithoutCharacteristicsInput
  }

  export type characteristicsUncheckedCreateInput = {
    id?: number
    name: string
    unit_type: string
    products_x_characteristics?: products_x_characteristicsUncheckedCreateNestedManyWithoutCharacteristicsInput
  }

  export type characteristicsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
    products_x_characteristics?: products_x_characteristicsUpdateManyWithoutCharacteristicsNestedInput
  }

  export type characteristicsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
    products_x_characteristics?: products_x_characteristicsUncheckedUpdateManyWithoutCharacteristicsNestedInput
  }

  export type characteristicsCreateManyInput = {
    id?: number
    name: string
    unit_type: string
  }

  export type characteristicsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
  }

  export type characteristicsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type ImagesListRelationFilter = {
    every?: imagesWhereInput
    some?: imagesWhereInput
    none?: imagesWhereInput
  }

  export type Product_typesRelationFilter = {
    is?: product_typesWhereInput
    isNot?: product_typesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type imagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    price?: SortOrder
    discount_price?: SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    is_available?: SortOrder
    store_address?: SortOrder
    color?: SortOrder
    brand?: SortOrder
    country?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discount_price?: SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    price?: SortOrder
    discount_price?: SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    is_available?: SortOrder
    store_address?: SortOrder
    color?: SortOrder
    brand?: SortOrder
    country?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    price?: SortOrder
    discount_price?: SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    is_available?: SortOrder
    store_address?: SortOrder
    color?: SortOrder
    brand?: SortOrder
    country?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discount_price?: SortOrder
    guarantee?: SortOrder
    rating?: SortOrder
    count_review?: SortOrder
    category_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type imagesCountOrderByAggregateInput = {
    id?: SortOrder
    products_id?: SortOrder
    image_link?: SortOrder
  }

  export type imagesAvgOrderByAggregateInput = {
    id?: SortOrder
    products_id?: SortOrder
  }

  export type imagesMaxOrderByAggregateInput = {
    id?: SortOrder
    products_id?: SortOrder
    image_link?: SortOrder
  }

  export type imagesMinOrderByAggregateInput = {
    id?: SortOrder
    products_id?: SortOrder
    image_link?: SortOrder
  }

  export type imagesSumOrderByAggregateInput = {
    id?: SortOrder
    products_id?: SortOrder
  }

  export type Products_x_characteristicsListRelationFilter = {
    every?: products_x_characteristicsWhereInput
    some?: products_x_characteristicsWhereInput
    none?: products_x_characteristicsWhereInput
  }

  export type products_x_characteristicsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_typesCountOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
  }

  export type product_typesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type product_typesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
  }

  export type product_typesMinOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
  }

  export type product_typesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CharacteristicsRelationFilter = {
    is?: characteristicsWhereInput
    isNot?: characteristicsWhereInput
  }

  export type products_x_characteristicsCountOrderByAggregateInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
    value?: SortOrder
  }

  export type products_x_characteristicsAvgOrderByAggregateInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
  }

  export type products_x_characteristicsMaxOrderByAggregateInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
    value?: SortOrder
  }

  export type products_x_characteristicsMinOrderByAggregateInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
    value?: SortOrder
  }

  export type products_x_characteristicsSumOrderByAggregateInput = {
    id?: SortOrder
    characteristics_id?: SortOrder
    product_types_id?: SortOrder
  }

  export type characteristicsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unit_type?: SortOrder
  }

  export type characteristicsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type characteristicsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unit_type?: SortOrder
  }

  export type characteristicsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unit_type?: SortOrder
  }

  export type characteristicsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type productsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type productsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type categoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    connect?: categoriesWhereUniqueInput
  }

  export type imagesCreateNestedManyWithoutProductsInput = {
    create?: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput> | imagesCreateWithoutProductsInput[] | imagesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: imagesCreateOrConnectWithoutProductsInput | imagesCreateOrConnectWithoutProductsInput[]
    createMany?: imagesCreateManyProductsInputEnvelope
    connect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
  }

  export type product_typesCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProductsInput
    connect?: product_typesWhereUniqueInput
  }

  export type imagesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput> | imagesCreateWithoutProductsInput[] | imagesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: imagesCreateOrConnectWithoutProductsInput | imagesCreateOrConnectWithoutProductsInput[]
    createMany?: imagesCreateManyProductsInputEnvelope
    connect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoriesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    upsert?: categoriesUpsertWithoutProductsInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutProductsInput, categoriesUpdateWithoutProductsInput>, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type imagesUpdateManyWithoutProductsNestedInput = {
    create?: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput> | imagesCreateWithoutProductsInput[] | imagesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: imagesCreateOrConnectWithoutProductsInput | imagesCreateOrConnectWithoutProductsInput[]
    upsert?: imagesUpsertWithWhereUniqueWithoutProductsInput | imagesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: imagesCreateManyProductsInputEnvelope
    set?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    disconnect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    delete?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    connect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    update?: imagesUpdateWithWhereUniqueWithoutProductsInput | imagesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: imagesUpdateManyWithWhereWithoutProductsInput | imagesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: imagesScalarWhereInput | imagesScalarWhereInput[]
  }

  export type product_typesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProductsInput
    upsert?: product_typesUpsertWithoutProductsInput
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutProductsInput, product_typesUpdateWithoutProductsInput>, product_typesUncheckedUpdateWithoutProductsInput>
  }

  export type imagesUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput> | imagesCreateWithoutProductsInput[] | imagesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: imagesCreateOrConnectWithoutProductsInput | imagesCreateOrConnectWithoutProductsInput[]
    upsert?: imagesUpsertWithWhereUniqueWithoutProductsInput | imagesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: imagesCreateManyProductsInputEnvelope
    set?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    disconnect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    delete?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    connect?: imagesWhereUniqueInput | imagesWhereUniqueInput[]
    update?: imagesUpdateWithWhereUniqueWithoutProductsInput | imagesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: imagesUpdateManyWithWhereWithoutProductsInput | imagesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: imagesScalarWhereInput | imagesScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutImagesInput = {
    create?: XOR<productsCreateWithoutImagesInput, productsUncheckedCreateWithoutImagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutImagesInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<productsCreateWithoutImagesInput, productsUncheckedCreateWithoutImagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutImagesInput
    upsert?: productsUpsertWithoutImagesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutImagesInput, productsUpdateWithoutImagesInput>, productsUncheckedUpdateWithoutImagesInput>
  }

  export type productsCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type products_x_characteristicsCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput> | products_x_characteristicsCreateWithoutProduct_typesInput[] | products_x_characteristicsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutProduct_typesInput | products_x_characteristicsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: products_x_characteristicsCreateManyProduct_typesInputEnvelope
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type products_x_characteristicsUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput> | products_x_characteristicsCreateWithoutProduct_typesInput[] | products_x_characteristicsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutProduct_typesInput | products_x_characteristicsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: products_x_characteristicsCreateManyProduct_typesInputEnvelope
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_typesInput | productsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_typesInput | productsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_typesInput | productsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type products_x_characteristicsUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput> | products_x_characteristicsCreateWithoutProduct_typesInput[] | products_x_characteristicsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutProduct_typesInput | products_x_characteristicsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: products_x_characteristicsUpsertWithWhereUniqueWithoutProduct_typesInput | products_x_characteristicsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: products_x_characteristicsCreateManyProduct_typesInputEnvelope
    set?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    disconnect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    delete?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    update?: products_x_characteristicsUpdateWithWhereUniqueWithoutProduct_typesInput | products_x_characteristicsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: products_x_characteristicsUpdateManyWithWhereWithoutProduct_typesInput | products_x_characteristicsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_typesInput | productsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_typesInput | productsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_typesInput | productsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type products_x_characteristicsUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput> | products_x_characteristicsCreateWithoutProduct_typesInput[] | products_x_characteristicsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutProduct_typesInput | products_x_characteristicsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: products_x_characteristicsUpsertWithWhereUniqueWithoutProduct_typesInput | products_x_characteristicsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: products_x_characteristicsCreateManyProduct_typesInputEnvelope
    set?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    disconnect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    delete?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    update?: products_x_characteristicsUpdateWithWhereUniqueWithoutProduct_typesInput | products_x_characteristicsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: products_x_characteristicsUpdateManyWithWhereWithoutProduct_typesInput | products_x_characteristicsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
  }

  export type characteristicsCreateNestedOneWithoutProducts_x_characteristicsInput = {
    create?: XOR<characteristicsCreateWithoutProducts_x_characteristicsInput, characteristicsUncheckedCreateWithoutProducts_x_characteristicsInput>
    connectOrCreate?: characteristicsCreateOrConnectWithoutProducts_x_characteristicsInput
    connect?: characteristicsWhereUniqueInput
  }

  export type product_typesCreateNestedOneWithoutProducts_x_characteristicsInput = {
    create?: XOR<product_typesCreateWithoutProducts_x_characteristicsInput, product_typesUncheckedCreateWithoutProducts_x_characteristicsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProducts_x_characteristicsInput
    connect?: product_typesWhereUniqueInput
  }

  export type characteristicsUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput = {
    create?: XOR<characteristicsCreateWithoutProducts_x_characteristicsInput, characteristicsUncheckedCreateWithoutProducts_x_characteristicsInput>
    connectOrCreate?: characteristicsCreateOrConnectWithoutProducts_x_characteristicsInput
    upsert?: characteristicsUpsertWithoutProducts_x_characteristicsInput
    connect?: characteristicsWhereUniqueInput
    update?: XOR<XOR<characteristicsUpdateToOneWithWhereWithoutProducts_x_characteristicsInput, characteristicsUpdateWithoutProducts_x_characteristicsInput>, characteristicsUncheckedUpdateWithoutProducts_x_characteristicsInput>
  }

  export type product_typesUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput = {
    create?: XOR<product_typesCreateWithoutProducts_x_characteristicsInput, product_typesUncheckedCreateWithoutProducts_x_characteristicsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProducts_x_characteristicsInput
    upsert?: product_typesUpsertWithoutProducts_x_characteristicsInput
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutProducts_x_characteristicsInput, product_typesUpdateWithoutProducts_x_characteristicsInput>, product_typesUncheckedUpdateWithoutProducts_x_characteristicsInput>
  }

  export type products_x_characteristicsCreateNestedManyWithoutCharacteristicsInput = {
    create?: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput> | products_x_characteristicsCreateWithoutCharacteristicsInput[] | products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput | products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput[]
    createMany?: products_x_characteristicsCreateManyCharacteristicsInputEnvelope
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
  }

  export type products_x_characteristicsUncheckedCreateNestedManyWithoutCharacteristicsInput = {
    create?: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput> | products_x_characteristicsCreateWithoutCharacteristicsInput[] | products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput | products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput[]
    createMany?: products_x_characteristicsCreateManyCharacteristicsInputEnvelope
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
  }

  export type products_x_characteristicsUpdateManyWithoutCharacteristicsNestedInput = {
    create?: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput> | products_x_characteristicsCreateWithoutCharacteristicsInput[] | products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput | products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput[]
    upsert?: products_x_characteristicsUpsertWithWhereUniqueWithoutCharacteristicsInput | products_x_characteristicsUpsertWithWhereUniqueWithoutCharacteristicsInput[]
    createMany?: products_x_characteristicsCreateManyCharacteristicsInputEnvelope
    set?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    disconnect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    delete?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    update?: products_x_characteristicsUpdateWithWhereUniqueWithoutCharacteristicsInput | products_x_characteristicsUpdateWithWhereUniqueWithoutCharacteristicsInput[]
    updateMany?: products_x_characteristicsUpdateManyWithWhereWithoutCharacteristicsInput | products_x_characteristicsUpdateManyWithWhereWithoutCharacteristicsInput[]
    deleteMany?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
  }

  export type products_x_characteristicsUncheckedUpdateManyWithoutCharacteristicsNestedInput = {
    create?: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput> | products_x_characteristicsCreateWithoutCharacteristicsInput[] | products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput[]
    connectOrCreate?: products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput | products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput[]
    upsert?: products_x_characteristicsUpsertWithWhereUniqueWithoutCharacteristicsInput | products_x_characteristicsUpsertWithWhereUniqueWithoutCharacteristicsInput[]
    createMany?: products_x_characteristicsCreateManyCharacteristicsInputEnvelope
    set?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    disconnect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    delete?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    connect?: products_x_characteristicsWhereUniqueInput | products_x_characteristicsWhereUniqueInput[]
    update?: products_x_characteristicsUpdateWithWhereUniqueWithoutCharacteristicsInput | products_x_characteristicsUpdateWithWhereUniqueWithoutCharacteristicsInput[]
    updateMany?: products_x_characteristicsUpdateManyWithWhereWithoutCharacteristicsInput | products_x_characteristicsUpdateManyWithWhereWithoutCharacteristicsInput[]
    deleteMany?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type productsCreateWithoutCategoryInput = {
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    images?: imagesCreateNestedManyWithoutProductsInput
    product_types: product_typesCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutCategoryInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    product_type_id: number
    images?: imagesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsCreateManyCategoryInputEnvelope = {
    data: productsCreateManyCategoryInput | productsCreateManyCategoryInput[]
  }

  export type productsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: IntFilter<"products"> | number
    createdAt?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    discount_price?: IntNullableFilter<"products"> | number | null
    guarantee?: IntFilter<"products"> | number
    rating?: FloatFilter<"products"> | number
    count_review?: IntFilter<"products"> | number
    is_available?: BoolFilter<"products"> | boolean
    store_address?: StringNullableFilter<"products"> | string | null
    color?: StringFilter<"products"> | string
    brand?: StringFilter<"products"> | string
    country?: StringFilter<"products"> | string
    category_id?: IntFilter<"products"> | number
    product_type_id?: IntFilter<"products"> | number
  }

  export type categoriesCreateWithoutProductsInput = {
    name: string
  }

  export type categoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
  }

  export type categoriesCreateOrConnectWithoutProductsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
  }

  export type imagesCreateWithoutProductsInput = {
    image_link: string
  }

  export type imagesUncheckedCreateWithoutProductsInput = {
    id?: number
    image_link: string
  }

  export type imagesCreateOrConnectWithoutProductsInput = {
    where: imagesWhereUniqueInput
    create: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput>
  }

  export type imagesCreateManyProductsInputEnvelope = {
    data: imagesCreateManyProductsInput | imagesCreateManyProductsInput[]
  }

  export type product_typesCreateWithoutProductsInput = {
    product_name: string
    products_x_characteristics?: products_x_characteristicsCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutProductsInput = {
    id?: number
    product_name: string
    products_x_characteristics?: products_x_characteristicsUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutProductsInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
  }

  export type categoriesUpsertWithoutProductsInput = {
    update: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutProductsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type categoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUpsertWithWhereUniqueWithoutProductsInput = {
    where: imagesWhereUniqueInput
    update: XOR<imagesUpdateWithoutProductsInput, imagesUncheckedUpdateWithoutProductsInput>
    create: XOR<imagesCreateWithoutProductsInput, imagesUncheckedCreateWithoutProductsInput>
  }

  export type imagesUpdateWithWhereUniqueWithoutProductsInput = {
    where: imagesWhereUniqueInput
    data: XOR<imagesUpdateWithoutProductsInput, imagesUncheckedUpdateWithoutProductsInput>
  }

  export type imagesUpdateManyWithWhereWithoutProductsInput = {
    where: imagesScalarWhereInput
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyWithoutProductsInput>
  }

  export type imagesScalarWhereInput = {
    AND?: imagesScalarWhereInput | imagesScalarWhereInput[]
    OR?: imagesScalarWhereInput[]
    NOT?: imagesScalarWhereInput | imagesScalarWhereInput[]
    id?: IntFilter<"images"> | number
    products_id?: IntFilter<"images"> | number
    image_link?: StringFilter<"images"> | string
  }

  export type product_typesUpsertWithoutProductsInput = {
    update: XOR<product_typesUpdateWithoutProductsInput, product_typesUncheckedUpdateWithoutProductsInput>
    create: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutProductsInput, product_typesUncheckedUpdateWithoutProductsInput>
  }

  export type product_typesUpdateWithoutProductsInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    products_x_characteristics?: products_x_characteristicsUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    products_x_characteristics?: products_x_characteristicsUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type productsCreateWithoutImagesInput = {
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category: categoriesCreateNestedOneWithoutProductsInput
    product_types: product_typesCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutImagesInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category_id: number
    product_type_id: number
  }

  export type productsCreateOrConnectWithoutImagesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutImagesInput, productsUncheckedCreateWithoutImagesInput>
  }

  export type productsUpsertWithoutImagesInput = {
    update: XOR<productsUpdateWithoutImagesInput, productsUncheckedUpdateWithoutImagesInput>
    create: XOR<productsCreateWithoutImagesInput, productsUncheckedCreateWithoutImagesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutImagesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutImagesInput, productsUncheckedUpdateWithoutImagesInput>
  }

  export type productsUpdateWithoutImagesInput = {
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type productsCreateWithoutProduct_typesInput = {
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category: categoriesCreateNestedOneWithoutProductsInput
    images?: imagesCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category_id: number
    images?: imagesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput>
  }

  export type productsCreateManyProduct_typesInputEnvelope = {
    data: productsCreateManyProduct_typesInput | productsCreateManyProduct_typesInput[]
  }

  export type products_x_characteristicsCreateWithoutProduct_typesInput = {
    value: string
    characteristics: characteristicsCreateNestedOneWithoutProducts_x_characteristicsInput
  }

  export type products_x_characteristicsUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    characteristics_id: number
    value: string
  }

  export type products_x_characteristicsCreateOrConnectWithoutProduct_typesInput = {
    where: products_x_characteristicsWhereUniqueInput
    create: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput>
  }

  export type products_x_characteristicsCreateManyProduct_typesInputEnvelope = {
    data: products_x_characteristicsCreateManyProduct_typesInput | products_x_characteristicsCreateManyProduct_typesInput[]
  }

  export type productsUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutProduct_typesInput, productsUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput>
  }

  export type productsUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutProduct_typesInput, productsUncheckedUpdateWithoutProduct_typesInput>
  }

  export type productsUpdateManyWithWhereWithoutProduct_typesInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type products_x_characteristicsUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: products_x_characteristicsWhereUniqueInput
    update: XOR<products_x_characteristicsUpdateWithoutProduct_typesInput, products_x_characteristicsUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<products_x_characteristicsCreateWithoutProduct_typesInput, products_x_characteristicsUncheckedCreateWithoutProduct_typesInput>
  }

  export type products_x_characteristicsUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: products_x_characteristicsWhereUniqueInput
    data: XOR<products_x_characteristicsUpdateWithoutProduct_typesInput, products_x_characteristicsUncheckedUpdateWithoutProduct_typesInput>
  }

  export type products_x_characteristicsUpdateManyWithWhereWithoutProduct_typesInput = {
    where: products_x_characteristicsScalarWhereInput
    data: XOR<products_x_characteristicsUpdateManyMutationInput, products_x_characteristicsUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type products_x_characteristicsScalarWhereInput = {
    AND?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
    OR?: products_x_characteristicsScalarWhereInput[]
    NOT?: products_x_characteristicsScalarWhereInput | products_x_characteristicsScalarWhereInput[]
    id?: IntFilter<"products_x_characteristics"> | number
    characteristics_id?: IntFilter<"products_x_characteristics"> | number
    product_types_id?: IntFilter<"products_x_characteristics"> | number
    value?: StringFilter<"products_x_characteristics"> | string
  }

  export type characteristicsCreateWithoutProducts_x_characteristicsInput = {
    name: string
    unit_type: string
  }

  export type characteristicsUncheckedCreateWithoutProducts_x_characteristicsInput = {
    id?: number
    name: string
    unit_type: string
  }

  export type characteristicsCreateOrConnectWithoutProducts_x_characteristicsInput = {
    where: characteristicsWhereUniqueInput
    create: XOR<characteristicsCreateWithoutProducts_x_characteristicsInput, characteristicsUncheckedCreateWithoutProducts_x_characteristicsInput>
  }

  export type product_typesCreateWithoutProducts_x_characteristicsInput = {
    product_name: string
    products?: productsCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutProducts_x_characteristicsInput = {
    id?: number
    product_name: string
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutProducts_x_characteristicsInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutProducts_x_characteristicsInput, product_typesUncheckedCreateWithoutProducts_x_characteristicsInput>
  }

  export type characteristicsUpsertWithoutProducts_x_characteristicsInput = {
    update: XOR<characteristicsUpdateWithoutProducts_x_characteristicsInput, characteristicsUncheckedUpdateWithoutProducts_x_characteristicsInput>
    create: XOR<characteristicsCreateWithoutProducts_x_characteristicsInput, characteristicsUncheckedCreateWithoutProducts_x_characteristicsInput>
    where?: characteristicsWhereInput
  }

  export type characteristicsUpdateToOneWithWhereWithoutProducts_x_characteristicsInput = {
    where?: characteristicsWhereInput
    data: XOR<characteristicsUpdateWithoutProducts_x_characteristicsInput, characteristicsUncheckedUpdateWithoutProducts_x_characteristicsInput>
  }

  export type characteristicsUpdateWithoutProducts_x_characteristicsInput = {
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
  }

  export type characteristicsUncheckedUpdateWithoutProducts_x_characteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unit_type?: StringFieldUpdateOperationsInput | string
  }

  export type product_typesUpsertWithoutProducts_x_characteristicsInput = {
    update: XOR<product_typesUpdateWithoutProducts_x_characteristicsInput, product_typesUncheckedUpdateWithoutProducts_x_characteristicsInput>
    create: XOR<product_typesCreateWithoutProducts_x_characteristicsInput, product_typesUncheckedCreateWithoutProducts_x_characteristicsInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutProducts_x_characteristicsInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutProducts_x_characteristicsInput, product_typesUncheckedUpdateWithoutProducts_x_characteristicsInput>
  }

  export type product_typesUpdateWithoutProducts_x_characteristicsInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutProducts_x_characteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type products_x_characteristicsCreateWithoutCharacteristicsInput = {
    value: string
    product_types: product_typesCreateNestedOneWithoutProducts_x_characteristicsInput
  }

  export type products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput = {
    id?: number
    product_types_id: number
    value: string
  }

  export type products_x_characteristicsCreateOrConnectWithoutCharacteristicsInput = {
    where: products_x_characteristicsWhereUniqueInput
    create: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput>
  }

  export type products_x_characteristicsCreateManyCharacteristicsInputEnvelope = {
    data: products_x_characteristicsCreateManyCharacteristicsInput | products_x_characteristicsCreateManyCharacteristicsInput[]
  }

  export type products_x_characteristicsUpsertWithWhereUniqueWithoutCharacteristicsInput = {
    where: products_x_characteristicsWhereUniqueInput
    update: XOR<products_x_characteristicsUpdateWithoutCharacteristicsInput, products_x_characteristicsUncheckedUpdateWithoutCharacteristicsInput>
    create: XOR<products_x_characteristicsCreateWithoutCharacteristicsInput, products_x_characteristicsUncheckedCreateWithoutCharacteristicsInput>
  }

  export type products_x_characteristicsUpdateWithWhereUniqueWithoutCharacteristicsInput = {
    where: products_x_characteristicsWhereUniqueInput
    data: XOR<products_x_characteristicsUpdateWithoutCharacteristicsInput, products_x_characteristicsUncheckedUpdateWithoutCharacteristicsInput>
  }

  export type products_x_characteristicsUpdateManyWithWhereWithoutCharacteristicsInput = {
    where: products_x_characteristicsScalarWhereInput
    data: XOR<products_x_characteristicsUpdateManyMutationInput, products_x_characteristicsUncheckedUpdateManyWithoutCharacteristicsInput>
  }

  export type productsCreateManyCategoryInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    product_type_id: number
  }

  export type productsUpdateWithoutCategoryInput = {
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    images?: imagesUpdateManyWithoutProductsNestedInput
    product_types?: product_typesUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    product_type_id?: IntFieldUpdateOperationsInput | number
    images?: imagesUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type imagesCreateManyProductsInput = {
    id?: number
    image_link: string
  }

  export type imagesUpdateWithoutProductsInput = {
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type imagesUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_link?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManyProduct_typesInput = {
    id?: number
    createdAt: string
    price: number
    discount_price?: number | null
    guarantee: number
    rating: number
    count_review: number
    is_available: boolean
    store_address?: string | null
    color: string
    brand: string
    country: string
    category_id: number
  }

  export type products_x_characteristicsCreateManyProduct_typesInput = {
    id?: number
    characteristics_id: number
    value: string
  }

  export type productsUpdateWithoutProduct_typesInput = {
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    images?: imagesUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    images?: imagesUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discount_price?: NullableIntFieldUpdateOperationsInput | number | null
    guarantee?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    count_review?: IntFieldUpdateOperationsInput | number
    is_available?: BoolFieldUpdateOperationsInput | boolean
    store_address?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type products_x_characteristicsUpdateWithoutProduct_typesInput = {
    value?: StringFieldUpdateOperationsInput | string
    characteristics?: characteristicsUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput
  }

  export type products_x_characteristicsUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    characteristics_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    characteristics_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsCreateManyCharacteristicsInput = {
    id?: number
    product_types_id: number
    value: string
  }

  export type products_x_characteristicsUpdateWithoutCharacteristicsInput = {
    value?: StringFieldUpdateOperationsInput | string
    product_types?: product_typesUpdateOneRequiredWithoutProducts_x_characteristicsNestedInput
  }

  export type products_x_characteristicsUncheckedUpdateWithoutCharacteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_types_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type products_x_characteristicsUncheckedUpdateManyWithoutCharacteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_types_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCountOutputTypeDefaultArgs instead
     */
    export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Product_typesCountOutputTypeDefaultArgs instead
     */
    export type Product_typesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Product_typesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacteristicsCountOutputTypeDefaultArgs instead
     */
    export type CharacteristicsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacteristicsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productsDefaultArgs instead
     */
    export type productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use imagesDefaultArgs instead
     */
    export type imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = imagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_typesDefaultArgs instead
     */
    export type product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_typesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use products_x_characteristicsDefaultArgs instead
     */
    export type products_x_characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = products_x_characteristicsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use characteristicsDefaultArgs instead
     */
    export type characteristicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = characteristicsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}