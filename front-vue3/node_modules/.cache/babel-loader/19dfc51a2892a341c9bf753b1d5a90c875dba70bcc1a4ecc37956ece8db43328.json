{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode($setup[\"CategoryFilter\"], {\n    selected: $setup.selectedCategories,\n    onChange: _ctx.handleCategoryChange\n  }, null, 8 /* PROPS */, [\"selected\", \"onChange\"]), _createVNode($setup[\"BrandFilter\"], {\n    brands: _ctx.brands,\n    selected: $setup.selectedBrands,\n    onChange: _ctx.handleBrandChange\n  }, null, 8 /* PROPS */, [\"brands\", \"selected\", \"onChange\"]), _createVNode($setup[\"CharacteristicFilter\"], {\n    characteristics: _ctx.characteristics,\n    selected: $setup.selectedCharacteristics,\n    onChange: _ctx.handleCharacteristicChange\n  }, null, 8 /* PROPS */, [\"characteristics\", \"selected\", \"onChange\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","$setup","selected","selectedCategories","onChange","_ctx","handleCategoryChange","brands","selectedBrands","handleBrandChange","characteristics","selectedCharacteristics","handleCharacteristicChange"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Filter\\ProductFilter.vue"],"sourcesContent":["<template>\r\n    <CategoryFilter :selected=\"selectedCategories\" @change=\"handleCategoryChange\" />\r\n    <BrandFilter :brands=\"brands\" :selected=\"selectedBrands\" @change=\"handleBrandChange\" />\r\n    <CharacteristicFilter :characteristics=\"characteristics\" :selected=\"selectedCharacteristics\" @change=\"handleCharacteristicChange\" />\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref } from 'vue'; \r\n  import CategoryFilter from './CategoryFilter.vue';\r\n  import BrandFilter from './BrandFilter.vue';\r\n  import CharacteristicFilter from './CharacteristicFilter.vue';\r\n  \r\n  const selectedCategories = ref([]);\r\n  const selectedBrands = ref([]);\r\n  const selectedCharacteristics = ref({});\r\n\r\n  const filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value; // Возвращаем все товары, если ничего не выбрано\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true; // Если характеристика не выбрана, пропускаем\r\n            }\r\n\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n  </script>\r\n  "],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAgFC,MAAA;IAA/DC,QAAQ,EAAED,MAAA,CAAAE,kBAAkB;IAAGC,QAAM,EAAEC,IAAA,CAAAC;qDACxDN,YAAA,CAAuFC,MAAA;IAAzEM,MAAM,EAAEF,IAAA,CAAAE,MAAM;IAAGL,QAAQ,EAAED,MAAA,CAAAO,cAAc;IAAGJ,QAAM,EAAEC,IAAA,CAAAI;+DAClET,YAAA,CAAoIC,MAAA;IAA7GS,eAAe,EAAEL,IAAA,CAAAK,eAAe;IAAGR,QAAQ,EAAED,MAAA,CAAAU,uBAAuB;IAAGP,QAAM,EAAEC,IAAA,CAAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}