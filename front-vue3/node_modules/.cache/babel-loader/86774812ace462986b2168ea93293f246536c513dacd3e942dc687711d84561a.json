{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const selectedBrands = ref([]);\n    const characteristics = ref({}); // Уникальные характеристики\n\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n\n    // Функция для загрузки категорий\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data; // Сохраняем категории\n\n        extractBrands(data); // Извлекаем бренды\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n\n    // Функция для загрузки товаров\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data; // Сохраняем товары\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Извлекаем бренды из категорий\n    // Извлекаем уникальные бренды из категорий\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      console.log('categoriesData', categoriesData);\n      categoriesData.forEach(category => {\n        console.log('category', category);\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n      console.log(\"Уникальные бренды:\", brands.value); // Логируем извлеченные бренды\n    };\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n\n            // Инициализируем массив значений, если ещё не создан\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue); // Добавляем значение как Set, чтобы избежать дубликатов\n          });\n        }\n      });\n\n      // Преобразуем Set в массивы для удобства отображения\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      }; // Копируем данные в реактивный объект\n\n      // Используем JSON.stringify, чтобы увидеть сам объект без реактивной оболочки\n      console.log(\"Уникальные характеристики с данными:\", JSON.stringify(characteristics.value));\n    };\n\n    // Фильтрация товаров по выбранным брендам\n    const filteredProducts = computed(() => {\n      if (selectedBrands.value.length === 0) {\n        return products.value;\n      }\n      return products.value.filter(product => selectedBrands.value.includes(product.brand));\n    });\n\n    // Функция для выбора категории\n    const selectCategory = category => {\n      console.log('Выбрана категория:', category);\n    };\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      selectedBrands,\n      characteristics,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      selectCategory,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","selectedBrands","characteristics","loadCategories","loadProducts","response","fetch","ok","Error","data","json","value","extractBrands","extractCharacteristics","error","console","categoriesData","allBrands","Set","log","forEach","category","brand","add","Array","from","characteristicsData","item","isArray","characteristic","charName","charValue","JSON","stringify","filteredProducts","length","filter","product","includes","selectCategory"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" v-model=\"selectedBrands\" :value=\"brand\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n\r\n        <div>\r\n    <h2>Уникальные характеристики</h2>\r\n    <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n      <h3>{{ characteristic }}</h3>\r\n      <ul>\r\n        <li v-for=\"value in values\" :key=\"value\">{{ value }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"product-list\">\r\n            <h3>Товары</h3>\r\n            <ul>\r\n                <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                    {{ product.name }} - {{ product.brand }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst selectedBrands = ref([]);\r\nconst characteristics = ref({}); // Уникальные характеристики\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data; // Сохраняем категории\r\n\r\n        extractBrands(data);  // Извлекаем бренды\r\n        extractCharacteristics(data)\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data; // Сохраняем товары\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n// Извлекаем уникальные бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    console.log('categoriesData', categoriesData);\r\n\r\n    categoriesData.forEach(category => {\r\n        console.log('category', category);\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n    console.log(\"Уникальные бренды:\", brands.value); // Логируем извлеченные бренды\r\n};\r\n\r\n\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                // Инициализируем массив значений, если ещё не создан\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue); // Добавляем значение как Set, чтобы избежать дубликатов\r\n            });\r\n        }\r\n    });\r\n\r\n    // Преобразуем Set в массивы для удобства отображения\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData }; // Копируем данные в реактивный объект\r\n\r\n    // Используем JSON.stringify, чтобы увидеть сам объект без реактивной оболочки\r\n    console.log(\"Уникальные характеристики с данными:\", JSON.stringify(characteristics.value));\r\n};\r\n\r\n\r\n// Фильтрация товаров по выбранным брендам\r\nconst filteredProducts = computed(() => {\r\n    if (selectedBrands.value.length === 0) {\r\n        return products.value;\r\n    }\r\n    return products.value.filter(product =>\r\n        selectedBrands.value.includes(product.brand)\r\n    );\r\n});\r\n\r\n// Функция для выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list .product {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}