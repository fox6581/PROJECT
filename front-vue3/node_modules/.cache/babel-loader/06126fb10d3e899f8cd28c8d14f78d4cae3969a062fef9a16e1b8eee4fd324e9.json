{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"category-menu\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_5 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_6 = [\"for\"];\nconst _hoisted_7 = {\n  class: \"category-menu\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_10 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_11 = [\"for\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h3\", null, \"Количество товаров: \" + _toDisplayString($setup.totalProducts), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredProducts, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.id\n    }, _toDisplayString(product.name) + \" - \" + _toDisplayString(product.brand) + \" -\" + _toDisplayString(product.category), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по категориям \"), _createElementVNode(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Категории\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categories, category => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: category.id,\n      onClick: $event => $setup.selectCategory(category)\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      value: category.id,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedCategories = $event)\n    }, null, 8 /* PROPS */, _hoisted_3), [[_vModelCheckbox, _ctx.selectedCategories]]), _createTextVNode(\" \" + _toDisplayString(category.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_4, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(characteristic), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => $setup.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => $setup.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_5), [[_vModelCheckbox, $setup.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_6)]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Меню категорий \"), _createElementVNode(\"div\", _hoisted_7, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Категории\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categories, category => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: category.id,\n      onClick: $event => $setup.selectCategory(category)\n    }, _toDisplayString(category.name), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_9, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedBrands = $event),\n      onChange: $event => $setup.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_10), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по характеристикам \"), _createCommentVNode(\" Список товаров с фильтрацией \"), _createCommentVNode(\" <div class=\\\"product-list\\\">\\r\\n            <h3>Товары</h3>\\r\\n            <ul>\\r\\n                <li v-for=\\\"product in filteredProducts\\\" :key=\\\"product.id\\\">\\r\\n                    {{ product.name }} - {{ product.brand }}\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div> \")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$setup","totalProducts","_Fragment","_renderList","filteredProducts","product","key","id","name","brand","category","_createCommentVNode","_hoisted_1","categories","onClick","$event","selectCategory","type","value","_cache","_ctx","selectedCategories","_hoisted_3","_createTextVNode","_hoisted_2","_hoisted_4","characteristics","values","characteristic","selectedCharacteristics","onChange","handleCharacteristicChange","_hoisted_5","for","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","brands","selectedBrands","handleBrandChange","_hoisted_10","_hoisted_11"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n        <ul>\r\n            <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                {{ product.name }} - {{ product.brand }} -{{ product.category }}\r\n            </li>\r\n        </ul>\r\n\r\n        <!-- Фильтр по категориям -->\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    <input type=\"checkbox\" :value=\"category.id\" v-model=\"selectedCategories\" />\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <h3>{{ characteristic }}</h3>\r\n                <div v-for=\"value in values\" :key=\"value\">\r\n                    <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                        v-model=\"selectedCharacteristics[characteristic]\"\r\n                        @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                    <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <!-- Меню категорий -->\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n\r\n        <!-- Список товаров с фильтрацией -->\r\n        <!-- <div class=\"product-list\">\r\n            <h3>Товары</h3>\r\n            <ul>\r\n                <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                    {{ product.name }} - {{ product.brand }}\r\n                </li>\r\n            </ul>\r\n        </div> -->\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst category = ref([])\r\n// const selectedBrand = ref([]);  // Для одного выбранного бренда\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\nconst handleCategorysChange = (category) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedCategorys.value[category]) {\r\n        selectedCategorys.value[category] = true;\r\n    } else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log(' selectedCategorys..value',  selectedCategorys.value);\r\n};\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.Categorys) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// Функция для выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}