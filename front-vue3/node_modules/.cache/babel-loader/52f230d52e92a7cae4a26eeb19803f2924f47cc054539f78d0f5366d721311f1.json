{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const selectedBrand = ref(null); // Для одного выбранного бренда\n\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n    const characteristics = ref({}); // Уникальные характеристики\n\n    const selectedBrands = ref([]);\n    const handleBrandChange = brand => {\n      if (selectedBrands.value.includes(brand)) {\n        selectedBrands.value = selectedBrands.value.filter(item => item !== brand); // Удаляем бренд\n      } else {\n        selectedBrands.value.push(brand); // Добавляем бренд в список\n      }\n    };\n    const handleCharacteristicChange = (characteristic, value) => {\n      // Если характеристика уже выбрана, сбрасываем все значения для этой характеристики\n      selectedCharacteristics.value[characteristic] = [value]; // Оставляем только выбранное значение\n      console.log('selectedCharacteristics.value[characteristic]', selectedCharacteristics.value[characteristic])\n      // Обновляем реактивное состояние\n      [value] = selectedCharacteristics.value = {\n        ...selectedCharacteristics.value\n      };\n    };\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n\n    // Функция для загрузки категорий\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n\n    // Функция для загрузки товаров\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Извлекаем бренды из категорий\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(category => {\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n\n    // Извлекаем уникальные характеристики\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n\n    // Фильтрация товаров по выбранным брендам и характеристикам\n    const filteredProducts = computed(() => {\n      return products.value.filter(product => {\n        const matchesBrand = !selectedBrand.value || selectedBrand.value === product.brand;\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\n          if (!selectedCharacteristics.value[characteristic]) return true;\n          const productValues = product.characteristics ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value) : [];\n          return selectedCharacteristics.value[characteristic] === productValues[0];\n        });\n        return matchesBrand && matchesCharacteristics;\n      });\n    });\n\n    // Функция для выбора категории\n    const selectCategory = category => {\n      console.log('Выбрана категория:', category);\n    };\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      selectedBrand,\n      selectedCharacteristics,\n      characteristics,\n      selectedBrands,\n      handleBrandChange,\n      handleCharacteristicChange,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      selectCategory,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","selectedBrand","selectedCharacteristics","characteristics","selectedBrands","handleBrandChange","brand","value","includes","filter","item","push","handleCharacteristicChange","characteristic","console","log","loadCategories","loadProducts","response","fetch","ok","Error","data","json","extractBrands","extractCharacteristics","error","categoriesData","allBrands","Set","forEach","category","add","Array","from","characteristicsData","isArray","charName","charValue","filteredProducts","product","matchesBrand","matchesCharacteristics","Object","keys","every","productValues","map","selectCategory"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n\r\n        <div class=\"characteristic-filter\">\r\n    <h2>Уникальные характеристики</h2>\r\n    <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n        <h3>{{ characteristic }}</h3>\r\n        <div v-for=\"value in values\" :key=\"value\">\r\n            <input\r\n                type=\"checkbox\"\r\n                :id=\"`${characteristic}-${value}`\"\r\n                :value=\"value\"\r\n                v-model=\"selectedCharacteristics[characteristic]\"\r\n                @change=\"handleCharacteristicChange(characteristic, value)\"\r\n            />\r\n            <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n        <!-- Меню категорий -->\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n    <h3>Фильтр по брендам</h3>\r\n    <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n        <input \r\n            type=\"checkbox\" \r\n            :id=\"brand\" \r\n            :value=\"brand\" \r\n            v-model=\"selectedBrands\" \r\n            @change=\"handleBrandChange(brand)\"\r\n        />\r\n        <label :for=\"brand\">{{ brand }}</label>\r\n    </div>\r\n</div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n\r\n        <!-- Список товаров с фильтрацией -->\r\n        <div class=\"product-list\">\r\n            <h3>Товары</h3>\r\n            <ul>\r\n                <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                    {{ product.name }} - {{ product.brand }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst selectedBrand = ref(null);  // Для одного выбранного бренда\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    if (selectedBrands.value.includes(brand)) {\r\n        selectedBrands.value = selectedBrands.value.filter(item => item !== brand); // Удаляем бренд\r\n    } else {\r\n        selectedBrands.value.push(brand); // Добавляем бренд в список\r\n    }\r\n};\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика уже выбрана, сбрасываем все значения для этой характеристики\r\n    selectedCharacteristics.value[characteristic] = [value];  // Оставляем только выбранное значение\r\n    console.log('selectedCharacteristics.value[characteristic]', selectedCharacteristics.value[characteristic])\r\n      // Обновляем реактивное состояние\r\n      [value] =\r\n      selectedCharacteristics.value = { ...selectedCharacteristics.value }; \r\n};\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n        const matchesBrand = !selectedBrand.value || selectedBrand.value === product.brand;\r\n\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            if (!selectedCharacteristics.value[characteristic]) return true;\r\n            const productValues = product.characteristics\r\n                ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value)\r\n                : [];\r\n            return selectedCharacteristics.value[characteristic] === productValues[0];\r\n        });\r\n\r\n        return matchesBrand && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n// Функция для выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}