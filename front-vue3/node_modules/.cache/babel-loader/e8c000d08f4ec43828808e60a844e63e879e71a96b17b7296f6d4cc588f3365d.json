{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const selectedBrands = ref([]); // Массив для выбранных брендов\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n    const characteristics = ref({}); // Уникальные характеристики\n\n    // Обработчик изменения бренда\n    const handleBrandChange = brand => {\n      if (selectedBrands.value.includes(brand)) {\n        selectedBrands.value = selectedBrands.value.filter(item => item !== brand);\n      } else {\n        selectedBrands.value.push(brand);\n      }\n    };\n\n    // Обработчик изменения характеристик\n    const handleCharacteristicChange = (characteristic, value) => {\n      if (!selectedCharacteristics.value[characteristic]) {\n        selectedCharacteristics.value[characteristic] = [];\n      }\n      const selectedValues = selectedCharacteristics.value[characteristic];\n      const valueIndex = selectedValues.indexOf(value);\n      if (valueIndex === -1) {\n        selectedValues.push(value); // Добавляем значение\n      } else {\n        selectedValues.splice(valueIndex, 1); // Убираем значение\n      }\n    };\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(category => {\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n    const filteredProducts = computed(() => {\n      return products.value.filter(product => {\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\n          const selectedValues = selectedCharacteristics.value[characteristic];\n          if (!Array.isArray(selectedValues)) return true;\n          const productValues = product.characteristics ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value) : [];\n          return selectedValues.some(value => productValues.includes(value));\n        });\n        return matchesBrand && matchesCharacteristics;\n      });\n    });\n    const selectCategory = category => {\n      console.log('Выбрана категория:', category);\n    };\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      selectedBrands,\n      selectedCharacteristics,\n      characteristics,\n      handleBrandChange,\n      handleCharacteristicChange,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      selectCategory,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","selectedBrands","selectedCharacteristics","characteristics","handleBrandChange","brand","value","includes","filter","item","push","handleCharacteristicChange","characteristic","selectedValues","valueIndex","indexOf","splice","loadCategories","loadProducts","response","fetch","ok","Error","data","json","extractBrands","extractCharacteristics","error","console","categoriesData","allBrands","Set","forEach","category","add","Array","from","characteristicsData","isArray","charName","charValue","filteredProducts","product","matchesBrand","length","matchesCharacteristics","Object","keys","every","productValues","map","some","selectCategory","log"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n        <h3>{{ characteristic }}</h3>\r\n        <div v-for=\"value in values\" :key=\"value\">\r\n          <input type=\"checkbox\" \r\n                 :id=\"`${characteristic}-${value}`\" \r\n                 :value=\"value\"\r\n                 v-model=\"selectedCharacteristics[characteristic]\"\r\n                 @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n          <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"brand-filter\">\r\n        <h3>Фильтр по брендам</h3>\r\n        <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n          <input type=\"checkbox\" \r\n                 :id=\"brand\" \r\n                 :value=\"brand\" \r\n                 v-model=\"selectedBrands\"\r\n                 @change=\"handleBrandChange(brand)\" />\r\n          <label :for=\"brand\">{{ brand }}</label>\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"product-list\">\r\n        <h3>Товары</h3>\r\n        <ul>\r\n          <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n            {{ product.name }} - {{ product.brand }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  \r\n  const categories = ref([]);\r\n  const products = ref([]);\r\n  const brands = ref([]);\r\n  const selectedBrands = ref([]); // Массив для выбранных брендов\r\n  const selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\n  const characteristics = ref({});  // Уникальные характеристики\r\n  \r\n  // Обработчик изменения бренда\r\n  const handleBrandChange = (brand) => {\r\n    if (selectedBrands.value.includes(brand)) {\r\n      selectedBrands.value = selectedBrands.value.filter(item => item !== brand);\r\n    } else {\r\n      selectedBrands.value.push(brand);\r\n    }\r\n  };\r\n  \r\n  // Обработчик изменения характеристик\r\n  const handleCharacteristicChange = (characteristic, value) => {\r\n    if (!selectedCharacteristics.value[characteristic]) {\r\n      selectedCharacteristics.value[characteristic] = [];\r\n    }\r\n  \r\n    const selectedValues = selectedCharacteristics.value[characteristic];\r\n    const valueIndex = selectedValues.indexOf(value);\r\n  \r\n    if (valueIndex === -1) {\r\n      selectedValues.push(value); // Добавляем значение\r\n    } else {\r\n      selectedValues.splice(valueIndex, 1); // Убираем значение\r\n    }\r\n  };\r\n  \r\n  onMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n  });\r\n  \r\n  const loadCategories = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при загрузке категорий');\r\n      }\r\n      const data = await response.json();\r\n      categories.value = data;\r\n  \r\n      extractBrands(data);\r\n      extractCharacteristics(data);\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n  };\r\n  \r\n  const loadProducts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при загрузке товаров');\r\n      }\r\n      const data = await response.json();\r\n      products.value = data;\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n  };\r\n  \r\n  const extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    categoriesData.forEach(category => {\r\n      if (category.brand) {\r\n        allBrands.add(category.brand);\r\n      }\r\n    });\r\n    brands.value = Array.from(allBrands);\r\n  };\r\n  \r\n  const extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n    categoriesData.forEach(item => {\r\n      if (item.characteristics && Array.isArray(item.characteristics)) {\r\n        item.characteristics.forEach(characteristic => {\r\n          const charName = characteristic.characteristic;\r\n          const charValue = characteristic.value;\r\n  \r\n          if (!characteristicsData[charName]) {\r\n            characteristicsData[charName] = new Set();\r\n          }\r\n          characteristicsData[charName].add(charValue);\r\n        });\r\n      }\r\n    });\r\n  \r\n    for (const charName in characteristicsData) {\r\n      characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n  \r\n    characteristics.value = { ...characteristicsData };\r\n  };\r\n  \r\n  const filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n      const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n  \r\n      const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n        const selectedValues = selectedCharacteristics.value[characteristic];\r\n        if (!Array.isArray(selectedValues)) return true;\r\n  \r\n        const productValues = product.characteristics\r\n          ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value)\r\n          : [];\r\n  \r\n        return selectedValues.some(value => productValues.includes(value));\r\n      });\r\n  \r\n      return matchesBrand && matchesCharacteristics;\r\n    });\r\n  });\r\n  \r\n  const selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n  };\r\n  </script>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}