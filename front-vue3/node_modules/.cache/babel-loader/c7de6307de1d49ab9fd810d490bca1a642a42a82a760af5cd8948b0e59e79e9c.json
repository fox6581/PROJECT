{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_2 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_3 = [\"for\"];\nconst _hoisted_4 = {\n  class: \"category-menu\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_7 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_8 = [\"for\"];\nconst _hoisted_9 = {\n  class: \"product-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(characteristic), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => $setup.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => _ctx.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2), [[_vModelCheckbox, $setup.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_3)]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Меню категорий \"), _createElementVNode(\"div\", _hoisted_4, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Категории\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categories, category => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: category.id,\n      onClick: $event => $setup.selectCategory(category)\n    }, _toDisplayString(category.name), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_6, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedBrands = $event),\n      onChange: $event => $setup.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по характеристикам \"), _createCommentVNode(\" Список товаров с фильтрацией \"), _createElementVNode(\"div\", _hoisted_9, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Товары\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredProducts, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.id\n    }, _toDisplayString(product.name) + \" - \" + _toDisplayString(product.brand), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","_Fragment","_renderList","$setup","characteristics","values","characteristic","key","_toDisplayString","value","type","id","$event","selectedCharacteristics","onChange","_ctx","handleCharacteristicChange","_hoisted_2","for","_hoisted_3","_createCommentVNode","_hoisted_4","categories","category","onClick","selectCategory","name","_hoisted_5","_hoisted_6","brands","brand","_cache","selectedBrands","handleBrandChange","_hoisted_7","_hoisted_8","_hoisted_9","filteredProducts","product"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n\r\n        <div class=\"characteristic-filter\">\r\n    <h2>Уникальные характеристики</h2>\r\n    <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n        <h3>{{ characteristic }}</h3>\r\n        <div v-for=\"value in values\" :key=\"value\">\r\n            <input\r\n                type=\"checkbox\"\r\n                :id=\"`${characteristic}-${value}`\"\r\n                :value=\"value\"\r\n                v-model=\"selectedCharacteristics[characteristic]\"\r\n                @change=\"handleCharacteristicChange(characteristic, value)\"\r\n            />\r\n            <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n        <!-- Меню категорий -->\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n    <h3>Фильтр по брендам</h3>\r\n    <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n        <input \r\n            type=\"checkbox\" \r\n            :id=\"brand\" \r\n            :value=\"brand\" \r\n            v-model=\"selectedBrands\" \r\n            @change=\"handleBrandChange(brand)\"\r\n        />\r\n        <label :for=\"brand\">{{ brand }}</label>\r\n    </div>\r\n</div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n\r\n        <!-- Список товаров с фильтрацией -->\r\n        <div class=\"product-list\">\r\n            <h3>Товары</h3>\r\n            <ul>\r\n                <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                    {{ product.name }} - {{ product.brand }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst selectedBrand = ref(null);  // Для одного выбранного бренда\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд уже выбран, оставляем его\r\n    if (selectedBrands.value.includes(brand)) {\r\n        selectedBrands.value = [brand];  // Оставляем только выбранный бренд\r\n    }\r\n};\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n        const matchesBrand = !selectedBrand.value || selectedBrand.value === product.brand;\r\n\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            if (!selectedCharacteristics.value[characteristic]) return true;\r\n            const productValues = product.characteristics\r\n                ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value)\r\n                : [];\r\n            return selectedCharacteristics.value[characteristic] === productValues[0];\r\n        });\r\n\r\n        return matchesBrand && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n// Функция для выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}