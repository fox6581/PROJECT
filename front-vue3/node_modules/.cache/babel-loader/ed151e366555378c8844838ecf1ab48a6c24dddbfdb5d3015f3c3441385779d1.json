{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pagination\"\n};\nconst _hoisted_2 = [\"disabled\"];\nconst _hoisted_3 = [\"disabled\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"category-checkbox\"\n};\nconst _hoisted_5 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_6 = [\"for\"];\nconst _hoisted_7 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_8 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_9 = [\"for\"];\nconst _hoisted_10 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_11 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_12 = [\"for\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h3\", null, \"Количество товаров: \" + _toDisplayString($setup.totalProducts), 1 /* TEXT */), _createVNode($setup[\"ProductCart\"], {\n    products: $setup.paginatedProducts,\n    apiUrl: $setup.apiUrl\n  }, null, 8 /* PROPS */, [\"products\", \"apiUrl\"]), _createCommentVNode(\" Пагинация \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: $setup.prevPage,\n    disabled: $setup.currentPage === 1\n  }, \"Назад\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"span\", null, \"Страница \" + _toDisplayString($setup.currentPage) + \" из \" + _toDisplayString($setup.totalPages), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: $setup.nextPage,\n    disabled: $setup.currentPage === $setup.totalPages\n  }, \"Вперед\", 8 /* PROPS */, _hoisted_3)]), _createCommentVNode(\" Фильтр по брендам \"), _cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Фильтр по категориям\", -1 /* HOISTED */)), _createElementVNode(\"h2\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggleCategoryFilter && _ctx.toggleCategoryFilter(...args))\n  }, _toDisplayString(_ctx.isCategoryFilterOpen ? 'Скрыть фильтр' : 'Показать фильтр'), 1 /* TEXT */), _ctx.isCategoryFilterOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categorys, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: category,\n      value: category,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedCategorys = $event),\n      onChange: $event => $setup.handleCategorysChange(category)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_5), [[_vModelCheckbox, $setup.selectedCategorys]]), _createElementVNode(\"label\", {\n      for: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Раскрывающееся меню для характеристик \"), _createElementVNode(\"div\", _hoisted_7, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"details\", null, [_createElementVNode(\"summary\", null, _toDisplayString(characteristic), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => $setup.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => $setup.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_8), [[_vModelCheckbox, $setup.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_9)]);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_10, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedBrands = $event),\n      onChange: $event => $setup.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_12)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_toDisplayString","$setup","totalProducts","_createVNode","products","paginatedProducts","apiUrl","_createCommentVNode","_hoisted_1","onClick","prevPage","disabled","currentPage","_hoisted_2","totalPages","nextPage","_hoisted_3","_cache","args","_ctx","toggleCategoryFilter","isCategoryFilterOpen","_hoisted_4","_Fragment","_renderList","categorys","category","type","id","value","$event","selectedCategorys","onChange","handleCategorysChange","_hoisted_5","for","_hoisted_6","_hoisted_7","characteristics","values","characteristic","selectedCharacteristics","handleCharacteristicChange","_hoisted_8","_hoisted_9","_hoisted_10","brands","brand","selectedBrands","handleBrandChange","_hoisted_11","_hoisted_12"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n\r\n        <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n\r\n        <!-- Пагинация -->\r\n        <div class=\"pagination\">\r\n            <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Назад</button>\r\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n            <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Вперед</button>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <h2>Фильтр по категориям</h2>\r\n        <h2 @click=\"toggleCategoryFilter\">{{ isCategoryFilterOpen ? 'Скрыть фильтр' : 'Показать фильтр' }}</h2>\r\n<div v-if=\"isCategoryFilterOpen\" class=\"category-checkbox\">\r\n    <div v-for=\"category in categorys\" :key=\"category\">\r\n        <input type=\"checkbox\" :id=\"category\" :value=\"category\" v-model=\"selectedCategorys\"\r\n            @change=\"handleCategorysChange(category)\" />\r\n        <label :for=\"category\">{{ category }}</label>\r\n    </div>\r\n</div>\r\n        <!-- Раскрывающееся меню для характеристик -->\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <details>\r\n                    <summary>{{ characteristic }}</summary>\r\n                    <div v-for=\"value in values\" :key=\"value\">\r\n                        <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                            v-model=\"selectedCharacteristics[characteristic]\"\r\n                            @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                        <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                    </div>\r\n                </details>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\n\r\n\r\n\r\n\r\nimport { API_BASE_URL } from '@/config';\r\n\r\n// Храним товары и базовый URL для API\r\n\r\nconst apiUrl = API_BASE_URL;\r\n\r\n// Переменные для управления пагинацией\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 10; // Количество товаров на странице\r\n\r\nconst totalPages = computed(() => Math.ceil(totalProducts.value / productsPerPage));\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\n// Фильтруем и разбиваем товары на страницы\r\nconst paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return filteredProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n});\r\n\r\n// Методы для управления страницами\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\n\r\n\r\n\r\nconst handleCategorysChange = (category) => {\r\n\r\n    if (!Array.isArray(selectedCategorys.value[category])) {\r\n        selectedCategorys.value[category] = true;\r\n    }\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n\r\n    else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedCategorys.value);\r\n};\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.category) {\r\n            allCategorys.add(category.category);\r\n        }\r\n    });\r\n\r\n    categorys.value = Array.from(allCategorys);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCategorys(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.pagination {\r\n    margin: 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.pagination button {\r\n    padding: 5px 10px;\r\n}\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n    /* Добавляем перенос */\r\n}\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}