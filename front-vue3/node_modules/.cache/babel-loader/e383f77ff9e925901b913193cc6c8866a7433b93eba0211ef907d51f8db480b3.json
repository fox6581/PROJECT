{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sorted\"\n};\nconst _hoisted_2 = {\n  class: \"all_product\"\n};\nconst _hoisted_3 = {\n  class: \"pagination\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 2\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"h3\", null, [_cache[3] || (_cache[3] = _createTextVNode(\"Selected Products: \")), _createElementVNode(\"span\", null, _toDisplayString($setup.totalProducts), 1 /* TEXT */)])]), _createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"sortBy\"\n  }, \"Сортировать по:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"sortBy\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.sortOption = $event)\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"option\", {\n    value: \"rating\"\n  }, \"By rating\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"price\"\n  }, \"price\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"deliveryDate\"\n  }, \"Дата поставки\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.sortOption]]), _createElementVNode(\"button\", {\n    onClick: $setup.toggleSortOrder\n  }, \"Сортировать по \" + _toDisplayString($setup.sortOrder === 'asc' ? 'возрастанию' : 'убыванию'), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProductCart\"], {\n    products: $setup.paginatedProducts,\n    apiUrl: $setup.apiUrl\n  }, null, 8 /* PROPS */, [\"products\", \"apiUrl\"]), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Кнопка назад \"), _createElementVNode(\"button\", {\n    onClick: $setup.prevPage,\n    disabled: $setup.currentPage === 1\n  }, \"<\", 8 /* PROPS */, _hoisted_4), _createCommentVNode(\" Первая страница \"), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[1] || (_cache[1] = $event => $setup.changePage(1))\n  }, \"1\")) : _createCommentVNode(\"v-if\", true), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Страницы около текущей \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.pagesToShow, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      class: _normalizeClass({\n        active: $setup.currentPage === page\n      }),\n      onClick: $event => $setup.changePage(page)\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Троеточие, если необходимо \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Последняя страница \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[2] || (_cache[2] = $event => $setup.changePage($setup.totalPages))\n  }, _toDisplayString($setup.totalPages), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Текущая страница \"), _createElementVNode(\"span\", null, \"Страница \" + _toDisplayString($setup.currentPage) + \" из \" + _toDisplayString($setup.totalPages), 1 /* TEXT */), _createCommentVNode(\" Кнопка вперед \"), _createElementVNode(\"button\", {\n    onClick: $setup.nextPage,\n    disabled: $setup.currentPage === $setup.totalPages\n  }, \">\", 8 /* PROPS */, _hoisted_8)])]), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"menu_left\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_hoisted_1","_createTextVNode","_toDisplayString","$setup","totalProducts","for","id","_cache","$event","sortOption","value","onClick","toggleSortOrder","sortOrder","_hoisted_2","_createVNode","products","paginatedProducts","apiUrl","_hoisted_3","_createCommentVNode","prevPage","disabled","currentPage","_hoisted_4","changePage","_hoisted_5","_Fragment","_renderList","pagesToShow","page","_normalizeClass","active","_hoisted_6","totalPages","_hoisted_7","nextPage","_hoisted_8"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"sorted\">\r\n            <div>\r\n                <h3>Selected Products: <span>{{ totalProducts }}</span></h3>\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <label for=\"sortBy\">Сортировать по:</label>\r\n                <select id=\"sortBy\" v-model=\"sortOption\">\r\n                    <option value=\"rating\">By rating</option>\r\n                    <option value=\"price\">price</option>\r\n                    <option value=\"deliveryDate\">Дата поставки</option>\r\n                </select>\r\n                <button @click=\"toggleSortOrder\">Сортировать по {{ sortOrder === 'asc' ? 'возрастанию' : 'убыванию'\r\n                    }}</button>\r\n            </div>\r\n\r\n        </div>\r\n\r\n<div class=\"all_product\">        <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n        <div class=\"pagination\">\r\n            <!-- Кнопка назад -->\r\n\r\n            <button @click=\"prevPage\" :disabled=\"currentPage === 1\">&lt;</button>\r\n\r\n            <!-- Первая страница -->\r\n            <button v-if=\"currentPage >= 3\" @click=\"changePage(1)\">1</button>\r\n            <span v-if=\"currentPage >= 3\">...</span>\r\n\r\n            <!-- Страницы около текущей -->\r\n            <button v-for=\"page in pagesToShow\" :key=\"page\" :class=\"{ active: currentPage === page }\"\r\n                @click=\"changePage(page)\">\r\n                {{ page }}\r\n            </button>\r\n\r\n            <!-- Троеточие, если необходимо -->\r\n            <span v-if=\"currentPage < totalPages - 3\">...</span>\r\n\r\n            <!-- Последняя страница -->\r\n            <button v-if=\"currentPage < totalPages - 3\" @click=\"changePage(totalPages)\">\r\n                {{ totalPages }}\r\n            </button>\r\n\r\n            <!-- Текущая страница -->\r\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n\r\n            <!-- Кнопка вперед -->\r\n            <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">&gt;</button>\r\n        </div>\r\n</div>\r\n\r\n<div class=\"menu_left\">\r\n\r\n\r\n    \r\n</div>\r\n   \r\n  \r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\n\r\n// Состояние для управления видимостью фильтра\r\nconst isCategoryFilterOpen = ref(false);\r\nconst toggleCategoryFilter = () => {\r\n    isCategoryFilterOpen.value = !isCategoryFilterOpen.value;\r\n};\r\n\r\nimport { API_BASE_URL } from '@/config';\r\n\r\n\r\n\r\n// сортировка\r\n\r\n\r\nconst sortOption = ref('rating');  // По умолчанию сортируем по рейтингу\r\nconst sortOrder = ref('asc');  // По умолчанию сортировка по возрастанию\r\n\r\n// Данные товаров\r\n\r\n\r\n// Функция для изменения порядка сортировки\r\nconst toggleSortOrder = () => {\r\n    sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc';\r\n};\r\n\r\n// Функция для сортировки товаров\r\n\r\n\r\n\r\n// Функция сортировки\r\n\r\n\r\n// Пагинированные и отсортированные продукты\r\n// const paginatedSortedProducts = computed(() => {\r\n//   const start = (currentPage.value - 1) * pageSize.value\r\n//   const end = currentPage.value * pageSize.value\r\n//   return sortedProducts.value.slice(start, end)\r\n// })\r\n\r\n//конец сортировки\r\n\r\n\r\n\r\n// Храним товары и базовый URL для API\r\n\r\nconst apiUrl = API_BASE_URL;\r\n\r\n// Переменные для управления пагинацией\r\n// Пагинация\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 12; // Количество товаров на странице\r\n\r\nconst totalPages = computed(() => {\r\n    return Math.ceil(filteredProducts.value.length / productsPerPage);\r\n});\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\n\r\nconst pagesToShow = computed(() => {\r\n    const pages = [];\r\n    const range = 1; // Показать 3 страницы вокруг текущей\r\n    const start = Math.max(1, currentPage.value - range);\r\n    const end = Math.min(totalPages.value, currentPage.value + range);\r\n\r\n    // Добавляем страницы в диапазон\r\n    for (let i = start; i <= end; i++) {\r\n        pages.push(i);\r\n    }\r\n    return pages;\r\n});\r\n\r\n// конец пагинации\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, ни категории, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\nconst sortedProducts = computed(() => {\r\n    return [...filteredProducts.value].sort((a, b) => {\r\n        let comparison = 0;\r\n\r\n        // Сортируем по рейтингу\r\n        if (sortOption.value === 'rating') {\r\n            comparison = a.rating - b.rating;\r\n        }\r\n        // Сортируем по цене\r\n        else if (sortOption.value === 'price') {\r\n            comparison = a.price - b.price;\r\n        }\r\n        // Сортируем по дате поставки\r\n        else if (sortOption.value === 'deliveryDate') {\r\n            comparison = new Date(a.deliveryDate) - new Date(b.deliveryDate);\r\n        }\r\n\r\n        // Если порядок сортировки 'desc', меняем знак\r\n        return sortOrder.value === 'asc' ? comparison : -comparison;\r\n    });\r\n});\r\n\r\nconst paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return sortedProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n});\r\n\r\n\r\n\r\n// Методы для управления страницами\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\nconst changePage = (page) => {\r\n    // Устанавливаем текущую страницу\r\n    currentPage.value = page;\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\n\r\n\r\n\r\nconst handleCategorysChange = (category) => {\r\n\r\n    if (!Array.isArray(selectedCategorys.value[category])) {\r\n        selectedCategorys.value[category] = true;\r\n    }\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n\r\n    else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedCategorys.value);\r\n};\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.category) {\r\n            allCategorys.add(category.category);\r\n        }\r\n    });\r\n\r\n    categorys.value = Array.from(allCategorys);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCategorys(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\n\r\n\r\n\r\n\r\n// пагинация \r\n\r\n</script>\r\n\r\n<style scoped>\r\n.sorted{\r\n    display: flex;\r\n    align-items: center;\r\n    h3{\r\n    font-family: ABeeZee;\r\nfont-size: 16px;\r\nfont-style: italic;\r\nfont-weight: 400;\r\nline-height: 16px;\r\nletter-spacing: 0.03em;\r\ntext-align: left;\r\ncolor: #6C6C6C;\r\n span {\r\n    font-family: ABeeZee;\r\n    font-size: 20px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: 16px;\r\n    letter-spacing: 0.03em;\r\n    text-align: center;\r\n    color: #000000;\r\n    \r\n\r\n}\r\n}\r\n\r\n}\r\n\r\n.pagination button {\r\n    padding: 5px 10px;\r\n    margin: 0 5px;\r\n    border: 1px solid #ccc;\r\n    background: #F6F6F6;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    font-family: ABeeZee;\r\n    font-size: 16px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    letter-spacing: 0.03em;\r\n    text-align: center;\r\n\r\n}\r\n\r\n.pagination button.active {\r\n    background: #000000;\r\n    color: #fff;\r\n\r\n}\r\n\r\n.pagination button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: #f0f0f0;\r\n    border-color: #ddd;\r\n}\r\n\r\n.pagination span {\r\n    margin: 0 5px;\r\n}\r\n\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n    /* Добавляем перенос */\r\n}\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n\r\n\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  border-left: 5px solid transparent;\r\n  border-right: 5px solid transparent;\r\n  border-top: 5px solid #000; /* Черная стрелка, направленная вниз */\r\n  transition: transform 0.3s ease-in-out; /* Плавное изменение направления */\r\n}\r\n\r\n/* Когда фильтр открыт, стрелка разворачивается вверх */\r\n.arrow.open {\r\n  transform: rotate(180deg); /* Поворот стрелки на 180 градусов */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}