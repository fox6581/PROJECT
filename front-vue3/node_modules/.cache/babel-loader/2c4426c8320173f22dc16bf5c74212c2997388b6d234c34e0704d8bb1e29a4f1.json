{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pagination\"\n};\nconst _hoisted_2 = [\"disabled\"];\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 2\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = {\n  key: 0,\n  class: \"category-checkbox\"\n};\nconst _hoisted_8 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_9 = [\"for\"];\nconst _hoisted_10 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_11 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_12 = [\"for\"];\nconst _hoisted_13 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_14 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_15 = [\"for\"];\nexport function render(_ctx, _cache) {\n  const _component_ProductCart = _resolveComponent(\"ProductCart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h3\", null, \"Количество товаров: \" + _toDisplayString(_ctx.totalProducts), 1 /* TEXT */), _createVNode(_component_ProductCart, {\n    products: _ctx.paginatedProducts,\n    apiUrl: _ctx.apiUrl\n  }, null, 8 /* PROPS */, [\"products\", \"apiUrl\"]), _createCommentVNode(\" Пагинация \"), _createCommentVNode(\" <div class=\\\"pagination\\\">\\r\\n            <button @click=\\\"prevPage\\\" :disabled=\\\"currentPage === 1\\\">Назад</button>\\r\\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\\r\\n            <button @click=\\\"nextPage\\\" :disabled=\\\"currentPage === totalPages\\\">Вперед</button>\\r\\n        </div> \"), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Кнопка назад \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.prevPage && _ctx.prevPage(...args)),\n    disabled: _ctx.currentPage === 1\n  }, \"Назад\", 8 /* PROPS */, _hoisted_2), _createCommentVNode(\" Первая страница \"), _ctx.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.changePage(1))\n  }, \"1\")) : _createCommentVNode(\"v-if\", true), _ctx.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Страницы около текущей \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.pagesToShow, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      class: _normalizeClass({\n        active: _ctx.currentPage === page\n      }),\n      onClick: $event => _ctx.changePage(page)\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Троеточие, если необходимо \"), _ctx.currentPage < _ctx.totalPages - 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Последняя страница \"), _ctx.currentPage < _ctx.totalPages - 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.changePage(_ctx.totalPages))\n  }, _toDisplayString(_ctx.totalPages), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Текущая страница \"), _createElementVNode(\"span\", null, \"Страница \" + _toDisplayString(_ctx.currentPage) + \" из \" + _toDisplayString(_ctx.totalPages), 1 /* TEXT */), _createCommentVNode(\" Кнопка вперед \"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.nextPage && _ctx.nextPage(...args)),\n    disabled: _ctx.currentPage === _ctx.totalPages\n  }, \"Вперед\", 8 /* PROPS */, _hoisted_6)]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"h2\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.toggleCategoryFilter && _ctx.toggleCategoryFilter(...args))\n  }, [_cache[7] || (_cache[7] = _createTextVNode(\" Категории \")), _createElementVNode(\"span\", {\n    class: _normalizeClass([{\n      'open': _ctx.isCategoryFilterOpen\n    }, \"arrow\"])\n  }, null, 2 /* CLASS */)]), _ctx.isCategoryFilterOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.categorys, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: category,\n      value: category,\n      \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.selectedCategorys = $event),\n      onChange: $event => _ctx.handleCategorysChange(category)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_8), [[_vModelCheckbox, _ctx.selectedCategorys]]), _createElementVNode(\"label\", {\n      for: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_9)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Раскрывающееся меню для характеристик \"), _createElementVNode(\"div\", _hoisted_10, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"details\", null, [_createElementVNode(\"summary\", null, _toDisplayString(characteristic), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => _ctx.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => _ctx.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), [[_vModelCheckbox, _ctx.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_12)]);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_13, [_cache[9] || (_cache[9] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.selectedBrands = $event),\n      onChange: $event => _ctx.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_14), [[_vModelCheckbox, _ctx.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_15)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","totalProducts","_createVNode","_component_ProductCart","products","paginatedProducts","apiUrl","_createCommentVNode","_hoisted_1","onClick","_cache","args","prevPage","disabled","currentPage","_hoisted_2","$event","changePage","_hoisted_3","_Fragment","_renderList","pagesToShow","page","_normalizeClass","active","_hoisted_4","totalPages","_hoisted_5","nextPage","_hoisted_6","toggleCategoryFilter","_createTextVNode","isCategoryFilterOpen","_hoisted_7","categorys","category","type","id","value","selectedCategorys","onChange","handleCategorysChange","_hoisted_8","for","_hoisted_9","_hoisted_10","characteristics","values","characteristic","selectedCharacteristics","handleCharacteristicChange","_hoisted_11","_hoisted_12","_hoisted_13","brands","brand","selectedBrands","handleBrandChange","_hoisted_14","_hoisted_15"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n\r\n        <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n\r\n        <!-- Пагинация -->\r\n        <!-- <div class=\"pagination\">\r\n            <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Назад</button>\r\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n            <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Вперед</button>\r\n        </div> -->\r\n\r\n     \r\n        <div class=\"pagination\">\r\n  <!-- Кнопка назад -->\r\n  <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Назад</button>\r\n\r\n  <!-- Первая страница -->\r\n  <button v-if=\"currentPage >= 3\" @click=\"changePage(1) \">1</button>\r\n  <span v-if=\"currentPage >= 3\">...</span>\r\n\r\n  <!-- Страницы около текущей -->\r\n  <button\r\n    v-for=\"page in pagesToShow\"\r\n    :key=\"page\"\r\n    :class=\"{ active: currentPage === page }\"\r\n    @click=\"changePage(page)\"\r\n  >\r\n    {{ page }}\r\n  </button>\r\n\r\n  <!-- Троеточие, если необходимо -->\r\n  <span v-if=\"currentPage < totalPages - 3\">...</span>\r\n\r\n  <!-- Последняя страница -->\r\n  <button v-if=\"currentPage < totalPages - 3\" @click=\"changePage(totalPages)\">\r\n    {{ totalPages }}\r\n  </button>\r\n\r\n  <!-- Текущая страница -->\r\n  <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n\r\n  <!-- Кнопка вперед -->\r\n  <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Вперед</button>\r\n</div>\r\n\r\n\r\n\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <h2 @click=\"toggleCategoryFilter\">\r\n            Категории\r\n            <span :class=\"{ 'open': isCategoryFilterOpen }\" class=\"arrow\"></span>\r\n        </h2>\r\n        <div v-if=\"isCategoryFilterOpen\" class=\"category-checkbox\">\r\n            <div v-for=\"category in categorys\" :key=\"category\">\r\n                <input type=\"checkbox\" :id=\"category\" :value=\"category\" v-model=\"selectedCategorys\"\r\n                    @change=\"handleCategorysChange(category)\" />\r\n                <label :for=\"category\">{{ category }}</label>\r\n            </div>\r\n        </div>\r\n        <!-- Раскрывающееся меню для характеристик -->\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <details>\r\n                    <summary>{{ characteristic }}</summary>\r\n                    <div v-for=\"value in values\" :key=\"value\">\r\n                        <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                            v-model=\"selectedCharacteristics[characteristic]\"\r\n                            @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                        <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                    </div>\r\n                </details>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\n\r\n// Состояние для управления видимостью фильтра\r\nconst isCategoryFilterOpen = ref(false);\r\nconst toggleCategoryFilter = () => {\r\n    isCategoryFilterOpen.value = !isCategoryFilterOpen.value;\r\n};\r\n\r\nimport { API_BASE_URL } from '@/config';\r\n\r\n// Храним товары и базовый URL для API\r\n\r\nconst apiUrl = API_BASE_URL;\r\n\r\n// Переменные для управления пагинацией\r\n// Пагинация\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 12; // Количество товаров на странице\r\n\r\nconst totalPages = computed(() => {\r\n    return Math.ceil(filteredProducts.value.length / productsPerPage);\r\n});\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\n\r\nconst pagesToShow = computed(() => {\r\n  const pages = [];\r\n  const range = 1; // Показать 3 страницы вокруг текущей\r\n  const start = Math.max( 1currentPage.value - range);\r\n  const end = Math.min( currentPage.value + range);\r\n\r\n  // Добавляем страницы в диапазон\r\n  for (let i = start; i <= end; i++) {\r\n    pages.push(i);\r\n  }\r\n  return pages;\r\n});\r\n\r\n// конец пагинации\r\n\r\nconst paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return filteredProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n});\r\n\r\n\r\n\r\n// Методы для управления страницами\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\nconst changePage = (page) => {\r\n  // Устанавливаем текущую страницу\r\n  currentPage.value = page;\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\n\r\n\r\n\r\nconst handleCategorysChange = (category) => {\r\n\r\n    if (!Array.isArray(selectedCategorys.value[category])) {\r\n        selectedCategorys.value[category] = true;\r\n    }\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n\r\n    else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedCategorys.value);\r\n};\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.category) {\r\n            allCategorys.add(category.category);\r\n        }\r\n    });\r\n\r\n    categorys.value = Array.from(allCategorys);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCategorys(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n// пагинация \r\n\r\n</script>\r\n\r\n<style scoped>\r\n.pagination button {\r\n  padding: 5px 10px;\r\n  margin: 0 5px;\r\n  border: 1px solid #ccc;\r\n  background-color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.pagination button.active {\r\n  background-color: lightblue; /* Измените цвет, если нужно */\r\n  border-color: #007bff; /* Поменяйте цвет границы для активной кнопки */\r\n  font-weight: bold;\r\n}\r\n\r\n.pagination button:disabled {\r\n  cursor: not-allowed;\r\n  background-color: #f0f0f0;\r\n  border-color: #ddd;\r\n}\r\n\r\n.pagination span {\r\n  margin: 0 5px;\r\n}\r\n\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n    /* Добавляем перенос */\r\n}\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}