{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const totalProducts = computed(() => {\n      return filteredProducts.value.length;\n    });\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n    const characteristics = ref({}); // Уникальные характеристики\n\n    const selectedBrands = ref([]);\n    const handleBrandChange = brand => {\n      // Если бренд не был добавлен в selectedBrands, добавляем его\n      if (!selectedBrands.value[brand]) {\n        selectedBrands.value[brand] = true;\n      } else {\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\n      }\n\n      // Логируем обновленные данные для отладки\n      console.log('selectedBrands.value', selectedBrands.value);\n    };\n    const handleCharacteristicChange = (characteristic, value) => {\n      // Если характеристика еще не существует в selectedCharacteristics, создаем массив\n      if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\n        selectedCharacteristics.value[characteristic] = [value];\n      }\n\n      // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\n      selectedCharacteristics.value = {\n        ...selectedCharacteristics.value\n      };\n\n      // Выводим обновленные данные для отладки\n      console.log('selectedCharacteristics.value', selectedCharacteristics.value);\n    };\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n\n    // Функция для загрузки категорий\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n\n    // Функция для загрузки товаров\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Извлекаем бренды из категорий\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(category => {\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n\n    // Извлекаем уникальные характеристики\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n\n    // Фильтрация товаров по выбранным брендам и характеристикам\n    const filteredProducts = computed(() => {\n      console.log('начало работы фильтрации');\n\n      // Если не выбраны ни бренды, ни характеристики, возвращаем все товары\n      if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0) {\n        return products.value;\n      }\n      return products.value.filter(product => {\n        // Фильтрация по брендам\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\n\n        // Фильтрация по характеристикам\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\n          // Если характеристика не выбрана, она считается совпавшей\n          if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\n            return true;\n          }\n\n          // Преобразуем значение в массив, если это не массив\n          const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic]) ? selectedCharacteristics.value[characteristic] : [selectedCharacteristics.value[characteristic]];\n\n          // Получаем значения характеристики для товара\n          const productValues = product.characteristics ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value) : [];\n\n          // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\n          return selectedValues.some(value => productValues.includes(value));\n        });\n        return matchesBrand && matchesCharacteristics;\n      });\n    });\n\n    // Функция для выбора категории\n    // const selectCategory = (category) => {\n    //     console.log('Выбрана категория:', category);\n    // };\n\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      totalProducts,\n      selectedCharacteristics,\n      characteristics,\n      selectedBrands,\n      handleBrandChange,\n      handleCharacteristicChange,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","totalProducts","filteredProducts","value","length","selectedCharacteristics","characteristics","selectedBrands","handleBrandChange","brand","console","log","handleCharacteristicChange","characteristic","Array","isArray","loadCategories","loadProducts","response","fetch","ok","Error","data","json","extractBrands","extractCharacteristics","error","categoriesData","allBrands","Set","forEach","category","add","from","characteristicsData","item","charName","charValue","Object","keys","filter","product","matchesBrand","includes","matchesCharacteristics","every","selectedValues","productValues","map","some"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n        <ul>\r\n            <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                {{ product.name }} - {{ product.brand }} -{{ product.category }}\r\n            </li>\r\n        </ul>\r\n\r\n        \r\n\r\n\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <h3>{{ characteristic }}</h3>\r\n                <div v-for=\"value in values\" :key=\"value\">\r\n                    <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                        v-model=\"selectedCharacteristics[characteristic]\"\r\n                        @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                    <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n       \r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n\r\n       \r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\n\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// Функция для выбора категории\r\n// const selectCategory = (category) => {\r\n//     console.log('Выбрана категория:', category);\r\n// };\r\n</script>\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}