{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]); // Список категорий\n    const products = ref([]); // Список товаров\n    const brands = ref([]); // Список брендов\n    const selectedCategories = ref([]); // Массив выбранных категорий\n    const selectedBrands = ref([]); // Массив выбранных брендов\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n    const characteristics = ref({}); // Уникальные характеристики\n\n    const totalProducts = computed(() => {\n      return filteredProducts.value.length;\n    });\n\n    // Загружаем данные категорий, товаров, брендов и характеристик\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n\n    // Функция для загрузки категорий\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n\n    // Функция для загрузки товаров\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Извлекаем бренды из товаров\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(item => {\n        if (item.brand) {\n          allBrands.add(item.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n\n    // Извлекаем уникальные характеристики\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n\n    // Функция для фильтрации товаров\n    const filteredProducts = computed(() => {\n      return products.value.filter(product => {\n        // Фильтрация по брендам\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\n\n        // Фильтрация по категориям\n        const matchesCategory = selectedCategories.value.length === 0 || selectedCategories.value.includes(product.category);\n\n        // Фильтрация по характеристикам\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\n          if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\n            return true;\n          }\n          const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic]) ? selectedCharacteristics.value[characteristic] : [selectedCharacteristics.value[characteristic]];\n          const productValues = product.characteristics ? product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value) : [];\n          return selectedValues.some(value => productValues.includes(value));\n        });\n        return matchesBrand && matchesCategory && matchesCharacteristics;\n      });\n    });\n\n    // Обработчик выбора категории\n    const selectCategory = category => {\n      console.log('Выбрана категория:', category);\n      const index = selectedCategories.value.indexOf(category.category);\n      if (index === -1) {\n        selectedCategories.value.push(category.category);\n      } else {\n        selectedCategories.value.splice(index, 1);\n      }\n    };\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      selectedCategories,\n      selectedBrands,\n      selectedCharacteristics,\n      characteristics,\n      totalProducts,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      selectCategory,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","selectedCategories","selectedBrands","selectedCharacteristics","characteristics","totalProducts","filteredProducts","value","length","loadCategories","loadProducts","response","fetch","ok","Error","data","json","extractBrands","extractCharacteristics","error","console","categoriesData","allBrands","Set","forEach","item","brand","add","Array","from","characteristicsData","isArray","characteristic","charName","charValue","filter","product","matchesBrand","includes","matchesCategory","category","matchesCharacteristics","Object","keys","every","selectedValues","productValues","map","some","selectCategory","log","index","indexOf","push","splice"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n        <ul>\r\n            <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                {{ product.name }} - {{ product.brand }} - {{ product.category }}\r\n            </li>\r\n        </ul>\r\n\r\n        <!-- Меню категорий -->\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    <input type=\"checkbox\" :value=\"category.category\" v-model=\"selectedCategories\" />\r\n                    {{ category.category }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <h3>{{ characteristic }}</h3>\r\n                <div v-for=\"value in values\" :key=\"value\">\r\n                    <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                        v-model=\"selectedCharacteristics[characteristic]\"\r\n                        @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                    <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);  // Список категорий\r\nconst products = ref([]);  // Список товаров\r\nconst brands = ref([]);  // Список брендов\r\nconst selectedCategories = ref([]);  // Массив выбранных категорий\r\nconst selectedBrands = ref([]);  // Массив выбранных брендов\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n// Загружаем данные категорий, товаров, брендов и характеристик\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n        extractBrands(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из товаров\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    categoriesData.forEach(item => {\r\n        if (item.brand) {\r\n            allBrands.add(item.brand);\r\n        }\r\n    });\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Функция для фильтрации товаров\r\nconst filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n\r\n        // Фильтрация по категориям\r\n        const matchesCategory = selectedCategories.value.length === 0 || selectedCategories.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\n// Обработчик выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n    const index = selectedCategories.value.indexOf(category.category);\r\n    if (index === -1) {\r\n        selectedCategories.value.push(category.category);\r\n    } else {\r\n        selectedCategories.value.splice(index, 1);\r\n    }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}