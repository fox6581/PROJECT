{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"filter\"\n};\nconst _hoisted_2 = {\n  class: \"price-inputs\"\n};\nconst _hoisted_3 = {\n  id: \"rating\",\n  class: \"slider\",\n  ref: \"sliderContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", null, \" From: \", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.minValue = $event),\n    onInput: _cache[1] || (_cache[1] = $event => $setup.onInputChange('min'))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.minValue]])]), _createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", null, \" To: \", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.maxValue = $event),\n    onInput: _cache[3] || (_cache[3] = $event => $setup.onInputChange('max'))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.maxValue]])])]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", {\n    class: \"block-min\",\n    ref: \"minBlock\",\n    onMousedown: _cache[4] || (_cache[4] = $event => $setup.startMoveRange('min')),\n    onTouchstart: _cache[5] || (_cache[5] = $event => $setup.startMoveRange('min'))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _createElementVNode(\"div\", {\n    class: \"color-range\",\n    style: _normalizeStyle($setup.colorRangeStyle)\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"block-max\",\n    ref: \"maxBlock\",\n    onMousedown: _cache[6] || (_cache[6] = $event => $setup.startMoveRange('max')),\n    onTouchstart: _cache[7] || (_cache[7] = $event => $setup.startMoveRange('max'))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */)], 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","id","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","type","_cache","$event","$setup","minValue","onInput","onInputChange","maxValue","_hoisted_3","onMousedown","startMoveRange","onTouchstart","style","_normalizeStyle","colorRangeStyle"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\MenuPrice.vue"],"sourcesContent":["<template>\r\n  <div class=\"filter\">\r\n    <div>\r\n\r\n      <div class=\"price-inputs\">\r\n        <div>\r\n          <label>\r\n            From:\r\n          </label>\r\n          <input type=\"number\" v-model=\"minValue\" @input=\"onInputChange('min')\" />\r\n        </div>\r\n\r\n        <div>\r\n          <label>\r\n            To:\r\n          </label>\r\n          <input type=\"number\" v-model=\"maxValue\" @input=\"onInputChange('max')\" />\r\n        </div>\r\n\r\n\r\n      </div>\r\n      <div id=\"rating\" class=\"slider\" ref=\"sliderContainer\">\r\n        <div class=\"block-min\" ref=\"minBlock\" @mousedown=\"startMoveRange('min')\" @touchstart=\"startMoveRange('min')\">\r\n        </div>\r\n        <div class=\"color-range\" :style=\"colorRangeStyle\"></div>\r\n        <div class=\"block-max\" ref=\"maxBlock\" @mousedown=\"startMoveRange('max')\" @touchstart=\"startMoveRange('max')\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, watch, onMounted, defineProps, defineEmits } from 'vue';\r\n\r\nconst props = defineProps({\r\n  initialMinValue: {\r\n    type: Number,\r\n    default: 1000\r\n  },\r\n  initialMaxValue: {\r\n    type: Number,\r\n    default: 100000\r\n  },\r\n  rangeMin: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  rangeMax: {\r\n    type: Number,\r\n    default: 100000\r\n  }\r\n});\r\n\r\n\r\nconst sliderContainer = ref(null);\r\nconst minBlock = ref(null);\r\nconst maxBlock = ref(null);\r\nconst colorRangeStyle = reactive({ left: '0px', width: '100px' });\r\n\r\nconst minValue = ref(props.initialMinValue);\r\nconst maxValue = ref(props.initialMaxValue);\r\n\r\nlet activeElement = null;\r\n\r\nfunction startMoveRange(type) {\r\n  console.log(`Starting to move: ${type}`);\r\n  activeElement = type;\r\n  document.addEventListener('mousemove', onMouseMove);\r\n  document.addEventListener('mouseup', onMouseUp);\r\n  document.addEventListener('touchmove', onMouseMove);\r\n  document.addEventListener('touchend', onMouseUp);\r\n}\r\n\r\nfunction getCoords(elem) {\r\n  const coords = elem.getBoundingClientRect();\r\n  return {\r\n    left: coords.left + window.pageXOffset,\r\n    width: coords.width\r\n  };\r\n}\r\n\r\nfunction onMouseMove(e) {\r\n  const sliderCoords = getCoords(sliderContainer.value);\r\n  let posX = e.touches ? e.touches[0].clientX : e.clientX;\r\n  let newLeft = posX - sliderCoords.left;\r\n\r\n  if (activeElement === 'min') {\r\n    const maxLeft = getCoords(maxBlock.value).left - sliderCoords.left - minBlock.value.offsetWidth;\r\n    newLeft = Math.max(0, Math.min(newLeft, maxLeft));\r\n    minBlock.value.style.left = `${newLeft}px`;\r\n    minValue.value = ((newLeft / sliderCoords.width) * (props.rangeMax - props.rangeMin) + props.rangeMin).toFixed(1);\r\n  } else {\r\n    const minLeft = getCoords(minBlock.value).left - sliderCoords.left;\r\n    newLeft = Math.min(sliderCoords.width - maxBlock.value.offsetWidth, Math.max(newLeft, minLeft));\r\n    maxBlock.value.style.left = `${newLeft}px`;\r\n    maxValue.value = ((newLeft / sliderCoords.width) * (props.rangeMax - props.rangeMin) + props.rangeMin).toFixed(1);\r\n  }\r\n\r\n  updateColorRange();\r\n}\r\n\r\n\r\nfunction onMouseUp() {\r\n  document.removeEventListener('mousemove', onMouseMove);\r\n  document.removeEventListener('mouseup', onMouseUp);\r\n  document.removeEventListener('touchmove', onMouseMove);\r\n  document.removeEventListener('touchend', onMouseUp);\r\n}\r\n\r\nfunction updateColorRange() {\r\n  const minLeft = minBlock.value.offsetLeft;\r\n  const maxLeft = maxBlock.value.offsetLeft;\r\n  colorRangeStyle.left = `${minLeft}px`;\r\n  colorRangeStyle.width = `${maxLeft - minLeft}px`;\r\n}\r\n\r\nfunction onInputChange(type) {\r\n  const sliderWidth = getCoords(sliderContainer.value).width;\r\n  const blockWidth = minBlock.value.offsetWidth;\r\n\r\n  if (type === 'min') {\r\n    const newLeft = ((minValue.value - props.rangeMin) / (props.rangeMax - props.rangeMin)) * sliderWidth;\r\n    minBlock.value.style.left = `${Math.max(0, Math.min(newLeft, sliderWidth - blockWidth))}px`;\r\n  } else {\r\n    const newLeft = ((maxValue.value - props.rangeMin) / (props.rangeMax - props.rangeMin)) * sliderWidth;\r\n    maxBlock.value.style.left = `${Math.max(0, Math.min(newLeft, sliderWidth - blockWidth))}px`;\r\n  }\r\n  updateColorRange();\r\n}\r\n\r\n// Отправляем значения фильтра\r\nconst emit = defineEmits(['update:filter']);\r\nwatch([minValue, maxValue], ([newMin, newMax]) => {\r\n  emit('update:filter', { min: newMin, max: newMax });\r\n});\r\n\r\nonMounted(() => {\r\n  updateColorRange();\r\n});\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\ninput {\r\n  border: 0.5px solid #9F9F9F;\r\n  width: 104px;\r\n  height: 40px;\r\n  padding: 8px 64px 8px 8px;\r\n  gap: 8px;\r\n  border-radius: 3px;\r\n\r\n  opacity: 0px;\r\n\r\n}\r\n\r\n.filter {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.price-inputs {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.slider {\r\n  position: relative;\r\n  width: 300px;\r\n  height: 4px;\r\n  background: #CECECE;\r\n  ;\r\n  border-radius: 5px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.block-min,\r\n.block-max {\r\n  position: absolute;\r\n  top: -5px;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: #414141;\r\n  ;\r\n  ;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n}\r\n\r\n.color-range {\r\n  position: absolute;\r\n  top: 0;\r\n  height: 2px;\r\n  background: #414141;\r\n\r\n\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;EAGVA,KAAK,EAAC;AAAc;;EAiBpBC,EAAE,EAAC,QAAQ;EAACD,KAAK,EAAC,QAAQ;EAACE,GAAG,EAAC;;;uBApBxCC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJC,mBAAA,CA0BM,cAxBJA,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJD,mBAAA,CAKM,c,0BAJJA,mBAAA,CAEQ,eAFD,SAEP,sB,gBACAA,mBAAA,CAAwE;IAAjEE,IAAI,EAAC,QAAQ;IAT9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASwCC,MAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAG,aAAa;iEAA/BH,MAAA,CAAAC,QAAQ,E,KAGxCN,mBAAA,CAKM,c,0BAJJA,mBAAA,CAEQ,eAFD,OAEP,sB,gBACAA,mBAAA,CAAwE;IAAjEE,IAAI,EAAC,QAAQ;IAhB9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAgBwCC,MAAA,CAAAI,QAAQ,GAAAL,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAG,aAAa;iEAA/BH,MAAA,CAAAI,QAAQ,E,OAK1CT,mBAAA,CAMM,OANNU,UAMM,GALJV,mBAAA,CACM;IADDL,KAAK,EAAC,WAAW;IAACE,GAAG,EAAC,UAAU;IAAEc,WAAS,EAAAR,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAO,cAAc;IAAUC,YAAU,EAAAV,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAO,cAAc;kDAEpGZ,mBAAA,CAAwD;IAAnDL,KAAK,EAAC,aAAa;IAAEmB,KAAK,EAxBvCC,eAAA,CAwByCV,MAAA,CAAAW,eAAe;2BAChDhB,mBAAA,CACM;IADDL,KAAK,EAAC,WAAW;IAACE,GAAG,EAAC,UAAU;IAAEc,WAAS,EAAAR,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAO,cAAc;IAAUC,YAAU,EAAAV,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAO,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}