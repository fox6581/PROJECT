{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelSelect as _vModelSelect } from \"vue\";\nimport _imports_0 from '@/assets/Filters.png';\nconst _hoisted_1 = {\n  class: \"myall\"\n};\nconst _hoisted_2 = {\n  class: \"menu_left\"\n};\nconst _hoisted_3 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_4 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_5 = [\"for\"];\nconst _hoisted_6 = {\n  class: \"brands\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"category-checkbox\"\n};\nconst _hoisted_8 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_9 = [\"for\"];\nconst _hoisted_10 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_11 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_12 = [\"for\"];\nconst _hoisted_13 = {\n  value: \"sortedP\"\n};\nconst _hoisted_14 = {\n  class: \"sorted\"\n};\nconst _hoisted_15 = {\n  class: \"all_product\"\n};\nconst _hoisted_16 = {\n  class: \"pagination\"\n};\nconst _hoisted_17 = [\"disabled\"];\nconst _hoisted_18 = {\n  key: 1\n};\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  key: 2\n};\nconst _hoisted_21 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Brand\", -1 /* HOISTED */)), _cache[6] || (_cache[6] = _createElementVNode(\"hr\", null, null, -1 /* HOISTED */)), _createVNode($setup[\"HeaderSearch\"], {\n    placeholder: \"Search\",\n    icon: $setup.searchIcon,\n    onUpdateResults: _ctx.handleSearchResults\n  }, null, 8 /* PROPS */, [\"icon\", \"onUpdateResults\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedBrands = $event),\n      onChange: $event => $setup.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, [_createElementVNode(\"p\", _hoisted_6, [_createTextVNode(_toDisplayString(brand) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString($setup.totalProducts), 1 /* TEXT */)])], 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по категориям \"), _createElementVNode(\"h2\", {\n    onClick: $setup.toggleCategoryFilter\n  }, [_cache[7] || (_cache[7] = _createTextVNode(\" Категории \")), _createElementVNode(\"span\", {\n    class: _normalizeClass([{\n      'open': $setup.isCategoryFilterOpen\n    }, \"arrow\"])\n  }, null, 2 /* CLASS */)]), $setup.isCategoryFilterOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categorys, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: category,\n      value: category,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedCategorys = $event),\n      onChange: $event => $setup.handleCategorysChange(category)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_8), [[_vModelCheckbox, $setup.selectedCategorys]]), _createElementVNode(\"label\", {\n      for: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_9)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Раскрывающееся меню для характеристик \"), _createElementVNode(\"div\", _hoisted_10, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"details\", null, [_createElementVNode(\"summary\", null, _toDisplayString(characteristic), 1 /* TEXT */), _cache[8] || (_cache[8] = _createElementVNode(\"hr\", null, null, -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value,\n        class: \"brand-checkbox\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => $setup.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => $setup.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), [[_vModelCheckbox, $setup.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_12)]);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"data\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", null, [_createElementVNode(\"h3\", null, [_cache[10] || (_cache[10] = _createTextVNode(\"Selected Products: \")), _createElementVNode(\"span\", null, _toDisplayString($setup.totalProducts), 1 /* TEXT */)])]), _createElementVNode(\"div\", null, [_createCommentVNode(\" <label for=\\\"sortBy\\\">Сортировать по:</label> \"), _withDirectives(_createElementVNode(\"select\", {\n    id: \"sortBy\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.sortOption = $event)\n  }, _cache[11] || (_cache[11] = [_createElementVNode(\"option\", {\n    value: \"rating\"\n  }, \"By rating\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"price\"\n  }, \"price\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"deliveryDate\"\n  }, \"Дата поставки\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.sortOption]]), _createCommentVNode(\" <button @click=\\\"toggleSortOrder\\\">Сортировать по {{ sortOrder === 'asc' ? 'возрастанию' : 'убыванию'\\r\\n                        }}</button> \")]), _cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    class: \"mobile\"\n  }, [_createElementVNode(\"div\", {\n    class: \"filter-container\"\n  }, [_createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"Filter Icon\",\n    class: \"filter-icon\"\n  }), _createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Фильтр\"\n  })])], -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_15, [_createVNode($setup[\"ProductCart\"], {\n    products: $setup.paginatedProducts,\n    apiUrl: $setup.apiUrl\n  }, null, 8 /* PROPS */, [\"products\", \"apiUrl\"]), _createElementVNode(\"div\", _hoisted_16, [_createCommentVNode(\" Кнопка назад \"), _createElementVNode(\"button\", {\n    onClick: $setup.prevPage,\n    disabled: $setup.currentPage === 1\n  }, \"<\", 8 /* PROPS */, _hoisted_17), _createCommentVNode(\" Первая страница \"), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[3] || (_cache[3] = $event => $setup.changePage(1))\n  }, \"1\")) : _createCommentVNode(\"v-if\", true), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_18, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Страницы около текущей \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.pagesToShow, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      class: _normalizeClass({\n        active: $setup.currentPage === page\n      }),\n      onClick: $event => $setup.changePage(page)\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_19);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Троеточие, если необходимо \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_20, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Последняя страница \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[4] || (_cache[4] = $event => $setup.changePage($setup.totalPages))\n  }, _toDisplayString($setup.totalPages), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Текущая страница \"), _createCommentVNode(\" <span>Страница {{ currentPage }} из {{ totalPages }}</span> \"), _createCommentVNode(\" Кнопка вперед \"), _createElementVNode(\"button\", {\n    onClick: $setup.nextPage,\n    disabled: $setup.currentPage === $setup.totalPages\n  }, \">\", 8 /* PROPS */, _hoisted_21)])])])]);\n}","map":{"version":3,"names":["_imports_0","class","key","value","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_createVNode","$setup","placeholder","icon","searchIcon","onUpdateResults","_ctx","handleSearchResults","_Fragment","_renderList","brands","brand","type","id","_cache","$event","selectedBrands","onChange","handleBrandChange","_hoisted_4","for","_hoisted_6","_createTextVNode","_toDisplayString","totalProducts","_hoisted_5","onClick","toggleCategoryFilter","_normalizeClass","isCategoryFilterOpen","_hoisted_7","categorys","category","selectedCategorys","handleCategorysChange","_hoisted_8","_hoisted_9","_hoisted_10","characteristics","values","characteristic","selectedCharacteristics","handleCharacteristicChange","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","sortOption","src","alt","_hoisted_15","products","paginatedProducts","apiUrl","_hoisted_16","prevPage","disabled","currentPage","_hoisted_17","changePage","_hoisted_18","pagesToShow","page","active","_hoisted_19","totalPages","_hoisted_20","nextPage","_hoisted_21"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div class=\"myall\">\r\n\r\n        <div class=\"menu_left\">\r\n\r\n            <!-- Фильтр по брендам -->\r\n            <div class=\"brand-filter\">\r\n                <h3>Brand</h3>\r\n                <hr>\r\n                <HeaderSearch placeholder=\"Search\" :icon=\"searchIcon\" @updateResults=\"handleSearchResults\" />\r\n                <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                    <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                        @change=\"handleBrandChange(brand)\" />\r\n                    <label :for=\"brand\">\r\n                        <p class=\"brands\">{{ brand }} <span>{{ totalProducts }}</span></p>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Фильтр по категориям -->\r\n            <h2 @click=\"toggleCategoryFilter\">\r\n                Категории\r\n                <span :class=\"{ 'open': isCategoryFilterOpen }\" class=\"arrow\"></span>\r\n            </h2>\r\n            <div v-if=\"isCategoryFilterOpen\" class=\"category-checkbox\">\r\n                <div v-for=\"category in categorys\" :key=\"category\">\r\n                    <input type=\"checkbox\" :id=\"category\" :value=\"category\" v-model=\"selectedCategorys\"\r\n                        @change=\"handleCategorysChange(category)\" />\r\n                    <label :for=\"category\">{{ category }}</label>\r\n                </div>\r\n            </div>\r\n            <!-- Раскрывающееся меню для характеристик -->\r\n            <div class=\"characteristic-filter\">\r\n                <h2>Уникальные характеристики</h2>\r\n              \r\n                <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                    <details>\r\n                        <summary>{{ characteristic }}</summary>\r\n                        <hr>\r\n                        <div v-for=\"value in values\" :key=\"value\" class=\"brand-checkbox\">\r\n                            <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                                v-model=\"selectedCharacteristics[characteristic]\"\r\n                                @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                            <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                        </div>\r\n                    </details>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n        <data value=\"sortedP\" >\r\n            <div class=\"sorted\">\r\n                <div>\r\n                    <h3>Selected Products: <span>{{ totalProducts }}</span></h3>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <!-- <label for=\"sortBy\">Сортировать по:</label> -->\r\n                    <select id=\"sortBy\" v-model=\"sortOption\">\r\n                        <option value=\"rating\">By rating</option>\r\n                        <option value=\"price\">price</option>\r\n                        <option value=\"deliveryDate\">Дата поставки</option>\r\n                    </select>\r\n\r\n                \r\n                    <!-- <button @click=\"toggleSortOrder\">Сортировать по {{ sortOrder === 'asc' ? 'возрастанию' : 'убыванию'\r\n                        }}</button> -->\r\n                </div>\r\n\r\n                <div class=\"mobile\">\r\n\r\n                    <div class=\"filter-container\">\r\n    <img src=\"@/assets/Filters.png\" alt=\"Filter Icon\" class=\"filter-icon\" />\r\n    <input type=\"text\" placeholder=\"Фильтр\" />\r\n  </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"all_product\">\r\n                <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n                <div class=\"pagination\">\r\n                    <!-- Кнопка назад -->\r\n\r\n                    <button @click=\"prevPage\" :disabled=\"currentPage === 1\">&lt;</button>\r\n\r\n                    <!-- Первая страница -->\r\n                    <button v-if=\"currentPage >= 3\" @click=\"changePage(1)\">1</button>\r\n                    <span v-if=\"currentPage >= 3\">...</span>\r\n\r\n                    <!-- Страницы около текущей -->\r\n                    <button v-for=\"page in pagesToShow\" :key=\"page\" :class=\"{ active: currentPage === page }\"\r\n                        @click=\"changePage(page)\">\r\n                        {{ page }}\r\n                    </button>\r\n\r\n                    <!-- Троеточие, если необходимо -->\r\n                    <span v-if=\"currentPage < totalPages - 3\">...</span>\r\n\r\n                    <!-- Последняя страница -->\r\n                    <button v-if=\"currentPage < totalPages - 3\" @click=\"changePage(totalPages)\">\r\n                        {{ totalPages }}\r\n                    </button>\r\n\r\n                    <!-- Текущая страница -->\r\n                    <!-- <span>Страница {{ currentPage }} из {{ totalPages }}</span> -->\r\n\r\n                    <!-- Кнопка вперед -->\r\n                    <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">&gt;</button>\r\n                </div>\r\n            </div>\r\n        </data>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed, watch } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nimport HeaderSearch from '../Search/HeaderSearch.vue';\r\n\r\nconst searchIcon = require('@/assets/Search.png');\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\n\r\n// Состояние для управления видимостью фильтра\r\nconst isCategoryFilterOpen = ref(false);\r\nconst toggleCategoryFilter = () => {\r\n    isCategoryFilterOpen.value = !isCategoryFilterOpen.value;\r\n};\r\n\r\nimport { API_BASE_URL } from '@/config';\r\n\r\n\r\n\r\n// сортировка\r\n\r\n\r\nconst sortOption = ref('rating');  // По умолчанию сортируем по рейтингу\r\nconst sortOrder = ref('asc');  // По умолчанию сортировка по возрастанию\r\n\r\n// Данные товаров\r\n\r\n\r\n// Функция для изменения порядка сортировки\r\nwatch(sortOption, () => {\r\n    sortedProducts.value;  // Обновляется автоматически при изменении sortOption\r\n});\r\n\r\n\r\n\r\n// Функция для изменения порядка сортировки\r\n// const toggleSortOrder = () => {\r\n//     sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc';\r\n// };\r\n\r\n// Функция сортировки\r\n\r\n\r\n// Пагинированные и отсортированные продукты\r\n// const paginatedSortedProducts = computed(() => {\r\n//   const start = (currentPage.value - 1) * pageSize.value\r\n//   const end = currentPage.value * pageSize.value\r\n//   return sortedProducts.value.slice(start, end)\r\n// })\r\n\r\n//конец сортировки\r\n\r\n\r\n\r\n// Храним товары и базовый URL для API\r\n\r\nconst apiUrl = API_BASE_URL;\r\n\r\n// Переменные для управления пагинацией\r\n// Пагинация\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 12; // Количество товаров на странице\r\n\r\nconst totalPages = computed(() => {\r\n    return Math.ceil(filteredProducts.value.length / productsPerPage);\r\n});\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\n\r\nconst pagesToShow = computed(() => {\r\n    const pages = [];\r\n    const range = 1; // Показать 3 страницы вокруг текущей\r\n    const start = Math.max(1, currentPage.value - range);\r\n    const end = Math.min(totalPages.value, currentPage.value + range);\r\n\r\n    // Добавляем страницы в диапазон\r\n    for (let i = start; i <= end; i++) {\r\n        pages.push(i);\r\n    }\r\n    return pages;\r\n});\r\n\r\n// конец пагинации\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, ни категории, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\nconst sortedProducts = computed(() => {\r\n    return [...filteredProducts.value].sort((a, b) => {\r\n        let comparison = 0;\r\n\r\n        // Сортируем по рейтингу\r\n        if (sortOption.value === 'rating') {\r\n            comparison = a.rating - b.rating;\r\n        }\r\n        // Сортируем по цене\r\n        else if (sortOption.value === 'price') {\r\n            comparison = a.price - b.price;\r\n        }\r\n        // Сортируем по дате поставки\r\n        else if (sortOption.value === 'deliveryDate') {\r\n            comparison = new Date(a.deliveryDate) - new Date(b.deliveryDate);\r\n        }\r\n\r\n        // Если порядок сортировки 'desc', меняем знак\r\n        return sortOrder.value === 'asc' ? comparison : -comparison;\r\n    });\r\n});\r\n\r\nconst paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return sortedProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n});\r\n\r\n\r\n\r\n// Методы для управления страницами\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\nconst changePage = (page) => {\r\n    // Устанавливаем текущую страницу\r\n    currentPage.value = page;\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\n\r\n\r\n\r\nconst handleCategorysChange = (category) => {\r\n\r\n    if (!Array.isArray(selectedCategorys.value[category])) {\r\n        selectedCategorys.value[category] = true;\r\n    }\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n\r\n    else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedCategorys.value);\r\n};\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.category) {\r\n            allCategorys.add(category.category);\r\n        }\r\n    });\r\n\r\n    categorys.value = Array.from(allCategorys);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCategorys(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\n\r\n\r\n\r\n\r\n// пагинация \r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.filter-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n}\r\n\r\n.filter-icon {\r\n  position: absolute;\r\n  right: 8px; /* Иконка будет справа */\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n\r\n.filter-container input {\r\n  padding-right: 30px; /* Отступ справа, чтобы не перекрывать текстом иконку */\r\n  width: 164px;\r\n  font-family: Abel;\r\nfont-size: 15px;\r\nfont-weight: 400;\r\nline-height: 16px;\r\nletter-spacing: -0.005em;\r\ntext-align: left;\r\ntext-underline-position: from-font;\r\ntext-decoration-skip-ink: none;\r\nborder: 0.5px solid #D4D4D4;\r\n\r\nheight:56px;\r\n\r\npadding: 16px;\r\ngap: 0px;\r\nborder-radius: 8px;\r\n\r\njustify: space-between;\r\nopacity: 0px;\r\n\r\n}\r\n.myall {\r\n    display: flex;\r\n    column-gap: 20px;\r\n    margin: 0 auto;\r\n\r\n}\r\n.sorted {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    h3 {\r\n        font-family: ABeeZee;\r\n        font-size: 16px;\r\n        font-style: italic;\r\n        font-weight: 400;\r\n        line-height: 16px;\r\n        letter-spacing: 0.03em;\r\n        text-align: left;\r\n        color: #6C6C6C;\r\n\r\n        span {\r\n            font-family: ABeeZee;\r\n            font-size: 20px;\r\n            font-style: normal;\r\n            font-weight: 400;\r\n            line-height: 16px;\r\n            letter-spacing: 0.03em;\r\n            text-align: center;\r\n            color: #000000;\r\n\r\n\r\n        }\r\n    }\r\n\r\n}\r\nh2{\r\n    font-family: ABeeZee;\r\nfont-size: 18px;\r\nfont-style: italic;\r\nfont-weight: 400;\r\nline-height: 24px;\r\nletter-spacing: 0.03em;\r\ntext-align: left;\r\ncolor: #000;\r\n\r\n}\r\n.brand-checkbox{\r\ndisplay: flex;\r\n \r\n}\r\n\r\n.brands, .category-checkbox {\r\n    font-family: ABeeZee;\r\n    font-size: 15px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    text-align: left;\r\n    color: #000;\r\n\r\n    span {\r\n        font-family: Abel;\r\n        font-size: 12px;\r\n        font-weight: 400;\r\n        line-height: 24px;\r\n        text-align: left;\r\n        color: #929292;\r\n    }\r\n\r\n\r\n}   \r\nselect {\r\n    width: 256px;\r\n\r\n    padding: 8px 16px 8px 16px;\r\n    gap: 0px;\r\n    border-radius: 8px;\r\n    font-family: Abel;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n    line-height: 16px;\r\n    letter-spacing: -0.005em;\r\n    text-align: left;\r\n    color: #000;\r\n\r\n    option {\r\n        font-family: Abel;\r\n        font-size: 15px;\r\n        font-weight: 400;\r\n        line-height: 16px;\r\n        letter-spacing: -0.005em;\r\n        text-align: left;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n.pagination button {\r\n    padding: 5px 10px;\r\n    margin: 0 5px;\r\n    border: 1px solid #ccc;\r\n    background: #F6F6F6;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    font-family: ABeeZee;\r\n    font-size: 16px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    letter-spacing: 0.03em;\r\n    text-align: center;\r\n\r\n}\r\n\r\n.pagination button.active {\r\n    background: #000000;\r\n    color: #fff;\r\n\r\n}\r\n\r\n.pagination button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: #f0f0f0;\r\n    border-color: #ddd;\r\n}\r\n\r\n.pagination span {\r\n    margin: 0 5px;\r\n}\r\n\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n  width: auto;\r\n    /* Добавляем перенос */\r\n    \r\n    .container{\r\n    width: 236px!important;\r\n}\r\n}\r\n\r\n\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-family: ABeeZee;\r\n    font-size: 18px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    letter-spacing: 0.03em;\r\n    text-align: left;\r\n    color: #000;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n\r\n\r\n.arrow {\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    border-top: 5px solid #000;\r\n    /* Черная стрелка, направленная вниз */\r\n    transition: transform 0.3s ease-in-out;\r\n    /* Плавное изменение направления */\r\n}\r\n\r\n/* Когда фильтр открыт, стрелка разворачивается вверх */\r\n.arrow.open {\r\n    transform: rotate(180deg);\r\n    /* Поворот стрелки на 180 градусов */\r\n}\r\n\r\n@media(width<780px){\r\n    .menu_left{\r\n        display: none;\r\n    }\r\n    #sortBy{\r\n        width: 164px;\r\n    font-family: Abel;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n    line-height: 16px;\r\n    letter-spacing: -0.005em;\r\n    text-align: left;\r\n    text-underline-position: from-font;\r\n    -webkit-text-decoration-skip-ink: none;\r\n    text-decoration-skip-ink: none;\r\n    border: 0.5px solid #D4D4D4;\r\n    height: 56px;\r\n    padding: 16px;\r\n\r\n    }\r\n    h3{\r\n        display: ;\r\n    }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}