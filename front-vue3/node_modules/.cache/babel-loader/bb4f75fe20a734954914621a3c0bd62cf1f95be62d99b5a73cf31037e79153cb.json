{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, onMounted, computed } from 'vue';\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const selectedBrands = ref([]); // Для фильтрации по брендам\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n    const characteristics = ref({}); // Уникальные характеристики\n\n    // Загрузка данных\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n\n    // Функция для загрузки категорий\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке категорий');\n        }\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n\n    // Функция для загрузки товаров\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        if (!response.ok) {\n          throw new Error('Ошибка при загрузке товаров');\n        }\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Извлекаем бренды из категорий\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(category => {\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n\n    // Извлекаем уникальные характеристики\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n\n    // Фильтрация товаров\n    const filteredProducts = computed(() => {\n      return products.value.filter(product => {\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\n          const selectedValues = selectedCharacteristics.value[characteristic];\n          // Проверяем, что selectedValues - это массив, прежде чем использовать .some()\n          if (Array.isArray(selectedValues)) {\n            return selectedValues.some(value => product.characteristics.includes(value));\n          }\n          return false;\n        });\n        return matchesCharacteristics;\n      });\n    });\n\n    // Функция для выбора категории\n    const selectCategory = category => {\n      console.log('Выбрана категория:', category);\n    };\n\n    // Обработка изменения в фильтре по характеристикам\n    const handleCharacteristicChange = (characteristic, value) => {\n      if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\n        selectedCharacteristics.value[characteristic] = [];\n      }\n      const index = selectedCharacteristics.value[characteristic].indexOf(value);\n      if (index === -1) {\n        selectedCharacteristics.value[characteristic].push(value);\n      } else {\n        selectedCharacteristics.value[characteristic].splice(index, 1);\n      }\n      console.log('selectedCharacteristics.value', selectedCharacteristics.value);\n    };\n\n    // Обработка изменения в фильтре по брендам\n    const handleBrandChange = brand => {\n      if (!selectedBrands.value.includes(brand)) {\n        selectedBrands.value.push(brand);\n      } else {\n        const index = selectedBrands.value.indexOf(brand);\n        if (index !== -1) {\n          selectedBrands.value.splice(index, 1);\n        }\n      }\n      console.log('selectedBrands.value', selectedBrands.value);\n    };\n    const __returned__ = {\n      categories,\n      products,\n      brands,\n      selectedBrands,\n      selectedCharacteristics,\n      characteristics,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCharacteristics,\n      filteredProducts,\n      selectCategory,\n      handleCharacteristicChange,\n      handleBrandChange,\n      ref,\n      onMounted,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","categories","products","brands","selectedBrands","selectedCharacteristics","characteristics","loadCategories","loadProducts","response","fetch","ok","Error","data","json","value","extractBrands","extractCharacteristics","error","console","categoriesData","allBrands","Set","forEach","category","brand","add","Array","from","characteristicsData","item","isArray","characteristic","charName","charValue","filteredProducts","filter","product","matchesCharacteristics","Object","keys","every","selectedValues","some","includes","selectCategory","log","handleCharacteristicChange","index","indexOf","push","splice","handleBrandChange"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Фильтрация характеристик -->\r\n      <div class=\"characteristic-filter\">\r\n        <h2>Уникальные характеристики</h2>\r\n        <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n          <h3>{{ characteristic }}</h3>\r\n          <div v-for=\"value in values\" :key=\"value\">\r\n            <input\r\n              type=\"checkbox\"\r\n              :id=\"`${characteristic}-${value}`\"\r\n              :value=\"value\"\r\n              v-model=\"selectedCharacteristics[characteristic]\"\r\n              @change=\"handleCharacteristicChange(characteristic, value)\"\r\n            />\r\n            <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Меню категорий -->\r\n      <div class=\"category-menu\">\r\n        <h3>Категории</h3>\r\n        <ul>\r\n          <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n            {{ category.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  \r\n      <!-- Фильтр по брендам -->\r\n      <div class=\"brand-filter\">\r\n        <h3>Фильтр по брендам</h3>\r\n        <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            :id=\"brand\"\r\n            :value=\"brand\"\r\n            v-model=\"selectedBrands\"\r\n            @change=\"handleBrandChange(brand)\"\r\n          />\r\n          <label :for=\"brand\">{{ brand }}</label>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Список товаров с фильтрацией -->\r\n      <div class=\"product-list\">\r\n        <h3>Товары</h3>\r\n        <ul>\r\n          <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n            {{ product.name }} - {{ product.brand }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  \r\n  const categories = ref([]);\r\n  const products = ref([]);\r\n  const brands = ref([]);\r\n  const selectedBrands = ref([]); // Для фильтрации по брендам\r\n  const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\r\n  const characteristics = ref({}); // Уникальные характеристики\r\n  \r\n  // Загрузка данных\r\n  onMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n  });\r\n  \r\n  // Функция для загрузки категорий\r\n  const loadCategories = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при загрузке категорий');\r\n      }\r\n      const data = await response.json();\r\n      categories.value = data;\r\n  \r\n      extractBrands(data);\r\n      extractCharacteristics(data);\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n  };\r\n  \r\n  // Функция для загрузки товаров\r\n  const loadProducts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      if (!response.ok) {\r\n        throw new Error('Ошибка при загрузке товаров');\r\n      }\r\n      const data = await response.json();\r\n      products.value = data;\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n  };\r\n  \r\n  // Извлекаем бренды из категорий\r\n  const extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    categoriesData.forEach((category) => {\r\n      if (category.brand) {\r\n        allBrands.add(category.brand);\r\n      }\r\n    });\r\n    brands.value = Array.from(allBrands);\r\n  };\r\n  \r\n  // Извлекаем уникальные характеристики\r\n  const extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n  \r\n    categoriesData.forEach((item) => {\r\n      if (item.characteristics && Array.isArray(item.characteristics)) {\r\n        item.characteristics.forEach((characteristic) => {\r\n          const charName = characteristic.characteristic;\r\n          const charValue = characteristic.value;\r\n  \r\n          if (!characteristicsData[charName]) {\r\n            characteristicsData[charName] = new Set();\r\n          }\r\n          characteristicsData[charName].add(charValue);\r\n        });\r\n      }\r\n    });\r\n  \r\n    for (const charName in characteristicsData) {\r\n      characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n  \r\n    characteristics.value = { ...characteristicsData };\r\n  };\r\n  \r\n  // Фильтрация товаров\r\n  const filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            const selectedValues = selectedCharacteristics.value[characteristic];\r\n            // Проверяем, что selectedValues - это массив, прежде чем использовать .some()\r\n            if (Array.isArray(selectedValues)) {\r\n                return selectedValues.some(value => product.characteristics.includes(value));\r\n            }\r\n            return false;\r\n        });\r\n\r\n        return matchesCharacteristics;\r\n    });\r\n});\r\n\r\n  \r\n  // Функция для выбора категории\r\n  const selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n  };\r\n  \r\n  // Обработка изменения в фильтре по характеристикам\r\n  const handleCharacteristicChange = (characteristic, value) => {\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n      selectedCharacteristics.value[characteristic] = [];\r\n    }\r\n  \r\n    const index = selectedCharacteristics.value[characteristic].indexOf(value);\r\n    if (index === -1) {\r\n      selectedCharacteristics.value[characteristic].push(value);\r\n    } else {\r\n      selectedCharacteristics.value[characteristic].splice(index, 1);\r\n    }\r\n  \r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n  };\r\n  \r\n  // Обработка изменения в фильтре по брендам\r\n  const handleBrandChange = (brand) => {\r\n    if (!selectedBrands.value.includes(brand)) {\r\n      selectedBrands.value.push(brand);\r\n    } else {\r\n      const index = selectedBrands.value.indexOf(brand);\r\n      if (index !== -1) {\r\n        selectedBrands.value.splice(index, 1);\r\n      }\r\n    }\r\n  \r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .category-menu {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n  }\r\n  \r\n  .category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n  }\r\n  \r\n  .brand-filter,\r\n  .characteristic-filter {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .brand-checkbox,\r\n  .characteristic-filter div {\r\n    margin: 5px 0;\r\n  }\r\n  \r\n  .product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .product-list li {\r\n    margin: 10px 0;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}