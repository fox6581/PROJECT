{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport ProductCart from '../Products/ProductCart.vue';\nimport { API_BASE_URL } from '@/config';\nconst productsPerPage = 12;\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const products = ref([]);\n    const brands = ref([]);\n    const categorys = ref([]);\n    const categories = ref([]);\n\n    // Состояние для управления фильтрами и сортировками\n    const sortOption = ref('rating'); // По умолчанию сортируем по рейтингу\n    const sortOrder = ref('asc'); // По умолчанию сортировка по возрастанию\n\n    const selectedCategorys = ref([]);\n    const selectedBrands = ref([]);\n    const selectedCharacteristics = ref({}); // Для хранения выбранных характеристик\n\n    // Пагинация\n    const currentPage = ref(1);\n    const totalPages = computed(() => {\n      return Math.ceil(filteredSortedProducts.value.length / productsPerPage);\n    });\n    const totalProducts = computed(() => {\n      return filteredSortedProducts.value.length;\n    });\n    const pagesToShow = computed(() => {\n      const pages = [];\n      const range = 1;\n      const start = Math.max(1, currentPage.value - range);\n      const end = Math.min(totalPages.value, currentPage.value + range);\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    });\n\n    // Фильтрация, сортировка и пагинация товаров\n    const filteredSortedPaginatedProducts = computed(() => {\n      let filteredProducts = products.value;\n\n      // Фильтрация по категориям, брендам и характеристикам\n      if (selectedCategorys.value.length > 0) {\n        filteredProducts = filteredProducts.filter(product => selectedCategorys.value.includes(product.category));\n      }\n      if (selectedBrands.value.length > 0) {\n        filteredProducts = filteredProducts.filter(product => selectedBrands.value.includes(product.brand));\n      }\n      if (Object.keys(selectedCharacteristics.value).length > 0) {\n        filteredProducts = filteredProducts.filter(product => {\n          return Object.keys(selectedCharacteristics.value).every(characteristic => {\n            const selectedValues = selectedCharacteristics.value[characteristic] || [];\n            const productValues = product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value);\n            return selectedValues.some(value => productValues.includes(value));\n          });\n        });\n      }\n\n      // Сортировка товаров\n      filteredProducts = filteredProducts.sort((a, b) => {\n        let comparison = 0;\n        if (sortOption.value === 'rating') {\n          comparison = a.rating - b.rating;\n        } else if (sortOption.value === 'price') {\n          comparison = a.price - b.price;\n        } else if (sortOption.value === 'deliveryDate') {\n          comparison = new Date(a.deliveryDate) - new Date(b.deliveryDate);\n        }\n        return sortOrder.value === 'asc' ? comparison : -comparison;\n      });\n\n      // Пагинация\n      const start = (currentPage.value - 1) * productsPerPage;\n      const end = currentPage.value * productsPerPage;\n      return filteredProducts.slice(start, end);\n    });\n\n    // Методы для управления пагинацией\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const prevPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n    const changePage = page => {\n      currentPage.value = page;\n    };\n\n    // Функции для фильтрации\n    const handleCategoryChange = category => {\n      const index = selectedCategorys.value.indexOf(category);\n      if (index === -1) {\n        selectedCategorys.value.push(category);\n      } else {\n        selectedCategorys.value.splice(index, 1);\n      }\n    };\n    const handleBrandChange = brand => {\n      const index = selectedBrands.value.indexOf(brand);\n      if (index === -1) {\n        selectedBrands.value.push(brand);\n      } else {\n        selectedBrands.value.splice(index, 1);\n      }\n    };\n    const handleCharacteristicChange = (characteristic, value) => {\n      if (!selectedCharacteristics.value[characteristic]) {\n        selectedCharacteristics.value[characteristic] = [];\n      }\n      const values = selectedCharacteristics.value[characteristic];\n      const index = values.indexOf(value);\n      if (index === -1) {\n        values.push(value);\n      } else {\n        values.splice(index, 1);\n      }\n    };\n\n    // Загрузка данных\n    const loadCategories = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/categories`);\n        const data = await response.json();\n        categories.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n    const loadProducts = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/products`);\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n\n    // Загрузка данных при монтировании компонента\n    onMounted(() => {\n      loadCategories();\n      loadProducts();\n    });\n    const __returned__ = {\n      products,\n      brands,\n      categorys,\n      categories,\n      sortOption,\n      sortOrder,\n      selectedCategorys,\n      selectedBrands,\n      selectedCharacteristics,\n      currentPage,\n      productsPerPage,\n      totalPages,\n      totalProducts,\n      pagesToShow,\n      filteredSortedPaginatedProducts,\n      nextPage,\n      prevPage,\n      changePage,\n      handleCategoryChange,\n      handleBrandChange,\n      handleCharacteristicChange,\n      loadCategories,\n      loadProducts,\n      ref,\n      onMounted,\n      computed,\n      ProductCart,\n      get API_BASE_URL() {\n        return API_BASE_URL;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","ProductCart","API_BASE_URL","productsPerPage","products","brands","categorys","categories","sortOption","sortOrder","selectedCategorys","selectedBrands","selectedCharacteristics","currentPage","totalPages","Math","ceil","filteredSortedProducts","value","length","totalProducts","pagesToShow","pages","range","start","max","end","min","i","push","filteredSortedPaginatedProducts","filteredProducts","filter","product","includes","category","brand","Object","keys","every","characteristic","selectedValues","productValues","characteristics","item","map","some","sort","a","b","comparison","rating","price","Date","deliveryDate","slice","nextPage","prevPage","changePage","page","handleCategoryChange","index","indexOf","splice","handleBrandChange","handleCharacteristicChange","values","loadCategories","response","fetch","data","json","error","console","loadProducts"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h3>Количество товаров: {{ totalProducts }}</h3>\r\n\r\n        <h3>Сортировка</h3>\r\n        <div>\r\n            <label for=\"sortBy\">Сортировать по:</label>\r\n            <select id=\"sortBy\" v-model=\"sortOption\">\r\n                <option value=\"rating\">Рейтинг</option>\r\n                <option value=\"price\">Стоимость</option>\r\n                <option value=\"deliveryDate\">Дата поставки</option>\r\n            </select>\r\n            <button @click=\"toggleSortOrder\">Сортировать по {{ sortOrder === 'asc' ? 'возрастанию' : 'убыванию'\r\n                }}</button>\r\n        </div>\r\n\r\n\r\n        <ProductCart :products=\"paginatedSortedProducts\" :apiUrl=\"apiUrl\" />\r\n\r\n        <!-- Пагинация -->\r\n        <!-- <div class=\"pagination\">\r\n            <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Назад</button>\r\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n            <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Вперед</button>\r\n        </div> -->\r\n\r\n\r\n        <div class=\"pagination\">\r\n            <!-- Кнопка назад -->\r\n\r\n            <button @click=\"prevPage\" :disabled=\"currentPage === 1\">&lt;</button>\r\n\r\n            <!-- Первая страница -->\r\n            <button v-if=\"currentPage >= 3\" @click=\"changePage(1)\">1</button>\r\n            <span v-if=\"currentPage >= 3\">...</span>\r\n\r\n            <!-- Страницы около текущей -->\r\n            <button v-for=\"page in pagesToShow\" :key=\"page\" :class=\"{ active: currentPage === page }\"\r\n                @click=\"changePage(page)\">\r\n                {{ page }}\r\n            </button>\r\n\r\n            <!-- Троеточие, если необходимо -->\r\n            <span v-if=\"currentPage < totalPages - 3\">...</span>\r\n\r\n            <!-- Последняя страница -->\r\n            <button v-if=\"currentPage < totalPages - 3\" @click=\"changePage(totalPages)\">\r\n                {{ totalPages }}\r\n            </button>\r\n\r\n            <!-- Текущая страница -->\r\n            <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n\r\n            <!-- Кнопка вперед -->\r\n            <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">&gt;</button>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <h2 @click=\"toggleCategoryFilter\">\r\n            Категории\r\n            <span :class=\"{ 'open': isCategoryFilterOpen }\" class=\"arrow\"></span>\r\n        </h2>\r\n        <div v-if=\"isCategoryFilterOpen\" class=\"category-checkbox\">\r\n            <div v-for=\"category in categorys\" :key=\"category\">\r\n                <input type=\"checkbox\" :id=\"category\" :value=\"category\" v-model=\"selectedCategorys\"\r\n                    @change=\"handleCategorysChange(category)\" />\r\n                <label :for=\"category\">{{ category }}</label>\r\n            </div>\r\n        </div>\r\n        <!-- Раскрывающееся меню для характеристик -->\r\n        <div class=\"characteristic-filter\">\r\n            <h2>Уникальные характеристики</h2>\r\n            <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                <details>\r\n                    <summary>{{ characteristic }}</summary>\r\n                    <div v-for=\"value in values\" :key=\"value\">\r\n                        <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                            v-model=\"selectedCharacteristics[characteristic]\"\r\n                            @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                        <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                    </div>\r\n                </details>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                    @change=\"handleBrandChange(brand)\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nimport { API_BASE_URL } from '@/config';\r\n\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\nconst categories = ref([]);\r\n\r\n// Состояние для управления фильтрами и сортировками\r\nconst sortOption = ref('rating');  // По умолчанию сортируем по рейтингу\r\nconst sortOrder = ref('asc');  // По умолчанию сортировка по возрастанию\r\n\r\nconst selectedCategorys = ref([]);\r\nconst selectedBrands = ref([]);\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\n\r\n// Пагинация\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 12;\r\n\r\nconst totalPages = computed(() => {\r\n    return Math.ceil(filteredSortedProducts.value.length / productsPerPage);\r\n});\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredSortedProducts.value.length;\r\n});\r\n\r\nconst pagesToShow = computed(() => {\r\n    const pages = [];\r\n    const range = 1;\r\n    const start = Math.max(1, currentPage.value - range);\r\n    const end = Math.min(totalPages.value, currentPage.value + range);\r\n\r\n    for (let i = start; i <= end; i++) {\r\n        pages.push(i);\r\n    }\r\n    return pages;\r\n});\r\n\r\n// Фильтрация, сортировка и пагинация товаров\r\nconst filteredSortedPaginatedProducts = computed(() => {\r\n    let filteredProducts = products.value;\r\n\r\n    // Фильтрация по категориям, брендам и характеристикам\r\n    if (selectedCategorys.value.length > 0) {\r\n        filteredProducts = filteredProducts.filter(product => selectedCategorys.value.includes(product.category));\r\n    }\r\n\r\n    if (selectedBrands.value.length > 0) {\r\n        filteredProducts = filteredProducts.filter(product => selectedBrands.value.includes(product.brand));\r\n    }\r\n\r\n    if (Object.keys(selectedCharacteristics.value).length > 0) {\r\n        filteredProducts = filteredProducts.filter(product => {\r\n            return Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n                const selectedValues = selectedCharacteristics.value[characteristic] || [];\r\n                const productValues = product.characteristics.filter(item => item.characteristic === characteristic).map(item => item.value);\r\n                return selectedValues.some(value => productValues.includes(value));\r\n            });\r\n        });\r\n    }\r\n\r\n    // Сортировка товаров\r\n    filteredProducts = filteredProducts.sort((a, b) => {\r\n        let comparison = 0;\r\n\r\n        if (sortOption.value === 'rating') {\r\n            comparison = a.rating - b.rating;\r\n        } else if (sortOption.value === 'price') {\r\n            comparison = a.price - b.price;\r\n        } else if (sortOption.value === 'deliveryDate') {\r\n            comparison = new Date(a.deliveryDate) - new Date(b.deliveryDate);\r\n        }\r\n\r\n        return sortOrder.value === 'asc' ? comparison : -comparison;\r\n    });\r\n\r\n    // Пагинация\r\n    const start = (currentPage.value - 1) * productsPerPage;\r\n    const end = currentPage.value * productsPerPage;\r\n    return filteredProducts.slice(start, end);\r\n});\r\n\r\n// Методы для управления пагинацией\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\nconst changePage = (page) => {\r\n    currentPage.value = page;\r\n};\r\n\r\n// Функции для фильтрации\r\nconst handleCategoryChange = (category) => {\r\n    const index = selectedCategorys.value.indexOf(category);\r\n    if (index === -1) {\r\n        selectedCategorys.value.push(category);\r\n    } else {\r\n        selectedCategorys.value.splice(index, 1);\r\n    }\r\n};\r\n\r\nconst handleBrandChange = (brand) => {\r\n    const index = selectedBrands.value.indexOf(brand);\r\n    if (index === -1) {\r\n        selectedBrands.value.push(brand);\r\n    } else {\r\n        selectedBrands.value.splice(index, 1);\r\n    }\r\n};\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    if (!selectedCharacteristics.value[characteristic]) {\r\n        selectedCharacteristics.value[characteristic] = [];\r\n    }\r\n    const values = selectedCharacteristics.value[characteristic];\r\n    const index = values.indexOf(value);\r\n    if (index === -1) {\r\n        values.push(value);\r\n    } else {\r\n        values.splice(index, 1);\r\n    }\r\n};\r\n\r\n// Загрузка данных\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/categories`);\r\n        const data = await response.json();\r\n        categories.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/products`);\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Загрузка данных при монтировании компонента\r\nonMounted(() => {\r\n    loadCategories();\r\n    loadProducts();\r\n});\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.pagination button {\r\n    padding: 5px 10px;\r\n    margin: 0 5px;\r\n    border: 1px solid #ccc;\r\n    background: #F6F6F6;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    font-family: ABeeZee;\r\n    font-size: 16px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    letter-spacing: 0.03em;\r\n    text-align: center;\r\n\r\n}\r\n\r\n.pagination button.active {\r\n    background: #000000;\r\n    color: #fff;\r\n\r\n}\r\n\r\n.pagination button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: #f0f0f0;\r\n    border-color: #ddd;\r\n}\r\n\r\n.pagination span {\r\n    margin: 0 5px;\r\n}\r\n\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n    /* Добавляем перенос */\r\n}\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}