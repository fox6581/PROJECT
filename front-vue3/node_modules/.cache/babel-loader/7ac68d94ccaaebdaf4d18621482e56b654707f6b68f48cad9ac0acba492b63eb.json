{"ast":null,"code":"import { createVNode as _createVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HeaderMobile = _resolveComponent(\"HeaderMobile\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode($setup[\"HeaderTop\"]), _createCommentVNode(\" Показываем мобильное меню только при условии, что экран меньше 768px \"), $setup.isMobile ? (_openBlock(), _createBlock(_component_HeaderMobile, {\n    key: 0\n  })) : _createCommentVNode(\"v-if\", true), _cache[0] || (_cache[0] = _createElementVNode(\"hr\", null, null, -1 /* HOISTED */)), _createVNode(_component_router_view), _createVNode($setup[\"FooterInfo\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","$setup","_createCommentVNode","isMobile","_createBlock","_component_HeaderMobile","key","_createElementVNode","_component_router_view"],"sources":["C:\\shopvue\\front-vue3\\src\\App.vue"],"sourcesContent":["<template>\n  <HeaderTop />\n  \n  <!-- Показываем мобильное меню только при условии, что экран меньше 768px -->\n  <HeaderMobile v-if=\"isMobile\" />\n\n  <hr />\n  <router-view />\n  <FooterInfo />\n</template>\n\n<script setup>\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nimport HeaderTop from './components/Header/HeaderTop.vue';\nimport FooterInfo from './components/Footer/FooterInfo.vue';\n\nconst isMobile = ref(false);\n\n// Функция для проверки ширины экрана\nconst checkMobileScreen = () => {\n  isMobile.value = window.innerWidth <= 768; // Для мобильных устройств меньше 768px\n};\n\n// Запуск проверки при монтировании компонента\nonMounted(() => {\n  checkMobileScreen(); // Проверяем размер экрана сразу при монтировании компонента\n  window.addEventListener('resize', checkMobileScreen); // Подписываемся на изменение размера экрана\n});\n\n// Очистка обработчика при размонтировании компонента\nonBeforeUnmount(() => {\n  window.removeEventListener('resize', checkMobileScreen);\n});\n</script>\n\n<style>\n/* Стили для всей страницы */\nbody {\n  width: 1440px;\n  margin: 0 auto;\n}\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nhr {\n  border-bottom: 1px solid #B5B5B5;\n}\n</style>\n"],"mappings":";;;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAaC,MAAA,gBAEbC,mBAAA,0EAA6E,EACzDD,MAAA,CAAAE,QAAQ,I,cAA5BC,YAAA,CAAgCC,uBAAA;IAJlCC,GAAA;EAAA,MAAAJ,mBAAA,gB,0BAMEK,mBAAA,CAAM,sCACNP,YAAA,CAAeQ,sBAAA,GACfR,YAAA,CAAcC,MAAA,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}