{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.brands, brand => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      key: brand\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      value: brand,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.localSelectedBrands = $event),\n      onChange: _cache[1] || (_cache[1] = (...args) => $options.updateSelectedBrands && $options.updateSelectedBrands(...args))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_1), [[_vModelCheckbox, $data.localSelectedBrands]]), _createTextVNode(\" \" + _toDisplayString(brand), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","_ctx","brands","brand","key","_createElementVNode","type","value","_cache","$event","$data","localSelectedBrands","onChange","args","$options","updateSelectedBrands","_hoisted_1","_createTextVNode","_toDisplayString"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Filter\\BrandFilter.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <label v-for=\"brand in brands\" :key=\"brand\">\r\n        <input type=\"checkbox\" :value=\"brand\" v-model=\"localSelectedBrands\" @change=\"updateSelectedBrands\">\r\n        {{ brand }}\r\n      </label>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    props: {\r\n      selectedBrands: Array\r\n    },\r\n    data() {\r\n      return {\r\n        localSelectedBrands: [...this.selectedBrands] // локальная копия для изменения\r\n      };\r\n    },\r\n    methods: {\r\n      updateSelectedBrands() {\r\n        this.$emit('update:selectedBrands', this.localSelectedBrands); // эмиттируем обновление родителю\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "],"mappings":";mBAAA;;uBACIA,mBAAA,CAKM,e,kBAJJA,mBAAA,CAGQC,SAAA,QALdC,WAAA,CAE6BC,IAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAnBL,mBAAA,CAGQ;MAHwBM,GAAG,EAAED;IAAK,I,gBACxCE,mBAAA,CAAmG;MAA5FC,IAAI,EAAC,UAAU;MAAEC,KAAK,EAAEJ,KAAK;MAH5C,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGuDC,KAAA,CAAAC,mBAAmB,GAAAF,MAAA;MAAGG,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,oBAAA,IAAAD,QAAA,CAAAC,oBAAA,IAAAF,IAAA,CAAoB;6CAHzGG,UAAA,I,kBAGuDN,KAAA,CAAAC,mBAAmB,E,GAH1EM,gBAAA,CAG2G,GACnG,GAAAC,gBAAA,CAAGf,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}