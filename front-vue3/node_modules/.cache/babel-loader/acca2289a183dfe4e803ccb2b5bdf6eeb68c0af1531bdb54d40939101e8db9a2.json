{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"menu_left\"\n};\nconst _hoisted_2 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_3 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_4 = [\"for\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"category-checkbox\"\n};\nconst _hoisted_6 = [\"id\", \"value\", \"onChange\"];\nconst _hoisted_7 = [\"for\"];\nconst _hoisted_8 = {\n  class: \"characteristic-filter\"\n};\nconst _hoisted_9 = [\"id\", \"value\", \"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_10 = [\"for\"];\nconst _hoisted_11 = {\n  class: \"sorted\"\n};\nconst _hoisted_12 = {\n  class: \"all_product\"\n};\nconst _hoisted_13 = {\n  class: \"pagination\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = {\n  key: 1\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = {\n  key: 2\n};\nconst _hoisted_18 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      value: brand,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedBrands = $event),\n      onChange: $event => $setup.handleBrandChange(brand)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по категориям \"), _createElementVNode(\"h2\", {\n    onClick: $setup.toggleCategoryFilter\n  }, [_cache[6] || (_cache[6] = _createTextVNode(\" Категории \")), _createElementVNode(\"span\", {\n    class: _normalizeClass([{\n      'open': $setup.isCategoryFilterOpen\n    }, \"arrow\"])\n  }, null, 2 /* CLASS */)]), $setup.isCategoryFilterOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categorys, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: category,\n      value: category,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedCategorys = $event),\n      onChange: $event => $setup.handleCategorysChange(category)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), [[_vModelCheckbox, $setup.selectedCategorys]]), _createElementVNode(\"label\", {\n      for: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Раскрывающееся меню для характеристик \"), _createElementVNode(\"div\", _hoisted_8, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Уникальные характеристики\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic\n    }, [_createElementVNode(\"details\", null, [_createElementVNode(\"summary\", null, _toDisplayString(characteristic), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: `${characteristic}-${value}`,\n        value: value,\n        \"onUpdate:modelValue\": $event => $setup.selectedCharacteristics[characteristic] = $event,\n        onChange: $event => $setup.handleCharacteristicChange(characteristic, value)\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_9), [[_vModelCheckbox, $setup.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: `${characteristic}-${value}`\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_10)]);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _cache[11] || (_cache[11] = _createElementVNode(\"data\", {\n    value: \"\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", null, [_createElementVNode(\"h3\", null, [_cache[8] || (_cache[8] = _createTextVNode(\"Selected Products: \")), _createElementVNode(\"span\", null, _toDisplayString($setup.totalProducts), 1 /* TEXT */)])]), _createElementVNode(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"sortBy\"\n  }, \"Сортировать по:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"sortBy\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.sortOption = $event)\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"option\", {\n    value: \"rating\"\n  }, \"By rating\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"price\"\n  }, \"price\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"deliveryDate\"\n  }, \"Дата поставки\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.sortOption]]), _createElementVNode(\"button\", {\n    onClick: $setup.toggleSortOrder\n  }, \"Сортировать по \" + _toDisplayString($setup.sortOrder === 'asc' ? 'возрастанию' : 'убыванию'), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_12, [_createVNode($setup[\"ProductCart\"], {\n    products: $setup.paginatedProducts,\n    apiUrl: $setup.apiUrl\n  }, null, 8 /* PROPS */, [\"products\", \"apiUrl\"]), _createElementVNode(\"div\", _hoisted_13, [_createCommentVNode(\" Кнопка назад \"), _createElementVNode(\"button\", {\n    onClick: $setup.prevPage,\n    disabled: $setup.currentPage === 1\n  }, \"<\", 8 /* PROPS */, _hoisted_14), _createCommentVNode(\" Первая страница \"), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[3] || (_cache[3] = $event => $setup.changePage(1))\n  }, \"1\")) : _createCommentVNode(\"v-if\", true), $setup.currentPage >= 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_15, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Страницы около текущей \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.pagesToShow, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      class: _normalizeClass({\n        active: $setup.currentPage === page\n      }),\n      onClick: $event => $setup.changePage(page)\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Троеточие, если необходимо \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_17, \"...\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Последняя страница \"), $setup.currentPage < $setup.totalPages - 3 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[4] || (_cache[4] = $event => $setup.changePage($setup.totalPages))\n  }, _toDisplayString($setup.totalPages), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Текущая страница \"), _createElementVNode(\"span\", null, \"Страница \" + _toDisplayString($setup.currentPage) + \" из \" + _toDisplayString($setup.totalPages), 1 /* TEXT */), _createCommentVNode(\" Кнопка вперед \"), _createElementVNode(\"button\", {\n    onClick: $setup.nextPage,\n    disabled: $setup.currentPage === $setup.totalPages\n  }, \">\", 8 /* PROPS */, _hoisted_18)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_hoisted_1","_createCommentVNode","_hoisted_2","_Fragment","_renderList","$setup","brands","brand","type","id","value","_cache","$event","selectedBrands","onChange","handleBrandChange","_hoisted_3","for","_toDisplayString","_hoisted_4","onClick","toggleCategoryFilter","_createTextVNode","_normalizeClass","isCategoryFilterOpen","_hoisted_5","categorys","category","selectedCategorys","handleCategorysChange","_hoisted_6","_hoisted_7","_hoisted_8","characteristics","values","characteristic","selectedCharacteristics","handleCharacteristicChange","_hoisted_9","_hoisted_10","_hoisted_11","totalProducts","sortOption","toggleSortOrder","sortOrder","_hoisted_12","_createVNode","products","paginatedProducts","apiUrl","_hoisted_13","prevPage","disabled","currentPage","_hoisted_14","changePage","_hoisted_15","pagesToShow","page","active","_hoisted_16","totalPages","_hoisted_17","nextPage","_hoisted_18"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div> \r\n        \r\n        <div class=\"menu_left\">\r\n            <!-- Фильтр по брендам -->\r\n            <div class=\"brand-filter\">\r\n                <h3>Фильтр по брендам</h3>\r\n                <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                    <input type=\"checkbox\" :id=\"brand\" :value=\"brand\" v-model=\"selectedBrands\"\r\n                        @change=\"handleBrandChange(brand)\" />\r\n                    <label :for=\"brand\">{{ brand }}</label>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Фильтр по категориям -->\r\n            <h2 @click=\"toggleCategoryFilter\">\r\n                Категории\r\n                <span :class=\"{ 'open': isCategoryFilterOpen }\" class=\"arrow\"></span>\r\n            </h2>\r\n            <div v-if=\"isCategoryFilterOpen\" class=\"category-checkbox\">\r\n                <div v-for=\"category in categorys\" :key=\"category\">\r\n                    <input type=\"checkbox\" :id=\"category\" :value=\"category\" v-model=\"selectedCategorys\"\r\n                        @change=\"handleCategorysChange(category)\" />\r\n                    <label :for=\"category\">{{ category }}</label>\r\n                </div>\r\n            </div>\r\n            <!-- Раскрывающееся меню для характеристик -->\r\n            <div class=\"characteristic-filter\">\r\n                <h2>Уникальные характеристики</h2>\r\n                <div v-for=\"(values, characteristic) in characteristics\" :key=\"characteristic\">\r\n                    <details>\r\n                        <summary>{{ characteristic }}</summary>\r\n                        <div v-for=\"value in values\" :key=\"value\">\r\n                            <input type=\"checkbox\" :id=\"`${characteristic}-${value}`\" :value=\"value\"\r\n                                v-model=\"selectedCharacteristics[characteristic]\"\r\n                                @change=\"handleCharacteristicChange(characteristic, value)\" />\r\n                            <label :for=\"`${characteristic}-${value}`\">{{ value }}</label>\r\n                        </div>\r\n                    </details>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n        <data value=\"\"></data>\r\n        <div class=\"sorted\">\r\n            <div>\r\n                <h3>Selected Products: <span>{{ totalProducts }}</span></h3>\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <label for=\"sortBy\">Сортировать по:</label>\r\n                <select id=\"sortBy\" v-model=\"sortOption\">\r\n                    <option value=\"rating\">By rating</option>\r\n                    <option value=\"price\">price</option>\r\n                    <option value=\"deliveryDate\">Дата поставки</option>\r\n                </select>\r\n                <button @click=\"toggleSortOrder\">Сортировать по {{ sortOrder === 'asc' ? 'возрастанию' : 'убыванию'\r\n                    }}</button>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"all_product\">\r\n            <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n            <div class=\"pagination\">\r\n                <!-- Кнопка назад -->\r\n\r\n                <button @click=\"prevPage\" :disabled=\"currentPage === 1\">&lt;</button>\r\n\r\n                <!-- Первая страница -->\r\n                <button v-if=\"currentPage >= 3\" @click=\"changePage(1)\">1</button>\r\n                <span v-if=\"currentPage >= 3\">...</span>\r\n\r\n                <!-- Страницы около текущей -->\r\n                <button v-for=\"page in pagesToShow\" :key=\"page\" :class=\"{ active: currentPage === page }\"\r\n                    @click=\"changePage(page)\">\r\n                    {{ page }}\r\n                </button>\r\n\r\n                <!-- Троеточие, если необходимо -->\r\n                <span v-if=\"currentPage < totalPages - 3\">...</span>\r\n\r\n                <!-- Последняя страница -->\r\n                <button v-if=\"currentPage < totalPages - 3\" @click=\"changePage(totalPages)\">\r\n                    {{ totalPages }}\r\n                </button>\r\n\r\n                <!-- Текущая страница -->\r\n                <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n\r\n                <!-- Кнопка вперед -->\r\n                <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">&gt;</button>\r\n            </div>\r\n        </div>\r\n\r\n       \r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ProductCart from '../Products/ProductCart.vue';\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst categorys = ref([]);\r\n\r\n// Состояние для управления видимостью фильтра\r\nconst isCategoryFilterOpen = ref(false);\r\nconst toggleCategoryFilter = () => {\r\n    isCategoryFilterOpen.value = !isCategoryFilterOpen.value;\r\n};\r\n\r\nimport { API_BASE_URL } from '@/config';\r\n\r\n\r\n\r\n// сортировка\r\n\r\n\r\nconst sortOption = ref('rating');  // По умолчанию сортируем по рейтингу\r\nconst sortOrder = ref('asc');  // По умолчанию сортировка по возрастанию\r\n\r\n// Данные товаров\r\n\r\n\r\n// Функция для изменения порядка сортировки\r\nconst toggleSortOrder = () => {\r\n    sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc';\r\n};\r\n\r\n// Функция для сортировки товаров\r\n\r\n\r\n\r\n// Функция сортировки\r\n\r\n\r\n// Пагинированные и отсортированные продукты\r\n// const paginatedSortedProducts = computed(() => {\r\n//   const start = (currentPage.value - 1) * pageSize.value\r\n//   const end = currentPage.value * pageSize.value\r\n//   return sortedProducts.value.slice(start, end)\r\n// })\r\n\r\n//конец сортировки\r\n\r\n\r\n\r\n// Храним товары и базовый URL для API\r\n\r\nconst apiUrl = API_BASE_URL;\r\n\r\n// Переменные для управления пагинацией\r\n// Пагинация\r\nconst currentPage = ref(1);\r\nconst productsPerPage = 12; // Количество товаров на странице\r\n\r\nconst totalPages = computed(() => {\r\n    return Math.ceil(filteredProducts.value.length / productsPerPage);\r\n});\r\n\r\nconst totalProducts = computed(() => {\r\n    return filteredProducts.value.length;\r\n});\r\n\r\n\r\n\r\nconst pagesToShow = computed(() => {\r\n    const pages = [];\r\n    const range = 1; // Показать 3 страницы вокруг текущей\r\n    const start = Math.max(1, currentPage.value - range);\r\n    const end = Math.min(totalPages.value, currentPage.value + range);\r\n\r\n    // Добавляем страницы в диапазон\r\n    for (let i = start; i <= end; i++) {\r\n        pages.push(i);\r\n    }\r\n    return pages;\r\n});\r\n\r\n// конец пагинации\r\nconst filteredProducts = computed(() => {\r\n    console.log('начало работы фильтрации');\r\n\r\n    // Если не выбраны ни бренды, ни характеристики, ни категории, возвращаем все товары\r\n    if (selectedBrands.value.length === 0 && Object.keys(selectedCharacteristics.value).length === 0 && selectedCategorys.value.length === 0) {\r\n        return products.value;\r\n    }\r\n\r\n    return products.value.filter(product => {\r\n        // Фильтрация по брендам\r\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n\r\n        // Фильтрация по характеристикам\r\n        const matchesCharacteristics = Object.keys(selectedCharacteristics.value).every(characteristic => {\r\n            // Если характеристика не выбрана, она считается совпавшей\r\n            if (!selectedCharacteristics.value[characteristic] || selectedCharacteristics.value[characteristic].length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Преобразуем значение в массив, если это не массив\r\n            const selectedValues = Array.isArray(selectedCharacteristics.value[characteristic])\r\n                ? selectedCharacteristics.value[characteristic]\r\n                : [selectedCharacteristics.value[characteristic]];\r\n\r\n            // Получаем значения характеристики для товара\r\n            const productValues = product.characteristics\r\n                ? product.characteristics\r\n                    .filter(item => item.characteristic === characteristic)\r\n                    .map(item => item.value)\r\n                : [];\r\n\r\n            // Проверка, что хотя бы одно из выбранных значений характеристики совпадает с товарами\r\n            return selectedValues.some(value => productValues.includes(value));\r\n        });\r\n\r\n        return matchesBrand && matchesCategory && matchesCharacteristics;\r\n    });\r\n});\r\n\r\nconst sortedProducts = computed(() => {\r\n    return [...filteredProducts.value].sort((a, b) => {\r\n        let comparison = 0;\r\n\r\n        // Сортируем по рейтингу\r\n        if (sortOption.value === 'rating') {\r\n            comparison = a.rating - b.rating;\r\n        }\r\n        // Сортируем по цене\r\n        else if (sortOption.value === 'price') {\r\n            comparison = a.price - b.price;\r\n        }\r\n        // Сортируем по дате поставки\r\n        else if (sortOption.value === 'deliveryDate') {\r\n            comparison = new Date(a.deliveryDate) - new Date(b.deliveryDate);\r\n        }\r\n\r\n        // Если порядок сортировки 'desc', меняем знак\r\n        return sortOrder.value === 'asc' ? comparison : -comparison;\r\n    });\r\n});\r\n\r\nconst paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return sortedProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n});\r\n\r\n\r\n\r\n// Методы для управления страницами\r\nconst nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n    }\r\n};\r\nconst changePage = (page) => {\r\n    // Устанавливаем текущую страницу\r\n    currentPage.value = page;\r\n};\r\n\r\nconst prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n    }\r\n};\r\n\r\n\r\nconst selectedCharacteristics = ref({});  // Для хранения выбранных характеристик\r\nconst characteristics = ref({});  // Уникальные характеристики\r\n\r\nconst selectedBrands = ref([]);\r\n\r\nconst handleBrandChange = (brand) => {\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n    if (!selectedBrands.value[brand]) {\r\n        selectedBrands.value[brand] = true;\r\n    } else {\r\n        selectedBrands.value[brand] = !selectedBrands.value[brand];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedBrands.value);\r\n};\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n};\r\n\r\n\r\n\r\nconst selectedCategorys = ref([]);\r\n\r\n\r\n\r\n\r\nconst handleCategorysChange = (category) => {\r\n\r\n    if (!Array.isArray(selectedCategorys.value[category])) {\r\n        selectedCategorys.value[category] = true;\r\n    }\r\n    // Если бренд не был добавлен в selectedBrands, добавляем его\r\n\r\n    else {\r\n        selectedCategorys.value[category] = !selectedCategorys.value[category];\r\n    }\r\n\r\n    // Логируем обновленные данные для отладки\r\n    console.log('selectedBrands.value', selectedCategorys.value);\r\n};\r\nconst extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n\r\n    categoriesData.forEach(category => {\r\n        if (category.category) {\r\n            allCategorys.add(category.category);\r\n        }\r\n    });\r\n\r\n    categorys.value = Array.from(allCategorys);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleCharacteristicChange = (characteristic, value) => {\r\n    // Если характеристика еще не существует в selectedCharacteristics, создаем массив\r\n    if (!Array.isArray(selectedCharacteristics.value[characteristic])) {\r\n        selectedCharacteristics.value[characteristic] = [value];\r\n    }\r\n\r\n    // Принудительное обновление реактивности (необязательно в случае, если массив был изменен)\r\n    selectedCharacteristics.value = { ...selectedCharacteristics.value };\r\n\r\n    // Выводим обновленные данные для отладки\r\n    console.log('selectedCharacteristics.value', selectedCharacteristics.value);\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data;\r\n\r\n        extractBrands(data);\r\n        extractCategorys(data);\r\n        extractCharacteristics(data);\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data;\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n\r\n// Извлекаем уникальные характеристики\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue);\r\n            });\r\n        }\r\n    });\r\n\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData };\r\n};\r\n\r\n// Фильтрация товаров по выбранным брендам и характеристикам\r\n\r\n\r\n\r\n\r\n// пагинация \r\n\r\n</script>\r\n\r\n<style scoped>\r\n.sorted {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    h3 {\r\n        font-family: ABeeZee;\r\n        font-size: 16px;\r\n        font-style: italic;\r\n        font-weight: 400;\r\n        line-height: 16px;\r\n        letter-spacing: 0.03em;\r\n        text-align: left;\r\n        color: #6C6C6C;\r\n\r\n        span {\r\n            font-family: ABeeZee;\r\n            font-size: 20px;\r\n            font-style: normal;\r\n            font-weight: 400;\r\n            line-height: 16px;\r\n            letter-spacing: 0.03em;\r\n            text-align: center;\r\n            color: #000000;\r\n\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.pagination button {\r\n    padding: 5px 10px;\r\n    margin: 0 5px;\r\n    border: 1px solid #ccc;\r\n    background: #F6F6F6;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    font-family: ABeeZee;\r\n    font-size: 16px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    letter-spacing: 0.03em;\r\n    text-align: center;\r\n\r\n}\r\n\r\n.pagination button.active {\r\n    background: #000000;\r\n    color: #fff;\r\n\r\n}\r\n\r\n.pagination button:disabled {\r\n    cursor: not-allowed;\r\n    background-color: #f0f0f0;\r\n    border-color: #ddd;\r\n}\r\n\r\n.pagination span {\r\n    margin: 0 5px;\r\n}\r\n\r\n\r\n.all {\r\n    flex-wrap: wrap;\r\n    /* Добавляем перенос */\r\n}\r\n\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter,\r\n.characteristic-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox,\r\n.characteristic-filter div {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.product-list li {\r\n    margin: 10px 0;\r\n}\r\n\r\n/* Добавляем стили для раскрывающегося меню */\r\ndetails summary {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\ndetails div {\r\n    margin-left: 20px;\r\n}\r\n\r\n\r\n.arrow {\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    border-top: 5px solid #000;\r\n    /* Черная стрелка, направленная вниз */\r\n    transition: transform 0.3s ease-in-out;\r\n    /* Плавное изменение направления */\r\n}\r\n\r\n/* Когда фильтр открыт, стрелка разворачивается вверх */\r\n.arrow.open {\r\n    transform: rotate(180deg);\r\n    /* Поворот стрелки на 180 градусов */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}