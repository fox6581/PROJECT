{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"category-menu\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  class: \"brand-filter\"\n};\nconst _hoisted_4 = [\"id\", \"value\"];\nconst _hoisted_5 = [\"for\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"characteristics-filter\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"id\", \"onUpdate:modelValue\", \"value\"];\nconst _hoisted_9 = [\"for\"];\nconst _hoisted_10 = {\n  class: \"product-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Категории\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categories, category => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: category.id,\n      onClick: $event => $setup.selectCategory(category)\n    }, _toDisplayString(category.name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Фильтр по брендам \"), _createElementVNode(\"div\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Фильтр по брендам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.brands, brand => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: brand,\n      class: \"brand-checkbox\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: brand,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedBrands = $event),\n      value: brand\n    }, null, 8 /* PROPS */, _hoisted_4), [[_vModelCheckbox, $setup.selectedBrands]]), _createElementVNode(\"label\", {\n      for: brand\n    }, _toDisplayString(brand), 9 /* TEXT, PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Фильтр по характеристикам \"), Object.keys($setup.characteristics).length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Фильтр по характеристикам\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.characteristics, (values, characteristic) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: characteristic,\n      class: \"characteristic-section\"\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(characteristic), 1 /* TEXT */), Array.isArray(values) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(values, value => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: value,\n        class: \"characteristic-checkbox\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        id: value,\n        \"onUpdate:modelValue\": $event => _ctx.selectedCharacteristics[characteristic] = $event,\n        value: value\n      }, null, 8 /* PROPS */, _hoisted_8), [[_vModelCheckbox, _ctx.selectedCharacteristics[characteristic]]]), _createElementVNode(\"label\", {\n        for: value\n      }, _toDisplayString(value), 9 /* TEXT, PROPS */, _hoisted_9)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Товары\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredProducts, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.id\n    }, _toDisplayString(product.name) + \" - \" + _toDisplayString(product.brand), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_hoisted_1","_Fragment","_renderList","$setup","categories","category","id","onClick","$event","selectCategory","name","_hoisted_2","_createCommentVNode","_hoisted_3","brands","brand","type","_cache","selectedBrands","value","_hoisted_4","for","_toDisplayString","_hoisted_5","Object","keys","characteristics","length","_hoisted_6","values","characteristic","Array","isArray","_hoisted_7","_ctx","selectedCharacteristics","_hoisted_8","_hoisted_9","_hoisted_10","filteredProducts","product"],"sources":["C:\\shopvue\\front-vue3\\src\\components\\Menu\\LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"category-menu\">\r\n            <h3>Категории</h3>\r\n            <ul>\r\n                <li v-for=\"category in categories\" :key=\"category.id\" @click=\"selectCategory(category)\">\r\n                    {{ category.name }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <!-- Фильтр по брендам -->\r\n        <div class=\"brand-filter\">\r\n            <h3>Фильтр по брендам</h3>\r\n            <div v-for=\"brand in brands\" :key=\"brand\" class=\"brand-checkbox\">\r\n                <input type=\"checkbox\" :id=\"brand\" v-model=\"selectedBrands\" :value=\"brand\" />\r\n                <label :for=\"brand\">{{ brand }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Фильтр по характеристикам -->\r\n\r\n  <div v-if=\"Object.keys(characteristics).length > 0\" class=\"characteristics-filter\">\r\n    <h3>Фильтр по характеристикам</h3>\r\n    <div\r\n      v-for=\"(values, characteristic) in characteristics\"\r\n      :key=\"characteristic\"\r\n      class=\"characteristic-section\"\r\n    >\r\n      <h4>{{ characteristic }}</h4>\r\n      <div v-if=\"Array.isArray(values)\">\r\n        <div\r\n          v-for=\"value in values\"\r\n          :key=\"value\"\r\n          class=\"characteristic-checkbox\"\r\n        >\r\n          <input\r\n            type=\"checkbox\"\r\n            :id=\"value\"\r\n            v-model=\"selectedCharacteristics[characteristic]\"\r\n            :value=\"value\"\r\n          />\r\n          <label :for=\"value\">{{ value }}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"product-list\">\r\n            <h3>Товары</h3>\r\n            <ul>\r\n                <li v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                    {{ product.name }} - {{ product.brand }}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nconst categories = ref([]);\r\nconst products = ref([]);\r\nconst brands = ref([]);\r\nconst selectedBrands = ref([]);\r\nconst characteristics = ref({}); // Уникальные характеристики\r\n\r\nonMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n});\r\n\r\n// Функция для загрузки категорий\r\nconst loadCategories = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке категорий');\r\n        }\r\n        const data = await response.json();\r\n        categories.value = data; // Сохраняем категории\r\n\r\n        extractBrands(data);  // Извлекаем бренды\r\n        extractCharacteristics(data)\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n};\r\n\r\n// Функция для загрузки товаров\r\nconst loadProducts = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:1452/api/products');\r\n        if (!response.ok) {\r\n            throw new Error('Ошибка при загрузке товаров');\r\n        }\r\n        const data = await response.json();\r\n        products.value = data; // Сохраняем товары\r\n    } catch (error) {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n};\r\n\r\n// Извлекаем бренды из категорий\r\n// Извлекаем уникальные бренды из категорий\r\nconst extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    console.log('categoriesData', categoriesData);\r\n\r\n    categoriesData.forEach(category => {\r\n        console.log('category', category);\r\n        if (category.brand) {\r\n            allBrands.add(category.brand);\r\n        }\r\n    });\r\n\r\n    brands.value = Array.from(allBrands);\r\n    console.log(\"Уникальные бренды:\", brands.value); // Логируем извлеченные бренды\r\n};\r\n\r\n\r\nconst extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n\r\n    categoriesData.forEach(item => {\r\n        if (item.characteristics && Array.isArray(item.characteristics)) {\r\n            item.characteristics.forEach(characteristic => {\r\n                const charName = characteristic.characteristic;\r\n                const charValue = characteristic.value;\r\n\r\n                // Инициализируем массив значений, если ещё не создан\r\n                if (!characteristicsData[charName]) {\r\n                    characteristicsData[charName] = new Set();\r\n                }\r\n                characteristicsData[charName].add(charValue); // Добавляем значение как Set, чтобы избежать дубликатов\r\n            });\r\n        }\r\n    });\r\n\r\n    // Преобразуем Set в массивы для удобства отображения\r\n    for (const charName in characteristicsData) {\r\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n\r\n    characteristics.value = { ...characteristicsData }; // Копируем данные в реактивный объект\r\n\r\n    // Используем JSON.stringify, чтобы увидеть сам объект без реактивной оболочки\r\n    console.log(\"Уникальные характеристики с данными:\", JSON.stringify(characteristics.value));\r\n};\r\n\r\n\r\n// Фильтрация товаров по выбранным брендам\r\nconst filteredProducts = computed(() => {\r\n    if (selectedBrands.value.length === 0) {\r\n        return products.value;\r\n    }\r\n    return products.value.filter(product =>\r\n        selectedBrands.value.includes(product.brand)\r\n    );\r\n});\r\n\r\n// Функция для выбора категории\r\nconst selectCategory = (category) => {\r\n    console.log('Выбрана категория:', category);\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.category-menu {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.category-menu ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\n.category-menu li {\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    background-color: #f0f0f0;\r\n    margin: 5px 0;\r\n}\r\n\r\n.category-menu li:hover {\r\n    background-color: #e0e0e0;\r\n}\r\n\r\n.brand-filter {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.brand-checkbox {\r\n    margin: 5px 0;\r\n}\r\n\r\n.product-list .product {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.product-list ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}