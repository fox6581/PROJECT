{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport ProductCart from '../Products/ProductCart.vue';\nimport CategoryFilter from './CategoryFilter.vue';\nimport BrandFilter from './BrandFilter.vue';\nimport CharacteristicFilter from './CharacteristicFilter.vue';\nimport { API_BASE_URL } from '@/config';\nconst productsPerPage = 10;\nexport default {\n  __name: 'LeftMenu',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const apiUrl = API_BASE_URL;\n    const currentPage = ref(1);\n    const totalPages = computed(() => Math.ceil(totalProducts.value / productsPerPage));\n    const totalProducts = computed(() => filteredProducts.value.length);\n    const paginatedProducts = computed(() => {\n      const startIndex = (currentPage.value - 1) * productsPerPage;\n      return filteredProducts.value.slice(startIndex, startIndex + productsPerPage);\n    });\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const prevPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n    const selectedCharacteristics = ref({});\n    const selectedCategorys = ref([]);\n    const selectedBrands = ref([]);\n    const categories = ref([]);\n    const products = ref([]);\n    const brands = ref([]);\n    const characteristics = ref({});\n    onMounted(async () => {\n      await loadCategories();\n      await loadProducts();\n    });\n    const loadCategories = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        const data = await response.json();\n        categories.value = data;\n        extractBrands(data);\n        extractCategorys(data);\n        extractCharacteristics(data);\n      } catch (error) {\n        console.error('Ошибка при загрузке категорий:', error);\n      }\n    };\n    const loadProducts = async () => {\n      try {\n        const response = await fetch('http://localhost:1452/api/products');\n        const data = await response.json();\n        products.value = data;\n      } catch (error) {\n        console.error('Ошибка при загрузке товаров:', error);\n      }\n    };\n    const extractBrands = categoriesData => {\n      const allBrands = new Set();\n      categoriesData.forEach(category => {\n        if (category.brand) {\n          allBrands.add(category.brand);\n        }\n      });\n      brands.value = Array.from(allBrands);\n    };\n    const extractCategorys = categoriesData => {\n      const allCategorys = new Set();\n      categoriesData.forEach(category => {\n        if (category.category) {\n          allCategorys.add(category.category);\n        }\n      });\n      categorys.value = Array.from(allCategorys);\n    };\n    const extractCharacteristics = categoriesData => {\n      const characteristicsData = {};\n      categoriesData.forEach(item => {\n        if (item.characteristics && Array.isArray(item.characteristics)) {\n          item.characteristics.forEach(characteristic => {\n            const charName = characteristic.characteristic;\n            const charValue = characteristic.value;\n            if (!characteristicsData[charName]) {\n              characteristicsData[charName] = new Set();\n            }\n            characteristicsData[charName].add(charValue);\n          });\n        }\n      });\n      for (const charName in characteristicsData) {\n        characteristicsData[charName] = Array.from(characteristicsData[charName]);\n      }\n      characteristics.value = {\n        ...characteristicsData\n      };\n    };\n    const updateSelectedCategories = updatedCategories => {\n      selectedCategorys.value = updatedCategories;\n    };\n    const updateSelectedBrands = updatedBrands => {\n      selectedBrands.value = updatedBrands;\n    };\n    const updateSelectedCharacteristics = updatedCharacteristics => {\n      selectedCharacteristics.value = updatedCharacteristics;\n    };\n    const filteredProducts = computed(() => {\n      return products.value.filter(product => {\n        const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\n        const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\n        const matchesCharacteristics = Object.entries(selectedCharacteristics.value).every(([key, values]) => {\n          return !values.length || values.includes(product.characteristics[key]);\n        });\n        return matchesCategory && matchesBrand && matchesCharacteristics;\n      });\n    });\n    const __returned__ = {\n      apiUrl,\n      currentPage,\n      productsPerPage,\n      totalPages,\n      totalProducts,\n      paginatedProducts,\n      nextPage,\n      prevPage,\n      selectedCharacteristics,\n      selectedCategorys,\n      selectedBrands,\n      categories,\n      products,\n      brands,\n      characteristics,\n      loadCategories,\n      loadProducts,\n      extractBrands,\n      extractCategorys,\n      extractCharacteristics,\n      updateSelectedCategories,\n      updateSelectedBrands,\n      updateSelectedCharacteristics,\n      filteredProducts,\n      ref,\n      onMounted,\n      computed,\n      ProductCart,\n      CategoryFilter,\n      BrandFilter,\n      CharacteristicFilter,\n      get API_BASE_URL() {\n        return API_BASE_URL;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","ProductCart","CategoryFilter","BrandFilter","CharacteristicFilter","API_BASE_URL","productsPerPage","apiUrl","currentPage","totalPages","Math","ceil","totalProducts","value","filteredProducts","length","paginatedProducts","startIndex","slice","nextPage","prevPage","selectedCharacteristics","selectedCategorys","selectedBrands","categories","products","brands","characteristics","loadCategories","loadProducts","response","fetch","data","json","extractBrands","extractCategorys","extractCharacteristics","error","console","categoriesData","allBrands","Set","forEach","category","brand","add","Array","from","allCategorys","categorys","characteristicsData","item","isArray","characteristic","charName","charValue","updateSelectedCategories","updatedCategories","updateSelectedBrands","updatedBrands","updateSelectedCharacteristics","updatedCharacteristics","filter","product","matchesCategory","includes","matchesBrand","matchesCharacteristics","Object","entries","every","key","values"],"sources":["C:/shopvue/front-vue3/src/components/Menu/LeftMenu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h3>Количество товаров: {{ totalProducts }}</h3>\r\n  \r\n      <ProductCart :products=\"paginatedProducts\" :apiUrl=\"apiUrl\" />\r\n  \r\n      <!-- Пагинация -->\r\n      <div class=\"pagination\">\r\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Назад</button>\r\n        <span>Страница {{ currentPage }} из {{ totalPages }}</span>\r\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Вперед</button>\r\n      </div>\r\n  \r\n      <CategoryFilter \r\n        :categories=\"categorys\"\r\n        :selectedCategories=\"selectedCategorys\"\r\n        @update:selectedCategories=\"updateSelectedCategories\"\r\n      />\r\n  \r\n      <BrandFilter \r\n        :brands=\"brands\"\r\n        :selectedBrands=\"selectedBrands\"\r\n        @update:selectedBrands=\"updateSelectedBrands\"\r\n      />\r\n  \r\n      <CharacteristicFilter \r\n        :characteristics=\"characteristics\"\r\n        :selectedCharacteristics=\"selectedCharacteristics\"\r\n        @update:selectedCharacteristics=\"updateSelectedCharacteristics\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import ProductCart from '../Products/ProductCart.vue';\r\n  import CategoryFilter from './CategoryFilter.vue';\r\n  import BrandFilter from './BrandFilter.vue';\r\n  import CharacteristicFilter from './CharacteristicFilter.vue';\r\n  import { API_BASE_URL } from '@/config';\r\n  \r\n  const apiUrl = API_BASE_URL;\r\n  \r\n  const currentPage = ref(1);\r\n  const productsPerPage = 10;\r\n  \r\n  const totalPages = computed(() => Math.ceil(totalProducts.value / productsPerPage));\r\n  \r\n  const totalProducts = computed(() => filteredProducts.value.length);\r\n  \r\n  const paginatedProducts = computed(() => {\r\n    const startIndex = (currentPage.value - 1) * productsPerPage;\r\n    return filteredProducts.value.slice(startIndex, startIndex + productsPerPage);\r\n  });\r\n  \r\n  const nextPage = () => {\r\n    if (currentPage.value < totalPages.value) {\r\n      currentPage.value++;\r\n    }\r\n  };\r\n  \r\n  const prevPage = () => {\r\n    if (currentPage.value > 1) {\r\n      currentPage.value--;\r\n    }\r\n  };\r\n  \r\n  const selectedCharacteristics = ref({});\r\n  const selectedCategorys = ref([]);\r\n  const selectedBrands = ref([]);\r\n  const categories = ref([]);\r\n  const products = ref([]);\r\n  const brands = ref([]);\r\n  const characteristics = ref({});\r\n  \r\n  onMounted(async () => {\r\n    await loadCategories();\r\n    await loadProducts();\r\n  });\r\n  \r\n  const loadCategories = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      const data = await response.json();\r\n      categories.value = data;\r\n      extractBrands(data);\r\n      extractCategorys(data);\r\n      extractCharacteristics(data);\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке категорий:', error);\r\n    }\r\n  };\r\n  \r\n  const loadProducts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:1452/api/products');\r\n      const data = await response.json();\r\n      products.value = data;\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке товаров:', error);\r\n    }\r\n  };\r\n  \r\n  const extractBrands = (categoriesData) => {\r\n    const allBrands = new Set();\r\n    categoriesData.forEach(category => {\r\n      if (category.brand) {\r\n        allBrands.add(category.brand);\r\n      }\r\n    });\r\n    brands.value = Array.from(allBrands);\r\n  };\r\n  \r\n  const extractCategorys = (categoriesData) => {\r\n    const allCategorys = new Set();\r\n    categoriesData.forEach(category => {\r\n      if (category.category) {\r\n        allCategorys.add(category.category);\r\n      }\r\n    });\r\n    categorys.value = Array.from(allCategorys);\r\n  };\r\n  \r\n  const extractCharacteristics = (categoriesData) => {\r\n    const characteristicsData = {};\r\n    categoriesData.forEach(item => {\r\n      if (item.characteristics && Array.isArray(item.characteristics)) {\r\n        item.characteristics.forEach(characteristic => {\r\n          const charName = characteristic.characteristic;\r\n          const charValue = characteristic.value;\r\n  \r\n          if (!characteristicsData[charName]) {\r\n            characteristicsData[charName] = new Set();\r\n          }\r\n          characteristicsData[charName].add(charValue);\r\n        });\r\n      }\r\n    });\r\n  \r\n    for (const charName in characteristicsData) {\r\n      characteristicsData[charName] = Array.from(characteristicsData[charName]);\r\n    }\r\n  \r\n    characteristics.value = { ...characteristicsData };\r\n  };\r\n  \r\n  const updateSelectedCategories = (updatedCategories) => {\r\n    selectedCategorys.value = updatedCategories;\r\n  };\r\n  \r\n  const updateSelectedBrands = (updatedBrands) => {\r\n    selectedBrands.value = updatedBrands;\r\n  };\r\n  \r\n  const updateSelectedCharacteristics = (updatedCharacteristics) => {\r\n    selectedCharacteristics.value = updatedCharacteristics;\r\n  };\r\n  \r\n  const filteredProducts = computed(() => {\r\n    return products.value.filter(product => {\r\n      const matchesCategory = selectedCategorys.value.length === 0 || selectedCategorys.value.includes(product.category);\r\n      const matchesBrand = selectedBrands.value.length === 0 || selectedBrands.value.includes(product.brand);\r\n  \r\n      const matchesCharacteristics = Object.entries(selectedCharacteristics.value).every(([key, values]) => {\r\n        return !values.length || values.includes(product.characteristics[key]);\r\n      });\r\n  \r\n      return matchesCategory && matchesBrand && matchesCharacteristics;\r\n    });\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .pagination {\r\n    margin: 20px 0;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px;\r\n    margin: 0 5px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:disabled {\r\n    background-color: #ccc;\r\n    cursor: not-allowed;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}