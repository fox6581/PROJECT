{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\n\n// Массив с блоками\n\nexport default {\n  __name: 'BrowserBy',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const blocks = ref([{\n      name: 'Phones',\n      image: 'Phones.png',\n      link: '/phones'\n    }, {\n      name: 'Smart Watches',\n      image: 'Smart Watches.png',\n      link: '/phones'\n    }, {\n      name: 'Cameras',\n      image: 'Phones.png',\n      link: '/phones'\n    }, {\n      name: 'Headphones',\n      image: 'Headphones.png',\n      link: '/phones'\n    }, {\n      name: 'Computers',\n      image: 'Computers.png',\n      link: '/phones'\n    }, {\n      name: 'Gaming',\n      image: 'Gaming.png',\n      link: '/phones'\n    }]);\n    const currentIndex = ref(0);\n\n    // Функция для обновления текущего индекса и прокрутки блоков\n    const updateVisibleBlocks = () => {\n      const blockCount = blocks.value.length;\n      const visibleCount = 3; // Показывать 3 блока (или любое другое количество, которое вам нужно)\n      const visibleBlocks = [];\n      for (let i = 0; i < visibleCount; i++) {\n        visibleBlocks.push(blocks.value[(currentIndex.value + i) % blockCount]);\n      }\n      return visibleBlocks;\n    };\n\n    // Переменные для видимых блоков\n    const visibleBlocks = ref(updateVisibleBlocks());\n    const handleClick = link => {\n      console.log(`Redirecting to: ${link}`);\n    };\n\n    // Прокрутка влево\n    const scrollLeft = () => {\n      currentIndex.value = (currentIndex.value - 1 + blocks.value.length) % blocks.value.length;\n      visibleBlocks.value = updateVisibleBlocks();\n    };\n\n    // Прокрутка вправо\n    const scrollRight = () => {\n      currentIndex.value = (currentIndex.value + 1) % blocks.value.length;\n      visibleBlocks.value = updateVisibleBlocks();\n    };\n    const __returned__ = {\n      blocks,\n      currentIndex,\n      updateVisibleBlocks,\n      visibleBlocks,\n      handleClick,\n      scrollLeft,\n      scrollRight,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","blocks","name","image","link","currentIndex","updateVisibleBlocks","blockCount","value","length","visibleCount","visibleBlocks","i","push","handleClick","console","log","scrollLeft","scrollRight"],"sources":["C:/shopvue/front-vue3/src/components/Home/BrowserBy.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-wrapper\">\r\n      <!-- Кнопка \"влево\" -->\r\n      <button class=\"arrow-button left\" @click=\"scrollLeft\">&#8592;</button>\r\n  \r\n      <div class=\"container\">\r\n        <div v-for=\"(block, index) in visibleBlocks\" :key=\"index\" class=\"block\" @click=\"handleClick(block.link)\">\r\n          <img :src=\"require(`@/assets/${block.image}`)\" :alt=\"block.name\" width=\"48\" height=\"48\" />\r\n          <p>{{ block.name }}</p>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Кнопка \"вправо\" -->\r\n      <button class=\"arrow-button right\" @click=\"scrollRight\">&#8594;</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref } from 'vue';\r\n  \r\n  // Массив с блоками\r\n  const blocks = ref([\r\n    { name: 'Phones', image: 'Phones.png', link: '/phones' },\r\n    { name: 'Smart Watches', image: 'Smart Watches.png', link: '/phones' },\r\n    { name: 'Cameras', image: 'Phones.png', link: '/phones' },\r\n    { name: 'Headphones', image: 'Headphones.png', link: '/phones' },\r\n    { name: 'Computers', image: 'Computers.png', link: '/phones' },\r\n    { name: 'Gaming', image: 'Gaming.png', link: '/phones' },\r\n  ]);\r\n  \r\n  const currentIndex = ref(0);\r\n  \r\n  // Функция для обновления текущего индекса и прокрутки блоков\r\n  const updateVisibleBlocks = () => {\r\n    const blockCount = blocks.value.length;\r\n    const visibleCount = 3; // Показывать 3 блока (или любое другое количество, которое вам нужно)\r\n    const visibleBlocks = [];\r\n  \r\n    for (let i = 0; i < visibleCount; i++) {\r\n      visibleBlocks.push(blocks.value[(currentIndex.value + i) % blockCount]);\r\n    }\r\n  \r\n    return visibleBlocks;\r\n  };\r\n  \r\n  // Переменные для видимых блоков\r\n  const visibleBlocks = ref(updateVisibleBlocks());\r\n  \r\n  const handleClick = (link) => {\r\n    console.log(`Redirecting to: ${link}`);\r\n  };\r\n  \r\n  // Прокрутка влево\r\n  const scrollLeft = () => {\r\n    currentIndex.value = (currentIndex.value - 1 + blocks.value.length) % blocks.value.length;\r\n    visibleBlocks.value = updateVisibleBlocks();\r\n  };\r\n  \r\n  // Прокрутка вправо\r\n  const scrollRight = () => {\r\n    currentIndex.value = (currentIndex.value + 1) % blocks.value.length;\r\n    visibleBlocks.value = updateVisibleBlocks();\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .container-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n  }\r\n  \r\n  .arrow-button {\r\n    font-size: 24px;\r\n    background-color: transparent;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: #000;\r\n    padding: 10px;\r\n    z-index: 1;\r\n  }\r\n  \r\n  .arrow-button.left {\r\n    position: absolute;\r\n    left: 0;\r\n  }\r\n  \r\n  .arrow-button.right {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n  \r\n  .container {\r\n    display: flex;\r\n    column-gap: 20px;\r\n    width: 1120px;\r\n    margin: auto;\r\n    overflow-x: hidden; /* Скрыть не видимые блоки */\r\n  }\r\n  \r\n  .block {\r\n    font-family: ABeeZee;\r\n    font-size: 16px;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    line-height: 24px;\r\n    text-align: center;\r\n    color: #000;\r\n    width: 160px;\r\n    height: 128px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: #EDEDED;\r\n    border-radius: 15px;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .block p {\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    margin-top: 8px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AAkBE,SAASA,GAAG,QAAQ,KAAK;;AAEzB;;;;;;;;IACA,MAAMC,MAAM,GAAGD,GAAG,CAAC,CACjB;MAAEE,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAU,CAAC,EACxD;MAAEF,IAAI,EAAE,eAAe;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,IAAI,EAAE;IAAU,CAAC,EACtE;MAAEF,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAU,CAAC,EACzD;MAAEF,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAU,CAAC,EAChE;MAAEF,IAAI,EAAE,WAAW;MAAEC,KAAK,EAAE,eAAe;MAAEC,IAAI,EAAE;IAAU,CAAC,EAC9D;MAAEF,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAU,CAAC,CACzD,CAAC;IAEF,MAAMC,YAAY,GAAGL,GAAG,CAAC,CAAC,CAAC;;IAE3B;IACA,MAAMM,mBAAmB,GAAGA,CAAA,KAAM;MAChC,MAAMC,UAAU,GAAGN,MAAM,CAACO,KAAK,CAACC,MAAM;MACtC,MAAMC,YAAY,GAAG,CAAC,CAAC,CAAC;MACxB,MAAMC,aAAa,GAAG,EAAE;MAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,EAAEE,CAAC,EAAE,EAAE;QACrCD,aAAa,CAACE,IAAI,CAACZ,MAAM,CAACO,KAAK,CAAC,CAACH,YAAY,CAACG,KAAK,GAAGI,CAAC,IAAIL,UAAU,CAAC,CAAC;MACzE;MAEA,OAAOI,aAAa;IACtB,CAAC;;IAED;IACA,MAAMA,aAAa,GAAGX,GAAG,CAACM,mBAAmB,CAAC,CAAC,CAAC;IAEhD,MAAMQ,WAAW,GAAIV,IAAI,IAAK;MAC5BW,OAAO,CAACC,GAAG,CAAC,mBAAmBZ,IAAI,EAAE,CAAC;IACxC,CAAC;;IAED;IACA,MAAMa,UAAU,GAAGA,CAAA,KAAM;MACvBZ,YAAY,CAACG,KAAK,GAAG,CAACH,YAAY,CAACG,KAAK,GAAG,CAAC,GAAGP,MAAM,CAACO,KAAK,CAACC,MAAM,IAAIR,MAAM,CAACO,KAAK,CAACC,MAAM;MACzFE,aAAa,CAACH,KAAK,GAAGF,mBAAmB,CAAC,CAAC;IAC7C,CAAC;;IAED;IACA,MAAMY,WAAW,GAAGA,CAAA,KAAM;MACxBb,YAAY,CAACG,KAAK,GAAG,CAACH,YAAY,CAACG,KAAK,GAAG,CAAC,IAAIP,MAAM,CAACO,KAAK,CAACC,MAAM;MACnEE,aAAa,CAACH,KAAK,GAAGF,mBAAmB,CAAC,CAAC;IAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}